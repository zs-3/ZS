<?xml version="1.0"?>
<doc>
<assembly>
<name>
SmallVisualBasicLibrary
</name>
</assembly>
<members>
<member name="T:Microsoft.SmallVisualBasic.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.My.Resources.Resources.BeepBeep">
<summary>
  Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.My.Resources.Resources.BellRing">
<summary>
  Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.My.Resources.Resources.Chime">
<summary>
  Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.My.Resources.Resources.Click">
<summary>
  Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.My.Resources.Resources.Pause">
<summary>
  Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
</summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.Evaluator.Evaluator">
 <summary>
 Allows you to evaluate mathematical expressions at runtime.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Evaluator.Evaluator.Expression">
 <summary>
 Gets or sets the mathematical expression that you want to evaluate. This expression is case-insensitive.
 You can use x as the input variable, and you can send its value as a parameter when you call the Evaluate method.
 The expression can contain arithmitic operators like (+ - * / % Mod ^).
 You can also use the methods of the Math type. For example:
 Evaluator.Expression = "(2 + 3 * x) / Sin(GetRadians(x))"
 For simplicity, you can use Radians instead or GetRadians or even use Rad:
 Evaluator.Expression = "(2 + 3 * x) / Sin(Rad(x))"
 For more info about the math expression syntax, see the sVB docs reference book.
 </summary>        
</member>
<member name="M:Microsoft.SmallVisualBasic.Evaluator.Evaluator.Evaluate(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Calculates the value of the mathematical expression with x substituted with the given value.
 </summary>
 <param name="x">The value to substitute x with.</param>
 <returns>The value of the mathematical expression at the given x.</returns>
</member>
<member name="P:Microsoft.SmallVisualBasic.Evaluator.Evaluator.LastErrors">
 <summary>
 Returns a string that contains details about last errors that happened while parsing and evaluating the current expression.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Internal.NativeHelper">
 <summary>
 A private static helper for calling Native APIs
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Internal.RestHelper">
 <summary>
 A private static helper for calling Rest based APIs
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Internal.RestHelper.GetContents(System.String)">
 <summary>
 Given a Rest URL, gets the contents as an XML Document.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Internal.SmallBasicApplication">
 <summary>
 The Application class provides a Small Basic program with an application object.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Internal.SmallBasicApplication.Dispatcher">
 <summary>
 Gets the dispatcher for the Small Basic application
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Array">
 <summary>
 This object provides a way of storing more than one value for a given name. These values can be accessed by another index.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Array.EmptyArray">
 <summary>
 Creates an empty array. You can also use x = {} to create an empty array.
 </summary>
 <returns>an empty array</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Array.AddItem(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds an item to the array.
 </summary>
 <param name="array">the input array</param>
 <param name="value">the item you want to add after the last item in the array.</param>
 <returns>a new array with the new item added. The input array will not be changed</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Array.AddNextItem(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds an item to the array. The input array will be changed directly, so this method is faster when you want to build a large array, but be careful because it will affect the reference array that the current array is copied from!
 sVB calls this method when you use the array intializer {}, so it is faster than adding individual items using the array indixer [].
 </summary>
 <param name="array">The input array. The array must be intialized first, even with an empty array {}.</param>
 <param name="value">The item you want to add after the last item in the array.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Array.Append(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds an item at the end of the array. The input array will be changed directly, so this method is faster when you want to build a large array, but be careful because it will affect the reference array that the current array is copied from!
 sVB calls this method when you use the array intializer {}, so it is faster than adding individual items using the array indixer [].
 </summary>
 <param name="array">The input array. The array must be intialized first, even with an empty array {}.</param>
 <param name="value">The item you want to add after the last item in the array.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Array.AddItems(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds many items to the array.
 </summary>
 <param name="array">the input array</param>
 <param name="items">an array containing the items to add eact of them as a single item at the end of the array.</param>
 <returns>a new array with the given items. The input array will not be changed</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Array.AddKeyValue(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds an item to the array, with the given key and value
 </summary>
 <param name="array">the input array</param>
 <param name="key">the key of the item. If there is already an item with this key, it's value will be modified</param>
 <param name="value">the value of the item</param>
 <returns>a new arry with the item added. the input array will not be changed</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Array.GetItemAt(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the value of the array item that exists at the given numeric position.
 </summary>
 <param name="array">The given array.</param>
 <param name="position">A number that represents the position of the item in the array, which not always be the same as its index (key). Note that position must be > 0.</param>
 <returns>the item value if found, otherwise empty string "".</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Array.SetItemAt(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Sets the value of the array item that exists at the given numeric position. The input array will be changed directly, so this method is faster then the array indexer [] when dealing with a large array, but be careful because it will affect the reference array that the current array is copied from!
 </summary>
 <param name="array">The given array.</param>
 <param name="position">A number that represents the position of the item in the array, which is not always the same as its index (key). Note that position must be > 0.</param>
 <param name="value">The item value.</param>
 <returns>the item key if found at the given position, otherwise an empty string "".</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Array.GetKeyAt(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the key of the array item that exists at the given numeric position.
 </summary>
 <param name="array">The given array.</param>
 <param name="position">A number that represents the position of the item in the array, which not always be the same as its index (key). Note that position must be > 0.</param>
 <returns>the item key if found, otherwise empty string "".</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Array.ContainsIndex(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets whether or not the array contains the specified index.  This is very useful when deciding if the array's index was initialized by some value or not.
 </summary>
 <param name="array">
 The array to check.
 </param>
 <param name="index">
 The index to check.
 </param>
 <returns>
True" or "False" depending on if the index was present in the specified array.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Array.ContainsValue(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets whether or not the array contains the specified value.  This is very useful when deciding if the array's value was stored in some index.
 </summary>
 <param name="array">
 The array to check.
 </param>
 <param name="value">
 The value to check.
 </param>
 <returns>
 "True" or "False" depending on if the value was present in the specified array.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Array.GetAllIndices(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets all the indices for the array, as another array.
 </summary>
 <param name="array">
 The array whose indices are requested.
 </param>
 <returns>
 An array filled with all the indices of the specified array.  The index of the returned array starts from 1.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Array.GetItemCount(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the number of items stored in the array.
 </summary>
 <param name="array">
 The array for which the count is requested.
 </param>
 <returns>
 The number of items in the specified array.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Array.IsArray(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets whether or not a given variable is an array.
 </summary>
 <param name="array">
 The variable to check.
 </param>
 <returns>
 "True" if the specified variable is an array.  "False" otherwise.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Array.SetValue(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Sets a value for a given array and index.
 </summary>
 <param name="array">the input array</param>
 <param name="index">the index or the key of the item.</param>
 <param name="value">the value to set.''' </param>
 <returns>a new array with the value set. The input array will not be changed</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Array.GetValue(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets a value for a given array and index.
 </summary>
 <param name="arrayName">
 The name of the array.
 </param>
 <param name="index">
 The name of the index.
 </param>
 <returns>
 The value at the specified index of the specified array.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Array.RemoveItem(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Removes the array item at the specified index.
 </summary>
 <param name="array">The name of the array.</param>
 <param name="index">The index of the item to remove.</param>
 <returns>a new array with the item removed. The original array will not change</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Array.Find(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Searches the array for the given value, and return its key.
 </summary>
 <param name="array">the input array</param>
 <param name="value">the item to search for</param>
 <param name="start">an integer representing the array index to start searching at</param>
 <param name="ignoreCase">set it to true if you want to do an case-insensitive search</param>
 <returns>the key of the item if found, otherwise empty string</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Array.IndexOf(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Searches the array for the given value, and returns its index position in the array.
 </summary>
 <param name="array">the input array</param>
 <param name="value">the item to search for</param>
 <param name="start">an integer representing the array index to start searching at</param>
 <param name="ignoreCase">set it to true if you want to do an case-insensitive search</param>
 <returns>the position (order) of the item in the array if found, otherwise 0. </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Array.Join(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Joins the given array items into one text.
 </summary>
 <param name="array">the input array</param>
 <param name="separator">a string to use as a separator between array items</param>
 <returns>a string containing the array items, separated by the given separator</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Array.ToStr(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
Converts the given array to a string
 </summary>
 <param name="array">the input array</param>
 <returns>The string representation of the array. If the array is simple, its string can be of the form {1, 2, 3}. If the array contains keys, its string can be of the form {[1]=1, [2]=2, [Name]=Adam}.</returns>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Clock">
 <summary>
 This class provides access to the system clock
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Clock.Time">
 <summary>
 Gets the current system time.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Clock.Date">
 <summary>
 Gets the current system date.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Clock.Year">
 <summary>
 Gets the current year.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Clock.Month">
 <summary>
 Gets the current Month.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Clock.Day">
 <summary>
 Gets the current day of the month.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Clock.WeekDay">
 <summary>
 Gets the current day of the week.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Clock.Hour">
 <summary>
 Gets the current Hour.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Clock.Minute">
 <summary>
 Gets the current Minute.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Clock.Second">
 <summary>
 Gets the current Second.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Clock.Millisecond">
 <summary>
 Gets the current Millisecond.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Clock.ElapsedMilliseconds">
 <summary>
 Gets the number of milliseconds that have elapsed since 1900.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Controls">
 <summary>
 The Controls object allows you to add, move and interact with controls.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Controls.LastClickedButton">
 <summary>
 Gets the last Button that was clicked on the Graphics Window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Controls.LastTypedTextBox">
 <summary>
 Gets the last TextBox, text was typed into.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.Library.Controls.ButtonClicked">
 <summary>
 Raises an event when any button control is clicked.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.Library.Controls.TextTyped">
 <summary>
 Raises an event when text is typed into any TextBox control.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.AddButton(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a button to the graphics window at the specified position.
 </summary>
 <param name="caption">The caption to display in the button.</param>
 <param name="left">The x co-ordinate of the button.</param>
 <param name="top">The y co-ordinate of the button.</param>
 <returns>
 The key of the Button. sVB can deal with this key as an object of type Button, so, you can access the Button methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.GetButtonCaption(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the current caption of the specified button.
 </summary>
 <param name="buttonName">The Button whose caption is requested.</param>
 <returns>
 The current caption of the button.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.SetButtonCaption(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Sets the caption of the specified button.
 </summary>
 <param name="buttonName">The Button whose caption needs to be set.</param>
 <param name="caption">The new caption for the button.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.AddTextBox(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a text input box to the graphics window at the specified position.
 </summary>
 <param name="left">The x co-ordinate of the text box.</param>
 <param name="top">The y co-ordinate of the text box.</param>
 <returns>
 The key of the TextBox. sVB can deal with this key as an object of type TextBox, so, you can access the TextBox methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.AddCheckBox(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new CheckBox control to the graphics window
 </summary>
 <param name="caption">the text to desply on the CheckBox</param>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="isChecked">The value to set to the Checked property</param>
 <returns>
 The key of the CheckBox. sVB can deal with this key as an object of type CheckBox, so, you can access the CheckBox methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.AddComboBox(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new ComboBox control to the graphics window
 </summary>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="width">The width of the control. Use -1 for auto-width</param>
 <param name="height">The height of the control. Use -1 for auto-height</param>
 <returns>
 The key of the comboBox. sVB can deal with this key as an object of type ComboBox, so, you can use the ComboBox methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.AddDatePicker(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new DatePicker control to the graphics window
 </summary>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="width">The width of the control. Use -1 for auto-width</param>
 <param name="selectedDate">the date that will be selected in the control</param>
 <returns>
 The key of the DatePicker. sVB can deal with this key as an object of type DatePicker, so, you can access the DatePicker methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.AddLabel(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new Label control to the graphics window
 </summary>
 <param name="caption">The text to display on the label</param>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <returns>
 The key of the label. sVB can deal with this key as an object of type Label, so, you can access the Label methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.AddListBox(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new ListBox control to the graphics window
 </summary>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="width">The width of the control. Use -1 for auto-width</param>
 <param name="height">The height of the control. Use -1 for auto-height</param>
 <returns>
 The key of the listBox. sVB can deal with this key as an object of type ListBox, so, you can access the ListBox methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.AddProgressBar(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new ProgressBar control to the graphics window
 </summary>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="width">The width of the control. Use -1 for auto-width</param>
 <param name="height">The height of the control. Use -1 for auto-height</param>
 <param name="minimum">The progress minimum value</param>
 <param name="maximum">The progress maximum value. Use 0 if the max value is indeterminate.</param>
 <returns>
 The key of the ProgressBar. sVB can deal with this key as an object of type ProgressBar, so, you can access the ProgressBar methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.AddRadioButton(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new RadioButton control to the graphics window
 </summary>
 <param name="caption">The text to desply on the RadioButton</param>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="groupName">The name of the group to add the button to</param>
 <param name="isChecked">The value to set to the Checked property</param>
 <returns>
 The key of the RadioButton. sVB can deal with this key as an object of type RadioButton, so, you can access the RadioButton methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.AddScrollBar(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new ScrollBar control to the graphics window
 </summary>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="width">The width of the control. Use -1 for auto-width</param>
 <param name="height">The height of the control. Use -1 for auto-height</param>
 <param name="minimum">The scrollbar minimum value</param>
 <param name="maximum">The scrollbar maximum value.</param>
 <param name="value">The scrollbar current value</param>
 <returns>
 The key of the Scrollbar. sVB can deal with this key as an object of type Scrollbar, so, you can access the Scrollbar methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.AddSlider(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new Slider control to the graphics window
 </summary>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="width">The width of the control. Use -1 for auto-width</param>
 <param name="height">The height of the control. Use -1 for auto-height</param>
 <param name="minimum">The slider minimum value</param>
 <param name="maximum">The slider maximum value.</param>
 <param name="value">The slider current value</param>
 <param name="tickFrequency">The distance between slide ticks</param>
 <returns>
 The key of the Slider. sVB can deal with this key as an object of type Slider, so, you can access the Slider methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.AddTimer(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new Timer control to the graphics window. This allows you to add many timers to do different tasks in different intervals.
 </summary>
 <param name="interval">The delay time in milliseconds between ticks</param>
 <returns>
 The key of the Timer. sVB can deal with this key as an object of type WinTimer, so, you can access the WinTimer methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.AddToggleButton(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new ToggleButton control to the graphics window
 </summary>
 <param name="caption">The text that will b displayed on the control</param>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="width">The width of the control. Use -1 for auto-width</param>
 <param name="height">The height of the control. Use -1 for auto-height</param>
 <returns>
 The key of the ToggleButton. sVB can deal with this key as an object of type ToggleButton, so, you can access the ToggleButton methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.AddMultiLineTextBox(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a multi-line text input box to the graphics window at the specified position.
 </summary>
 <param name="left">The x co-ordinate of the text box.</param>
 <param name="top">The y co-ordinate of the text box.</param>
 <returns>
 The key of the TextBox. sVB can deal with this key as an object of type TextBox, so, you can access the TextBox methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.GetTextBoxText(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the current text of the specified TextBox.
 </summary>
 <param name="textBoxName">
 The TextBox whose text is requested.
 </param>
 <returns>
 The text in the TextBox
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.SetTextBoxText(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Sets the text of the specified TextBox.
 </summary>
 <param name="textBoxName">The TextBox whose text needs to be set.</param>
 <param name="text">The new text for the TextBox.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.Remove(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Removes a control from the Graphics Window.
 </summary>
 <param name="controlName">The name of the control that needs to be removed.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.Move(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Moves the control with the specified name to a new position.
 </summary>
 <param name="control">The name of the control to move.</param>
 <param name="x">The x co-ordinate of the new position.</param>
 <param name="y">The y co-ordinate of the new position.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.SetSize(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Sets the size of the control.
 </summary>
 <param name="control">
 The name of the control to be resized.
 </param>
 <param name="width">The width of the control.</param>
 <param name="height">The height of the control.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.HideControl(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Hides an already added control.
 </summary>
 <param name="controlName">
 The name of the control.
 </param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Controls.ShowControl(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Shows a previously hidden control.
 </summary>
 <param name="controlName">
 The name of the control.
 </param>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Desktop">
 <summary>
 This class provides methods to interact with the desktop.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Desktop.Width">
 <summary>
 Gets the screen width of the primary desktop.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Desktop.Height">
 <summary>
 Gets the screen height of the primary desktop.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Desktop.SetWallPaper(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Sets the specified picture as the desktop's wallpaper.  This file could be a local file or a network file or even an Internet URL.
 </summary>
 <param name="fileOrUrl">
 The filename or URL of the picture.
 </param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Desktop.ShowFontDialog(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Displays the font dialog to allow the user to choose font name, size and other font properties.
 </summary>
 <param name="font">An array that  contains the initial properties to display in the dialog. You can get this arry from the font property of the control that you show the font dialog for.</param>
 <returns>an array containing the font properties under the keys Name, Size, Bold, Italic, Underlined and Color, or returns an empty string "" if the user canceled the operation</returns>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Desktop.FontNames">
 <summary>
 Gets an array containing the font names defined on the users system.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Dictionary">
 <summary>
 Provides access to an online Dictionary service.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Dictionary.GetDefinition(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the definition of a word in English.  The same as GetDefinitionEnglishToEnglish.
 </summary>
 <param name="word">
 The word to define.
 </param>
 <returns>
 The definition(s) of the specified word.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Dictionary.GetDefinitionEnglishToEnglish(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the definition of a word, English to English.
 </summary>
 <param name="word">
 The word to define.
 </param>
 <returns>
 The definition(s) of the specified word.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Dictionary.GetDefinitionSimplifiedChineseToEnglish(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the definition of a word, Simplified Chinese to English.
 </summary>
 <param name="word">
 The word to define.
 </param>
 <returns>
 The definition(s) of the specified word.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Dictionary.GetDefinitionEnglishToGerman(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the definition of a word, English to German.
 </summary>
 <param name="word">
 The word to define.
 </param>
 <returns>
 The definition(s) of the specified word.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Dictionary.GetDefinitionEnglishToSimplifiedChinese(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the definition of a word, English to Simplified Chinese.
 </summary>
 <param name="word">
 The word to define.
 </param>
 <returns>
 The definition(s) of the specified word.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Dictionary.GetDefinitionEnglishToFrench(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the definition of a word, English to French.
 </summary>
 <param name="word">
 The word to define.
 </param>
 <returns>
 The definition(s) of the specified word.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Dictionary.GetDefinitionGermanToEnglish(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the definition of a word, German to English.
 </summary>
 <param name="word">
 The word to define.
 </param>
 <returns>
 The definition(s) of the specified word.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Dictionary.GetDefinitionEnglishToJapanese(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the definition of a word, English to Japanese.
 </summary>
 <param name="word">
 The word to define.
 </param>
 <returns>
 The definition(s) of the specified word.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Dictionary.GetDefinitionFrenchToEnglish(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the definition of a word, French to English.
 </summary>
 <param name="word">
 The word to define.
 </param>
 <returns>
 The definition(s) of the specified word.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Dictionary.GetDefinitionItalianToEnglish(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the definition of a word, Itlian to English.
 </summary>
 <param name="word">
 The word to define.
 </param>
 <returns>
 The definition(s) of the specified word.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Dictionary.GetDefinitionTraditionalChineseToEnglish(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the definition of a word, Traditional Chinese to English.
 </summary>
 <param name="word">
 The word to define.
 </param>
 <returns>
 The definition(s) of the specified word.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Dictionary.GetDefinitionSpanishToEnglish(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the definition of a word, Spanish to English.
 </summary>
 <param name="word">
 The word to define.
 </param>
 <returns>
 The definition(s) of the specified word.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Dictionary.GetDefinitionJapaneseToEnglish(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the definition of a word, Japanese to English.
 </summary>
 <param name="word">
 The word to define.
 </param>
 <returns>
 The definition(s) of the specified word.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Dictionary.GetDefinitionEnglishToKorean(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the definition of a word, English to Korean.
 </summary>
 <param name="word">
 The word to define.
 </param>
 <returns>
 The definition(s) of the specified word.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Dictionary.GetDefinitionEnglishToTraditionalChinese(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the definition of a word, English to Traditional Chinese.
 </summary>
 <param name="word">
 The word to define.
 </param>
 <returns>
 The definition(s) of the specified word.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Dictionary.GetDefinitionKoreanToEnglish(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the definition of a word, Korean to English.
 </summary>
 <param name="word">
 The word to define.
 </param>
 <returns>
 The definition(s) of the specified word.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Dictionary.GetDefinitionEnglishToItalian(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the definition of a word, English to Italian.
 </summary>
 <param name="word">
 The word to define.
 </param>
 <returns>
 The definition(s) of the specified word.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Dictionary.GetDefinitionEnglishToSpanish(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the definition of a word, English to Spanish.
 </summary>
 <param name="word">
 The word to define.
 </param>
 <returns>
 The definition(s) of the specified word.
 </returns>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.File">
 <summary>
 The File object provides methods to access, read and write information from and to a file on disk.  Using this object, it is possible to save and open settings across multiple sessions of your program.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.File.LastError">
 <summary>
 Gets or sets the last encountered file operation based error message.  This property is useful for finding out when some method fails to execute.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.ReadContents(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Opens a file and reads the entire file's contents. This method will be fast for small files that are less than 1 MB in size, but will start to slow down and will be noticeable for files greater than 10MB.
 </summary>
 <param name="filePath">
 The full path of the file to read, like c:\temp\settings.data.
 </param>
 <returns>The entire contents of the file.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.WriteContents(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Opens a file and replaces its data with the given contents.
 </summary>
 <param name="filePath">The full path of the file, like c:\temp\settings.data.</param>
 <param name="contents">The contents to write into the specified file. You can send an array to write its elements to the file, each element in a line.</param>
 <returns>True if the operation was successful, or False otherwise.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.WriteArray(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Opens a file and replaces its data with the given array.
 </summary>
 <param name="filePath">The full path of the file, like c:\temp\settings.data.</param>
 <param name="array">The array to write its string representaion into the specified file.</param>
 <returns>True if the operation was successful, or False otherwise.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.ReadLine(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Opens the specified file and reads the contents at the specified line number.
 Don't use this method in a loop to read many lines from the same file, because it always starts reading from the first line of the file until it reaches the required line, which will have a very bad impact in loops.
 Instead, if the file size is less than 1 mega bytes, you can use the ReadLines method to read all the file lines then walk through it using the loop as you want.
 </summary>
 <param name="filePath">The full path of the file to read from, like c:\temp\settings.data.</param>
 <param name="lineNumber">The line number of the text to be read.</param>
 <returns>
 The text at the specified line of the specified file.
 You should check the File.LastError property to know if the empty string results from an empty line or from a wrong line number or none existing file.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.ReadLines(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Opens the specified file and reads all its lines.
 </summary>
 <param name="filePath">The full path of the file to read from, like c:\temp\settings.data.</param>
 <returns>an array containing the lines of the specified file, or an empty string if the file is not found.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.ReadArray(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Opens the specified file and reads its data as an array.
 </summary>
 <param name="filePath">The full path of the file to read from, like c:\temp\settings.data.</param>
 <returns>an array if the specified file content is a valid string representation of an array, or an empty string otherwise.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.WriteLine(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Opens the specified file and writes the contents at the specified line number.
 This operation will overwrite any existing content at the specified line.
 Don't use this method to write many lines in the same file using a loop, as it will have a bad impact on performance, because it involves copying all file lines to a temp file to write the given content at the given line number, which will be repeated for every line you write using the loop!
 Instead, add all lines to an array and use the WriteLines method to write it at once.
 </summary>
 <param name="filePath">The full path of the file to read from.  An example of a full path will be c:\temp\settings.data.</param>
 <param name="lineNumber">The line number of the text to write.</param>
 <param name="contents">The contents to write at the specified line of the specified file.</param>
 <returns>True if the operation was successful, or False otherwise.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.WriteLines(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Opens the specified file and writes the given lines starting from the specified line number.
 This operation will overwrite any existing content at the corresponding file lines.
 Don't use this method in a loop, as it will have a bad impact on performance, because it involves copying all file lines to a temp file to write the the given content at the given line number, which will be repeated for every line you write using the loop!
 Instead, add all lines to an array and write it for once.
 </summary>
 <param name="filePath">The full path of the file.  An example of a full path will be c:\temp\settings.data.</param>
 <param name="lineNumber">The line number to write the first item of the lines array at.</param>
 <param name="lines">An array to write its items to the file, each item at a line, starting at the given line number.</param>
 <returns>True if the operation was successful, or False otherwise.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.InsertLine(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Opens the specified file and inserts the contents at the specified line number.
 This operation will not overwrite any existing content at the specified line.
 Don't use this method to write many lines in the same file using a loop, as it will have a bad impact on performance, because it involves copying all file lines to a temp file to insert the the given content at the given line number, which will be reoeated for every line you write using the loop!
 Instead, add all lines to one array and use the InsertLines method to insert it at once.
 </summary>
 <param name="filePath">The full path of the file to read from, like c:\temp\settings.data.</param>
 <param name="lineNumber">The line number of the text to insert.</param>
 <param name="contents">The contents to insert into the file.</param>
 <returns>True if the operation was successful, or False otherwise.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.InsertLines(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Opens the specified file and inserts the contents at the specified line number.
 This operation will not overwrite any existing content at the specified line.
 Don't use this method in a loop, as it will have a bad impact on performance, because it involves copying all file lines to a temp file to insert the the given content at the given line number, which will be reoeated for every line you write using the loop!
 Instead, add all lines to one array and send it to this method to insert all the lines in one call.
 </summary>
 <param name="filePath">The full path of the file to read from, like c:\temp\settings.data.</param>
 <param name="lineNumber">The line number of the text to insert.</param>
 <param name="lines">An arry to insert its items into the file, each in a new line.</param>
 <returns>True if the operation was successful, or False otherwise.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.AppendLines(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Opens the specified file and appends the contents to the end of the file then adds a new line.
 </summary>
 <param name="filePath">The full path of the file to write to.  An example of a full path will be c:\temp\settings.data.</param>
 <param name="lines">The contents to append to the end of the file. You can send an array to append its elements to the file, each element in a line.</param>
 <returns>True if the operation was successful, or False otherwise.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.AppendContents(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Opens the specified file and appends the contents to the end of the file.
 </summary>
 <param name="filePath">The full path of the file to read from.  An example of a full path will be c:\temp\settings.data.</param>
 <param name="contents">The contents to append to the end of the file. If you send an array, its string representation wil be written as a single string, without adding any new lines betwee elements</param>
 <returns>True if the operation was successful, or False otherwise.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.CopyFile(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Copies the specified source file to the destination file path.  If the destination points to a location that doesn't exist, the method will attempt to create it automatically.
 Existing files will be overwritten. It is always best to check if the destination file exists if you don't want to overwrite existing files.
 </summary>
 <param name="sourceFilePath">The full path of the file that needs to be copied.  An example of a full path will be c:\temp\settings.data.</param>
 <param name="destinationFilePath">The destination location or the file path.</param>
 <returns>True if the operation was successful, or False otherwise.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.DeleteFile(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Deletes the specified file.
 </summary>
 <param name="filePath">The destination location or the file path, like c:\temp\settings.data.</param>
 <returns>True if the operation was successful, or False otherwise.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.CreateDirectory(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates the specified directory.
 </summary>
 <param name="directoryPath">The full path of the directory to be created.</param>
 <returns>True if the operation was successful, or False otherwise.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.DeleteDirectory(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Deletes the specified directory.
 </summary>
 <param name="directoryPath">The full path of the directory to be deleted.</param>
 <returns>True if the operation was successful, or False otherwise.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.GetFiles(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the path of all the files in the specified directory path.
 </summary>
 <param name="directoryPath">The directory to look for files.</param>
 <returns>
 If the operation was successful, this will return the files as an array.  Otherwise, it will return an empty string "".
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.GetDirectories(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the path of all the directories in the specified directory path.
 </summary>
 <param name="directoryPath">The directory to look for subdirectories.</param>
 <returns>
 If the operation was successful, this will return the list of directories as an array.  Otherwise, it will return an empty string "".
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.GetTemporaryFilePath">
 <summary>
 Creates a new temporary file in a temporary directory and returns the full file path.
 </summary>
 <returns>
 The full file path of the temporary file.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.GetSettingsFilePath">
 <summary>
 Gets the full path of the settings file for this program.  The settings file name is based on the program's name and is present in the same location as the program.
 </summary>
 <returns>
 The full path of the settings file specific for this program.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.OpenFileDialog(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Shows the open file dialog, to allow the user to select a file from his PC file system.
 </summary>
 <param name="extFilters">
 An array containing extension filters, To allow you To specify the file types you want To open. 
 Each extension filter itself Is an array, where:
  •	the first Item descries the file type which ill be displayd in the dialog window in the file types dropdown list.
  •	And the next items contain one Or more extension.
  •	If you will open only one file type category Like images, you can send the extension filter directly as a one dimension array Like: {"Images", "bmp", "jpg", "gif"}.
  •	otherise, send an array of extension filters Like 
     {{"Text Files", ".txt"}, {"Images", "bmp", "jpg", "gif"}}
  •	If you will open only a single extension, you can just use it as a single string like: "doc".
  •	You can mix the above rules, such as 
    {
       {"Text Files", ".txt"}, 
       {"Images", "bmp", "jpg", "gif"}, 
       "doc"
    }
  •	If you want to show all files, use "" Or "*" as the extension, like: {"All Files", "*"}, Or just use "*".
 </param>
 <returns>
 The file name that the user selected, or an empty string "" if he canceled the operation.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.OpenFolderDialog(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Shows the open folder dialog, to allow the user to select a folder from his PC file system.
 </summary>
 <param name="initialFolder">
 The folder path to be initialy selected when the dialog is shown.
 Use an empty string to let the dialog show the folder that the user copied to the clipboard or the last folder that was previously selected by the user.
 </param>
 <returns>
 The folder name that the user selected, or an empty string "" if he canceled the operation.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.File.SaveFileDialog(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Shows the save file dialog, to allow the user to enter the file name and choose a location in his PC file system to save the file to.
 </summary>
 <param name="fileName">A suggested name to save the file with. The user can change this name in the dialog. You can use the full path of the file, to suggest the initial directory in the dialog, otherwise, the initial directory will be the last opened one.</param>
 <param name="extFilters">
 Extension filters specify the file types you want to allow the dialog to view. Each filter consist of a description text and a list of file extensions.
 You can use a standard string filter, where a | is used to separate between the filter parts, and ; is used to separate between file extensions, like: 
 "Text Files|*.txt|Images|*.bmp;*.jpg;*.gif|Doc|*.doc"
 Or you can use an array of extension filters, with each extension filter itself is an array, where:
  •	the first Item descries the file type which ill be displayd in the dialog window in the file types dropdown list.
  •	And the next items contain one Or more extension.
  •	If you will open only one file type category Like images, you can send the extension filter directly as a one dimension array Like: {"Images", "bmp", "jpg", "gif"}.
  •	otherise, send an array of extension filters Like 
     {{"Text Files", ".txt"}, {"Images", "bmp", "jpg", "gif"}}
  •	If you will open only a single extension, you can just use it as a single string like: "doc".
  •	You can mix the above rules, such as 
    {
       {"Text Files", ".txt"}, 
       {"Images", "bmp", "jpg", "gif"}, 
       "doc"
    }
  •	If you want to show all files, use "" Or "*" as the extension, like: {"All Files", "*"}, Or just use "*".
 </param>
 <returns>
 The file name that the user selected, or an empty string "" if he canceled the operation.
 </returns>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Flickr">
 <summary>
 This class provides access to Flickr photo services.
 </summary>
</member>
<member name="F:Microsoft.SmallVisualBasic.Library.Flickr._urlTemplate">
 <summary>
 Flickr URL Template (with https)
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Flickr.GetPictureOfMoment">
 <summary>
 Gets the URL for the picture of the moment.
 </summary>
 <returns>
 A file URL for Flickr's picture of the moment
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Flickr.GetRandomPicture(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the URL for a random picture tagged with the specified tag.
 </summary>
 <param name="tag">
 The tag for the requested picture.
 </param>
 <returns>
 A file URL for Flickr's random picture
 </returns>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.GraphicsWindow">
 <summary>
 The GraphicsWindow provides graphics related input and output functionality.  For example, using this class, it is possible to draw and fill circles and rectangles.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.Topmost">
 <summary>
 Gets or sets whether or not the Graphics Window is the top most window that always appears on top of all other desktop windows even when it is not the active window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.BackgroundColor">
 <summary>
 Gets or sets the Background color of the Graphics Window.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.FillGradiantBackground(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Fills the Graphics Window background with a gradient brush that starts with its background color and ends with the given color.
 </summary>
 <param name="endColor">The end color of the gradient brush</param>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.BrushColor">
 <summary>
 Gets or sets the brush color to be used to fill shapes drawn on the Graphics Window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.GradientEndColor">
 <summary>
 Gets Or sets the end color for the gradient brush. Use the BrushColor property  to set the start color of this gradient brush.
 The Default value Is Colors.None, which means that the BrushColor will be used alone To create a solid brush.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.CanResize">
 <summary>
 Specifies whether or not the Graphics Window can be resized by the user.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.PenWidth">
 <summary>
 Gets or sets the width of the pen used to draw shapes on the Graphics Window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.PenColor">
 <summary>
 Gets or sets the color of the pen used to draw shapes on the Graphics Window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.FontName">
 <summary>
 Gets or sets the Font Name to be used when drawing text on the Graphics Window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.FontSize">
 <summary>
 Gets or sets the Font Size to be used when drawing text on the Graphics Window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.FontBold">
 <summary>
 Gets or sets whether or not the font to be used when drawing text on the Graphics Window, is bold.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.FontItalic">
 <summary>
 Gets or sets whether or not the font to be used when drawing text on the Graphics Window, is italic.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.Title">
 <summary>
 Gets or sets the title for the graphics window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.Height">
 <summary>
 Gets or sets the Height of the graphics window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.Width">
 <summary>
 Gets or sets the Width of the graphics window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.IsClosed">
 <summary>
 Returns True is the GW is closed, otherwise False.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.AutoShow">
 <summary>
 Set this property to False to prevent showing the Graphics Window when any of its methods is called.
 The Default value is True
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.Left">
 <summary>
 Gets or sets the Left Position of the graphics window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.Top">
 <summary>
 Gets or sets the Top Position of the graphics window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.FullScreen">
 <summary>
 Set this property to True to show the Graphics Window in the full screen mode, or set it to False to exit the full screen mode and restore its normal state.
 Note that the user can press F11 to toggle the value of this property.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.LastKey">
 <summary>
 Gets the last key name that was pressed or released. 
 You cant compare this property to the values of th Keys enum, which is valid only for the Event.LastKey and Keyboard.LastKey properties.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.LastText">
 <summary>
 Gets the last text that was entered on the Graphics Window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.MouseX">
 <summary>
 Gets the x-position of the mouse relative to the Graphics Window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.GraphicsWindow.MouseY">
 <summary>
 Gets the y-position of the mouse relative to the Graphics Window.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.Library.GraphicsWindow.KeyDown">
 <summary>
 Raises an event when a key is pressed down on the keyboard.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.Library.GraphicsWindow.KeyUp">
 <summary>
 Raises an event when a key is released on the keyboard.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.Library.GraphicsWindow.MouseDown">
 <summary>
 Raises an event when the mouse button is clicked down.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.Library.GraphicsWindow.MouseUp">
 <summary>
 Raises an event when the mouse button is released.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.Library.GraphicsWindow.MouseMove">
 <summary>
 Raises an event when the mouse is moved around.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.Library.GraphicsWindow.TextInput">
 <summary>
 Raises an event when text is entered on the GraphicsWindow.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.Show">
 <summary>
 Shows the Graphics window to enable interactions with it.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.Hide">
 <summary>
 Hides the Graphics window.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.DrawRectangle(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Draws a rectangle on the screen using the selected Pen.
 </summary>
 <param name="x">The x co-ordinate of the rectangle.</param>
 <param name="y">The y co-ordinate of the rectangle.</param>
 <param name="width">The width of the rectangle.</param>
 <param name="height">The height of the rectangle.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.FillRectangle(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Fills a rectangle on the screen using the selected Brush.
 </summary>
 <param name="x">The x co-ordinate of the rectangle.</param>
 <param name="y">The y co-ordinate of the rectangle.</param>
 <param name="width">The width of the rectangle.</param>
 <param name="height">The height of the rectangle.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.DrawEllipse(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Draws an ellipse on the screen using the selected Pen.
 </summary>
 <param name="x">The x co-ordinate of the ellipse.</param>
 <param name="y">The y co-ordinate of the ellipse.</param>
 <param name="width">The width of the ellipse.</param>
 <param name="height">The height of the ellipse.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.DrawPolygon(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Draws the polygon that is represented by the given points array with the pen of the graphics window.
 </summary>
 <param name="xOffset">The horizontal offest to add to the x-cordinate of each point of the polygon.</param>
 <param name="yOffset">The vertical offest to add to the y-cordinate of each point of the polygon.</param> 
 <param name="xScale">The factor to multiply the polygon width by.</param>
 <param name="yScale">The factor to multiply the polygon height by.</param>
 <param name="pointsArr">An array of points representing the heads of the polygn. Each item in this array is an array containing the x and y of the point.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.FillPolygon(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Fills the polygon that is represented by the given points array with the brush of the graphics window.
 </summary>
 <param name="xOffset">The horizontal offest to add to the x-cordinate of each point of the polygon.</param>
 <param name="yOffset">The vertical offest to add to the y-cordinate of each point of the polygon.</param> 
 <param name="xScale">The factor to multiply the polygon width by.</param>
 <param name="yScale">The factor to multiply the polygon height by.</param>
 <param name="pointsArr">An array of points representing the heads of the polygn. Each item in this array is an array containing the x and y of the point.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.FillEllipse(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Fills an ellipse on the screen using the selected Brush.
 </summary>
 <param name="x">The x co-ordinate of the ellipse.</param>
 <param name="y">The y co-ordinate of the ellipse.</param>
 <param name="width">The width of the ellipse.</param>
 <param name="height">The height of the ellipse.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.DrawTriangle(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Draws a triangle on the screen using the selected pen.
 </summary>
 <param name="x1">The x co-ordinate of the first point.</param>
 <param name="y1">The y co-ordinate of the first point.</param>
 <param name="x2">The x co-ordinate of the second point.</param>
 <param name="y2">The y co-ordinate of the second point.</param>
 <param name="x3">The x co-ordinate of the third point.</param>
 <param name="y3">The y co-ordinate of the third point.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.FillTriangle(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Draws and fills a triangle on the screen using the selected brush.
 </summary>
 <param name="x1">The x co-ordinate of the first point.</param>
 <param name="y1">The y co-ordinate of the first point.</param>
 <param name="x2">The x co-ordinate of the second point.</param>
 <param name="y2">The y co-ordinate of the second point.</param>
 <param name="x3">The x co-ordinate of the third point.</param>
 <param name="y3">The y co-ordinate of the third point.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.DrawBezierCurve(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Draws a cubic Bezier curve between the given start and end points, and passing through the two given control points.
 </summary>
 <param name="x1">The x co-ordinate of the start point.</param>
 <param name="y1">The y co-ordinate of the start point.</param>
 <param name="x2">The x co-ordinate of the first control point.</param>
 <param name="y2">The y co-ordinate of the first control point.</param>
 <param name="x3">The x co-ordinate of the second control point.</param>
 <param name="y3">The y co-ordinate of the second control point.</param>
 <param name="x4">The x co-ordinate of the end point.</param>
 <param name="y4">The y co-ordinate of the end point.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.DrawQuadraticBezierCurve(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Draws a quadratic Bezier curve, from the given start point, passing through the given control point, and ending at the given end point.
 </summary>
 <param name="x1">The x co-ordinate of the start point.</param>
 <param name="y1">The y co-ordinate of the start point.</param>
 <param name="x2">The x co-ordinate of the control point.</param>
 <param name="y2">The y co-ordinate of the control point.</param>
 <param name="x3">The x co-ordinate of the end point.</param>
 <param name="y3">The y co-ordinate of the end point.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.DrawArc(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Draws an arc from between the given start and end points. 
 This arc is a part of the ellipse that has the given radius and passes through these tow points.
 </summary>
 <param name="x1">The x co-ordinate of the start point.</param>
 <param name="y1">The y co-ordinate of the start point.</param>
 <param name="x2">The x co-ordinate of the end point of the arc.</param>
 <param name="y2">The y co-ordinate of the end point of the arc.</param>
 <param name="xRadius">The horizontal radius of the arc</param>
 <param name="yRadius">The vertical radius of the arc</param>
 <param name="angle">The x-axis rotation of the ellipse</param>
 <param name="isLargArc">Use True if the arc should be greater than 180 degrees, or False otherwise</param>
 <param name="isClockwise">Use True to draw the arc in a positive angle direction, or False otherwise</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.DrawLine(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Draws a line from one point to another.
 </summary>
 <param name="x1">The x co-ordinate of the first point.</param>
 <param name="y1">The y co-ordinate of the first point.</param>
 <param name="x2">The x co-ordinate of the second point.</param>
 <param name="y2">The y co-ordinate of the second point.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.DrawText(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Draws a line of text on the screen at the specified location.
 </summary>
 <param name="x">The x co-ordinate of the text start point.</param>
 <param name="y">The y co-ordinate of the text start point.</param>
 <param name="text">The text to draw</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.DrawBoundText(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Draws a line of text on the screen at the specified location.
 </summary>
 <param name="x">The x co-ordinate of the text start point.</param>
 <param name="y">The y co-ordinate of the text start point.</param>
 <param name="width">The maximum available width.  This parameter helps define when the text should wrap.</param>
 <param name="text">The text to draw.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.DrawResizedImage(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Draws the specified image from memory on to the screen, in the specified size.
 </summary>
 <param name="imageName">The name of the image to draw</param>
 <param name="x">The x co-ordinate of the point to draw the image at.</param>
 <param name="y">The y co-ordinate of the point to draw the image at.</param>
 <param name="width">The width to draw the image.</param>
 <param name="height">The height to draw the image.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.DrawImage(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Draws the specified image from memory on to the screen.  
 </summary>
 <param name="imageName">The name of the image to draw.</param>
 <param name="x">The x co-ordinate of the point to draw the image at.</param>
 <param name="y">The y co-ordinate of the point to draw the image at.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.SetPixel(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Draws the pixel specified by the x and y co-ordinates using the specified color.
 </summary>
 <param name="x">The x co-ordinate of the pixel.</param>
 <param name="y">The y co-ordinate of the pixel.</param>
 <param name="color">The color of the pixel to set.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.GetPixel(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the color of the pixel at the specified x and y co-ordinates.
 </summary>
 <param name="x">The x co-ordinate of the pixel.</param>
 <param name="y">The y co-ordinate of the pixel.</param>
 <returns>The color of the pixel.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.GetRandomColor">
 <summary>
 Gets a valid random color.
 </summary>
 <returns>A valid random color.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.GetColorFromRGB(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Constructs a color given the Red, Green and Blue values.
 </summary>
 <param name="red">The red component of the Color (0-255).</param>
 <param name="green">The green component of the color (0-255).</param>
 <param name="blue">The blue component of the color (0-255).</param>
 <returns>
 Returns a color that can be used to set the brush or pen color.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.Clear">
 <summary>
 Clears the window.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.ShowMessage(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Displays a message box to the user.
 Use MsgBox as a shorcut name to show the message box. Ex:
 MsgBox "Hello!"
 </summary>
 <param name="message">The text to be displayed on the message box.</param>
 <param name="title">The title for the message box.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.GraphicsWindow.AsForm">
 <summary>
 Show the graphics window and gets the form object that repreesents it.
 </summary>
 <returns>
 The graphics window name which is "graphicswindow".
 Note that sVB can deal with this name as a form object, so, you can use it to access the properties and methods of the form that repreesents the graphics window.
 </returns>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.ImageList">
 <summary>
 This class helps to load and store images in memory.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.ImageList.LoadImage(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Loads an image from a file or the Internet into memory.
 </summary>
 <param name="fileNameOrUrl">
 The file name to load the image from.  This could be a local file or a URL to the Internet location.
 </param>
 <returns>
 Returns the name of the image that was loaded.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.ImageList.GetWidthOfImage(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the width of the stored image.
 </summary>
 <param name="imageName">
 The name of the image in memory.
 </param>
 <returns>
 The width of the specified image.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.ImageList.GetHeightOfImage(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the height of the stored image.
 </summary>
 <param name="imageName">
 The name of the image in memory.
 </param>
 <returns>
 The height of the specified image.
 </returns>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Keywords">
 <summary>
 Keywords object is a place holder for providing documentation for Small Basic Keywords
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Keywords.For">
 <summary>
 The For statement allows you to execute a set of statements multiple times.
 </summary>
 <example>
 The following example will print out numbers from 1 to 10
 <code>
 For i = 1 To 10 
   TextWindow.WriteLine(i)
 Next
 </code>
 </example>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Keywords.EndFor">
 <summary>
 Check the For statement for information about the EndFor keyword.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Keywords.Next">
 <summary>
 Check the For statement for information about the Next keyword.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Keywords.To">
 <summary>
 Check the For statement for information about the To keyword.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Keywords.Step">
 <summary>
 The Step keyword is used to specify an increment in the For loop.
 </summary>
 <example>
 The following example will print out odd numbers from 1 to 10
 <code>
 For i = 1 to 10 Step 2
   TextWindow.WriteLine(i)
 Next
 </code>
 </example>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Keywords.If">
 <summary>
 The If statement allows you to make decisions to do different things.
 </summary>
 <example>
 The following example will print out either "Win" or "Lose" depending on the outcome of the flip.
 <code>
 If flip = "Tail" Then
   TextWindow.WriteLine("Win")
 Else
   TextWindow.WriteLine("Lose")
 EndIf
 </code>
 </example>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Keywords.Then">
 <summary>
 Check the If statement for information about the Then keyword.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Keywords.Else">
 <summary>
 Check the If statement for information about the Else keyword.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Keywords.ElseIf">
 <summary>
 The ElseIf keyword helps provide an alternate condition while making decisions using the If statement.
 </summary>
 <example>
 In the following example, we will print out the right greeting based on the time of the day.
 <code>
 If Clock.Hour &lt; 12 Then
   TextWindow.WriteLine("Good Morning")
 ElseIf Clock.Hour &lt; 16 Then
   TextWindow.WriteLine("Good Afternoon")
 ElseIf Clock.Hour &lt; 20 Then
   TextWindow.WriteLine("Good Evening")
 EndIf
 </code>
 </example>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Keywords.EndIf">
 <summary>
 Check the If statement for information about the EndIf keyword.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Keywords.Goto">
 <summary>
 The Goto statement allows branching to a new location in the program.  
 </summary>
 <example>
 The following program will print consecutive numbers endlessly.
 <code>
 start:
 TextWindow.WriteLine(i)
 i = i + 1
 Goto start
 </code>
 </example>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Keywords.Sub">
 <summary>
 The Sub (Subroutine) statement allows you to do groups of things with a single call.
 </summary>
 <example>
 The following example defines a subroutine that rings the bell and prints "Win".
 <code>
 Sub Win
   Sound.PlayBellRing()
   TextWindow.WriteLine("Win!")
 EndSub
 </code>
 </example>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Keywords.EndSub">
 <summary>
 Check the Sub statement for information about the EndSub keyword.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Keywords.While">
 <summary>
 The While statement allows you to repeat something until you achieve a desired result.
 </summary>
 <example>
 The following code will print a set of random numbers until one that is greater than 100 is encountered.
 <code>
 While i &lt; 100
   i = Math.GetRandomNumber(150)
   TextWindow.WriteLine(i)
 Wend
 </code>
 </example>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Keywords.EndWhile">
 <summary>
 Check the While statement for information about the EndWhile keyword.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Keywords.Wend">
 <summary>
 Check the While statement for information about the Wend keyword.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Keywords.And">
 <summary>
 Does a logical computation and returns true if both inputs are true.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Keywords.Or">
 <summary>
 Does a logical computation and returns true if either one of the inputs is true.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Math">
 <summary>
 The Math class provides lots of useful mathematics related methods
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Math.Pi">
 <summary>
 Gets the value of Pi, which equals 3.1415926535897931
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.Abs(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the absolute value of the given number.  For example, -32.233 will return 32.233.
 </summary>
 <param name="number">The number to get the absolute value for.</param>
 <returns>
 The absolute value of the given number.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.Ceiling(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Returns the smallest integer that is greater than or equal to the argument.  It rounds up the integer value.
 For example, 32.233 will return 33. Also, 44 will return 44.
 </summary>
 <param name="number">
 The number whose ceiling is required.
 </param>
 <returns>
 The ceiling value of the given number.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.Floor(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Returns the largest integer that is less than or equal to the argument.  It rounds down the integer value.
 For example, 32.233 will return 32. Also, 44 will return 44.
 </summary>
 <param name="number">
 The number whose floor value is required.
 </param>
 <returns>
 The floor value of the given number.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.NaturalLog(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the natural logarithm value of the given number.
 </summary>
 <param name="number">The number whose natural logarithm value is required.</param>
 <returns>
 The natural log value of the given number.
 </returns>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Math.E">
 <summary>
 Gets the natural logarithmic base, which equals 2.7182818284590451
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.Exp(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the number resulted from raisng the natural logarithmic base (E) to the given power
 </summary>
 <param name="exponent">The number to be used as the power of E.</param>
 <returns>E raised to the specified exponent.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.Log(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the logarithm (base 10) value of the given number.
 </summary>
 <param name="number">
 The number whose logarithm value is required
 </param>
 <returns>
 The log value of the given number
 </returns>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Math.UseRadianAngles">
 <summary>
 Indicates whither or not to consider angle values to be in radian when sent to Sin, Cos and Tan or returned from ArcSin, ArcCos, and ArcTan.
 The default value is True, but you can set if to False to use degress instead.
 Note that this property will also affect how the Evaluator works.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.Cos(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the cosine of the given angle in radians.
 </summary>
 <param name="angle">
 The angle whose cosine is needed (in radians).
 If you have the angle in degrees, use the GetRadians method to convert it to reeadians, or set the UseRadianAngles property fo False to force all trigonometric functions to work with angles in degrees.        ''' </param>
 <returns>
 The cosine of the given angle.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.Sin(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the sine of the given angle in radians.
 </summary>
 <param name="angle">
 The angle whose sine is needed (in radians)
 If you have the angle in degrees, use the GetRadians method to convert it to reeadians, or set the UseRadianAngles property fo False to force all trigonometric functions to work with angles in degrees.
 </param>
 <returns>
 The sine of the given angle
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.Tan(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the tangent of the given angle in radians.
 </summary>
 <param name="angle">
 The angle whose tangent is needed (in radians).
 If you have the angle in degrees, use the GetRadians method to convert it to reeadians, or set the UseRadianAngles property fo False to force all trigonometric functions to work with angles in degrees.        ''' </param>
 <returns>
 The tangent of the given angle.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.ArcSin(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the angle in radians, given the sine value.
 </summary>
 <param name="sinValue">
 The sine value whose angle is needed.
 </param>
 <returns>
 The angle (in radians) for the given sine Value.
 Use the GetDegrees method to convert the angle to degrees, or set the UseRadianAngles property fo False to force all trigonometric functions to work with angles in degrees.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.ArcCos(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the angle in radians, given the cosine value.
 </summary>
 <param name="cosValue">
 The cosine value whose angle is needed.
 </param>
 <returns>
 The angle (in radians) for the given cosine Value.
 Use the GetDegrees method to convert the angle to degrees, or set the UseRadianAngles property fo False to force all trigonometric functions to work with angles in degrees.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.ArcTan(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the angle in radians, given the tangent value.
 </summary>
 <param name="tanValue">
 The tangent value whose angle is needed.
 </param>
 <returns>
 The angle (in radians) for the given tangent Value.
 Use the GetDegrees method to convert the angle to degrees, or set the UseRadianAngles property fo False to force all trigonometric functions to work with angles in degrees.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.GetDegrees(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts a given angle in radians to degrees.
 </summary>
 <param name="angle">
 The angle in radians.
 </param>
 <returns>
 The converted angle in degrees.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.GetRadians(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts a given angle in degrees to radians.
 </summary>
 <param name="angle">
 The angle in degrees.
 </param>
 <returns>
 The converted angle in radians.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.SquareRoot(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the square root of a given number.
 </summary>
 <param name="number">
 The number whose square root value is needed.
 </param>
 <returns>
 The square root value of the given number.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.Power(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Raises the base number to the specified power.
 </summary>
 <param name="baseNumber">
 The number to be raised to the exponent power.
 </param>
 <param name="exponent">
 The power to raise the base number.
 </param>
 <returns>
 The base number raised to the specified exponent.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.Round(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Rounds a given number to the nearest integer.  For example 32.233 will be rounded to 32.0 while 
 32.566 will be rounded to 33.
 </summary>
 <param name="number">
 The number whose approximation is required.
 </param>
 <returns>
 The rounded value of the given number.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.Round2(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Rounds a given number to the given decimal places.
 </summary>
 <param name="number">The number whose approximation is required.</param>
 <param name="decimalPlaces">The number of decimal places to keep in the number.</param>
 <returns>
 The rounded value of the given number.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.Max(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Compares two numbers and returns the greater of the two.
 </summary>
 <param name="number1">
 The first of the two numbers to compare.
 </param>
 <param name="number2">
 The second of the two numbers to compare.
 </param>
 <returns>
 The greater value of the two numbers.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.Min(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Compares two numbers and returns the smaller of the two.
 </summary>
 <param name="number1">
 The first of the two numbers to compare.
 </param>
 <param name="number2">
 The second of the two numbers to compare.
 </param>
 <returns>
 The smaller value of the two numbers.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.Remainder(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Divides the first number by the second and returns the remainder.
 Note that you can directly use the Mod operator to get the same result.
 </summary>
 <param name="dividend">
 The number to divide. This can be positive, negative or zero.
 </param>
 <param name="divisor">
 The number that divides. It can be positive or negative, but it can't be zero, otherwise this methodd will caause an error.
 </param>
 <returns>
 The remainder after the division. It can be positive, negative or zero.
 An example of a negative remainder is Remaibder(-10, -3) which returns -1, because
 -10 = -3 * 3 - 1
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.GetRandomNumber(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets a random number between 1 and the specified maxNumber (inclusive).
 </summary>
 <param name="maxNumber">The maximum value for the requested random number.</param>
 <returns>
 A positive random number that is less than or equal to the specified max.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.Rnd(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets a random number between the given two numbers (inclusive).
 </summary>
 <param name="minNumber">The minimum value for the requested random number.</param>
 <param name="maxNumber">The maximum value for the requested random number.</param>
 <returns>
 A random number that is greater than or equal the specified min value, and less than or equal to the specified max value.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.DoubleToDecimal(System.Double)">
 <summary>
 Handles double to decimal conversion
 </summary>
 <param name="number">The input number</param>
 <returns>The output number</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.Hex(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts the given decimal number to its hexadecimal representaion.
 </summary>
 <param name="decimal">The decimal number whose hexadecimal value is required.</param>
 <returns>A string that represnts the hexadecimal value the number.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Math.Decimal(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts the given hexadecimal number to a decimal number. 
 You can use the Math.Hex method to convert a decimal number to a hexadecimal number.
 </summary>
 <param name="hex">The hexadecimal number whose decimal value is required. This argument can be omitted if you call this method as an extension method (with the name ToDeciaml) of a numeric or string variables, because hexa numbrs can be a pure digital numbers like 10 which is the hexa represntaion of 16 in the decimal system, or it can contain letters from A to F which makes it a string.</param>
 <returns>The decimal value the hexa number if it is valid, or an empty string otherwise.</returns>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Mouse">
 <summary>
 The mouse class provides accessors to get or set the mouse related properties, like the cursor position, pointer, etc.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Mouse.LastMouseWheelDirection">
 <summary>
 Get a value that indicates the last mouse wheel movement direction:
  * -1 means down.
  * 1 means up.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Mouse.MouseX">
 <summary>
 Gets or sets the mouse cursor's x co-ordinate.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Mouse.X">
 <summary>
 Gets or sets the mouse cursor's x co-ordinate.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Mouse.MouseY">
 <summary>
 Gets or sets the mouse cursor's y co-ordinate.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Mouse.Y">
 <summary>
 Gets or sets the mouse cursor's y co-ordinate.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Mouse.IsLeftButtonDown">
 <summary>
 Gets whether or not the left button is pressed.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Mouse.IsRightButtonDown">
 <summary>
 Gets whether or not the right button is pressed.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Mouse.HideCursor">
 <summary>
 Hides the mouse cursor on the screen.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Mouse.ShowCursor">
 <summary>
 Shows the mouse cursors on the screen.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Network">
 <summary>
 This helper class provides network access methods
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Network.DownloadFile(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Downloads a file from the network to a local temporary file.
 </summary>
 <param name="url">
 The URL of the file on the network.
 </param>
 <returns>
 A local file name that the remote file was downloaded as.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Network.GetWebPageContents(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the contents of a specified web page.
 </summary>
 <param name="url">
 The URL of the web page
 </param>
 <returns>
 The contents of the specified web page.
 </returns>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Platform">
 <summary>
 The Platform object provides a way to generically invoke other .Net libraries.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Primitive">
 <summary>
 The primitive type representing either text or number.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Program">
 <summary>
 The Program class provides helpers to control the program execution.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Program.ArgumentCount">
 <summary>
 Gets the number of command-line arguments passed to this program.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Program.Directory">
 <summary>
 Gets the executing program's directory.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Program.Delay(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Delays program execution by the specified amount of milliseconds.
 If this method caused any troubles, please use the WinDelay method
 </summary>
 <param name="milliSeconds">The amount of delay.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Program.WinDelay(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Delays program execution by the specified amount of milliseconds.
 If this method caused any troubles, please use the Delay method
 </summary>
 <param name="milliSeconds">The amount of delay.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Program.End">
 <summary>
 Ends the program.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Program.GetArgument(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Returns the specified argument passed to this program.
 </summary>
 <param name="index">Index of the argument.</param>
 <returns>
 The command-line argument at the specified index.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Program.GetSetting(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets a value from the regestry.
 </summary>
 <param name="section">The regetry section name that you used when saving the setting.</param>
 <param name="name">The regestry key that you used when saving the setting.</param>
 <param name="defaultValue">The value to return if the data is not found in the regestry.</param>
 <returns>A string that contains the required setting.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Program.SaveSetting(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Saves a value in the regestry.
 </summary>
 <param name="section">The regetry section name, which refers to the category that the data lies under. For example, you may use "Form1" as a section name when you save property values of this form.</param>
 <param name="name">The regestry key where the data is saved in. Shows a key name that refers to the meaning of the date, like "Width" and "Height" if you are saving the width and the height of the form.</param>
 <param name="value">The value to save in the regestry.</param>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Shapes">
 <summary>
 The Shape object allows you to add, move and rotate shapes on the Graphics window.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.AddRectangle(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a rectangle shape with the specified width and height.
 </summary>
 <param name="width">The width of the rectangle shape.</param>
 <param name="height">The height of the rectangle shape.</param>
 <returns>
 The Rectangle shape that was just added to the Graphics Window.
 You can use this returned shape as an object of type Shape, and access its methods and properties directly like: s.Move(100, 100)
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.AddGeometricPath">
 <summary>
 Adds the geometic path, last created using the GeometricPath type, to shapes.
 This will draw the path on the graphics window using its pen and brush.
 </summary>
 <returns>
 The geometic path that was just added to the Graphics Window
You can use this returned shape as an object of type Shape, and access its methods and properties directly like: s.Move(100, 100)
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.AddEllipse(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds an ellipse shape with the specified width and height.
 </summary>
 <param name="width">
 The width of the ellipse shape.
 </param>
 <param name="height">
 The height of the ellipse shape.
 </param>
 <returns>
 The Ellipse shape that was just added to the Graphics Window.
 You can use this returned shape as an object of type Shape, and access its methods and properties directly like: s.Move(100, 100)
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.AddTriangle(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a triangle shape represented by the specified points.
 </summary>
 <param name="x1">
 The x co-ordinate of the first point.
 </param>
 <param name="y1">
 The y co-ordinate of the first point.
 </param>
 <param name="x2">
 The x co-ordinate of the second point.
 </param>
 <param name="y2">
 The y co-ordinate of the second point.
 </param>
 <param name="x3">
 The x co-ordinate of the third point.
 </param>
 <param name="y3">
 The y co-ordinate of the third point.
 </param>
 <returns>
 The Triangle shape that was just added to the Graphics Window.
 You can use this returned shape as an object of type Shape, and access its methods and properties directly like: s.Move(100, 100)        
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.AddPolygon(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a polygon shape represented by the given points array.       
 </summary>
 <param name="pointsArr">An array of points representing the heads of the polygn. Each item in this array is an array containing the x and y of the point.</param>
 <returns>
 The polygon shape that was just added to the Graphics Window.
 You can use this returned shape as an object of type Shape, and access its methods and properties directly like: s.Move(100, 100)
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.AddLine(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a line between the specified points.
 </summary>
 <param name="x1">
 The x co-ordinate of the first point.
 </param>
 <param name="y1">
 The y co-ordinate of the first point.
 </param>
 <param name="x2">
 The x co-ordinate of the second point.
 </param>
 <param name="y2">
 The y co-ordinate of the second point.
 </param>
 <returns>
 The line that was just added to the Graphics Window.
 You can use this returned shape as an object of type Shape, and access its methods and properties directly like: s.Move(100, 100)
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.AddImage(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds an image as a shape that can be moved, animated or rotated.
 </summary>
 <param name="imageName">
 The name of the image to draw.
 </param>
 <returns>
 The image that was just added to the Graphics Window.
 You can use this returned shape as an object of type Shape, and access its methods and properties directly like: s.Move(100, 100)
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.AddText(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds some text as a shape that can be moved, animated or rotated.
 </summary>
 <param name="text">
 The text to add.
 </param>
 <returns>
 The text shape that was just added to the Graphics Window.
 You can use this returned shape as an object of type Shape, and access its methods and properties directly like: s.Move(100, 100)
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.GetText(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the text of a text shape added by the AddText method. 
 </summary>
 <param name="shapeName">The name of the text shape.</param>
 <returns>The shape text if it is a text shape, or "" otherwise.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.SetText(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Sets the text of a text shape added by the AddText method. 
 </summary>
 <param name="shapeName">The name of the text shape.</param>
 <param name="text">The new text value to set.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.Remove(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Removes a shape from the Graphics Window.
 </summary>
 <param name="shapeName">The name of the shape that needs to be removed.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.Move(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Moves the shape with the specified name to a new position.
 </summary>
 <param name="shapeName">The name of the shape to move.</param>
 <param name="x">
 The x co-ordinate of the new position.
 </param>
 <param name="y">
 The y co-ordinate of the new position.
 </param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.Rotate(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Rotates the shape with the specified name to the specified angle.
 </summary>
 <param name="shapeName">The name of the shape to rotate.</param>
 <param name="angle">The angle to rotate the shape.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.Zoom(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Scales the shape using the specified zoom levels.  Minimum is 0.1 and maximum is 20.
 </summary>
 <param name="shapeName">The name of the shape to zoom.</param>
 <param name="scaleX">The x-axis zoom level.</param>
 <param name="scaleY">The y-axis zoom level.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.Animate(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Animates a shape with the specified name to a new position.
 </summary>
 <param name="shapeName">The name of the shape to move.</param>
 <param name="x">The x co-ordinate of the new position.</param>
 <param name="y">The y co-ordinate of the new position.</param>
 <param name="duration">The time for the animation, in milliseconds.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.GetLeft(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the left co-ordinate of the specified shape.
 </summary>
 <param name="shapeName">The name of the shape.</param>
 <returns>
 The left co-ordinate of the shape.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.SetLeft(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Changes the left position of the specified shape
 </summary>
 <param name="shapeName">The name of the shape.</param>
 <param name="x">the new position of the shape left</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.GetTop(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the top co-ordinate of the specified shape.
 </summary>
 <param name="shapeName">The name of the shape.</param>
 <returns>
 The top co-ordinate of the shape.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.SetTop(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Changes the top position of the specified shape
 </summary>
 <param name="shapeName">The name of the shape.</param>
 <param name="y">The new position of the shape top</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.GetOpacity(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the opacity of a shape.
 </summary>
 <param name="shapeName">The name of the shape.</param>
 <returns>
 The opacity of the object as a value between 0 and 100.  0 is completely transparent and 100 is completely opaque.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.SetOpacity(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Sets how opaque a shape should render.
 </summary>
 <param name="shapeName">The name of the shape.</param>
 <param name="level">The opacity level ranging from 0 to 100.  0 is completely transparent and 100 is completely opaque.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.HideShape(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Hides an already added shape.
 </summary>
 <param name="shapeName">The name of the shape.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Shapes.ShowShape(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Shows a previously hidden shape.
 </summary>
 <param name="shapeName">The name of the shape.</param>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.SmallVisualBasicCallback">
 <summary>
 Signature callback that will be used by all Small Visual Basic library events
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Sound">
 <summary>
 The Sound object provides operations that allow the playback of sounds.  Some sample sounds are provided along with the library.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Sound.PlayDing">
 <summary>
 Plays the ding sound.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Sound.PlayBeep">
 <summary>
 Plays the beep beep sound.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Sound.PlayBeepAndWait">
 <summary>
 Plays the beep beep sound and waits for it to finish.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Sound.PlayClick">
 <summary>
 Plays the Click Sound.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Sound.PlayClickAndWait">
 <summary>
 Plays the Click Sound and waits for it to finish.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Sound.PlayChime">
 <summary>
 Plays the Chime Sound.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Sound.PlayChimeAndWait">
 <summary>
 Plays the Chime Sound and waits for it to finish.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Sound.PlayChimes">
 <summary>
 Plays the Chimes Sound.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Sound.PlayChimesAndWait">
 <summary>
 Plays the Chimes Sound and waits for it to finish.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Sound.PlayBellRing">
 <summary>
 Plays the Bell Ring Sound.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Sound.PlayBellRingAndWait">
 <summary>
 Plays the Bell Ring Sound and waits for it to finish.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Sound.PlayMusic(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Plays musical notes.
 </summary>
 <param name="notes">
 A set of musical notes to play.  The format is a subset of the Music Macro Language supported by QBasic.
 </param>
 <example>
 <code>
 Sound.PlayMusic("O5 C8 C8 G8 G8 A8 A8 G4 F8 F8 E8 E8 D8 D8 C4")
 </code>
 </example>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Sound.Load(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Loads an audio file, so you can call the Play method to play it later without suffering from any initial delay.
 </summary>
 <param name="filePath">
 The path for the audio file.  This could either be a local file (e.g.: c:\music\track1.mp3) or a file on the network (e.g.: http://contoso.com/track01.wma).
 You can load mp3, wav and wma files. Other file formats may or may not be valid depending on the audio codecs installed on the user's computer.
 </param>
 <returns>If the audio file is loaded correctly, this method will return the file path, so you can send it to the Play, Pause and Stop methods, otherwise this method will return an empty string.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Sound.Play(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Plays the given audio file. 
 If the file is currently played or paused, this operation will replay it from the start. Use the Resume method to continue playing the paused file.
 </summary>
 <param name="filePath">
 The path for the audio file. This could either be a local file (e.g.: c:\music\track1.mp3) or a file on the network (e.g.: http://contoso.com/track01.wma).
 ''' The file type could be an mp3 or wav or wma file. Other file formats may or may not play depending on the audio codecs installed on the user's computer.
 </param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Sound.Resume(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Resumes playing the given audio from the position it was paused at.
 If the file hasn't not played yet, this operation will play it from start.
 </summary>
 <param name="filePath">
 The path for the audio file. This could either be a local file (e.g.: c:\music\track1.mp3) or a file on the network (e.g.: http://contoso.com/track01.wma).
 The file type could be an mp3 or wav or wma file. Other file formats may or may not play depending on the audio codecs installed on the user's computer.
 </param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Sound.PlayAndWait(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 <para>
 Plays an audio file and waits until it is finished playing.  This could be an mp3 or wav or wma file. Other file formats may or may not play depending on the audio codecs installed on the user's computer.
 </para>
 <para>
 If the file was already paused, this operation will resume from the position where the playback was paused.
 </para>
 </summary>
 <param name="filePath">
 The path for the audio file.  This could either be a local file (e.g.: c:\music\track1.mp3) or a file on the network (e.g.: http://contoso.com/track01.wma).
 </param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Sound.Pause(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Pauses playback of an audio file.  If the file was not already playing, this operation will not do anything.
 </summary>
 <param name="filePath">
 The path for the audio file.  This could either be a local file (e.g.: c:\music\track1.mp3) or a file on the network (e.g.: http://contoso.com/track01.wma).
 </param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Sound.Stop(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Stops playback of an audio file.  If the file was not already playing, this operation will not do anything.
 </summary>
 <param name="filePath">
 The path for the audio file.  This could either be a local file (e.g.: c:\music\track1.mp3) or a file on the network (e.g.: http://contoso.com/track01.wma).
 </param>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Stack">
 <summary>
 This object provides a way of storing values just like stacking up a plate.  You can push a value to the top of the stack and pop it off. You can only pop the values one by one off the stack and the last pushed value will be the first one to pop out.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Stack.PushValue(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Pushes a value to the specified stack.
 </summary>
 <param name="stackName">The name of the stack.</param>
 <param name="value">The value to push.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Stack.GetCount(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the count of items in the specified stack.
 </summary>
 <param name="stackName">The name of the stack.</param>
 <returns>
 The number of items in the specified stack.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Stack.Clear(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Removees all items from the specified stack.
 </summary>
 <param name="stackName">The name of the stack.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Stack.PopValue(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Pops the value from the specified stack.
 </summary>
 <param name="stackName">The name of the stack.</param>
 <returns>
 The value from the stack.
 </returns>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Text">
 <summary>
 The Text object provides helpful operations for working with Text.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.Format(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Formats the given text by substituting the placeholders by the given values.
 </summary>
 <param name="text">The string to Format. Use [1], [2],... [n] in the string, to refer the values[1], values[2], ... values[n]</param>
 <param name="values">An array its elements will be used to replace [1], [2],... [n] strings if found in the text</param>
 <returns>The formated string after substituting [1], [2],... [n] with elements from the values array</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.IsNumeric(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Checks if the string contains a numeric value
 </summary>
 <param name="text">the string to check its value</param>
 <returns>True if text is a number, False otherwise</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.Append(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Appends two text inputs and returns the result as another text.  This operation is particularly useful when dealing with unknown text in variables which could accidentally be treated as numbers and get added, instead of getting appended.
 </summary>
 <param name="text1">First part of the text to be appended.</param>
 <param name="text2">Second part of the text to be appended. You can also send an array to append all its items.</param>
 <returns>
 The appended text containing both the specified parts.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.GetLength(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the length of the given text.
 </summary>
 <param name="text">
 The text whose length is needed.
 </param>
 <returns>
 The length of the given text.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.IsSubText(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets whether or not a given subText is a subset of the larger text.
 </summary>
 <param name="text">
 The larger text within which the sub-text will be searched.
 </param>
 <param name="subText">
 The sub-text to search for.
 </param>
 <returns>
 True if the subtext was found within the given text.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.EndsWith(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets whether or not a given text ends with the specified subText.
 </summary>
 <param name="text">
 The larger text to search within.
 </param>
 <param name="subText">
 The sub-text to search for.
 </param>
 <returns>
 True if the subtext was found at the end of the given text.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.StartsWith(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets whether or not a given text starts with the specified subText.
 </summary>
 <param name="text">
 The larger text to search within.
 </param>
 <param name="subText">
 The sub-text to search for.
 </param>
 <returns>
 True if the subtext was found at the start of the given text.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.Contains(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets whether or not a given text contains the specified subText.
 </summary>
 <param name="text">
 The larger text to search within.
 </param>
 <param name="subText">
 The sub-text to search for.
 </param>
 <returns>
 True if the subtext was found at any posision in the given text, or False otherwise.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.GetSubText(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets a sub-text from the given text.
 </summary>
 <param name="text">
 The text to derive the sub-text from.
 </param>
 <param name="start">
 Specifies where to start from.
 </param>
 <param name="length">
 Specifies the length of the sub text.
 </param>
 <returns>
 The requested sub-text
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.GetSubTextToEnd(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets a sub-text from the given text from a specified position to the end.
 </summary>
 <param name="text">The text to derive the sub-text from.</param>
 <param name="start">Specifies where to start from.</param>
 <returns>
 The requested sub-text.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.GetIndexOf(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Finds the position where a sub-text appears in the specified text.
 </summary>
 <param name="text">the text to search in.</param>
 <param name="subText">the text to search for.</param>
 <param name="start">the text position to start seacting from</param>
 <param name="isBackward">True if you want to search from start back to the the first position in the text (1), or False if you want to go forward to the end of the text.</param>
 <returns>
 The position at which the sub-text appears in the specified text.  If the text doesn't appear, it returns 0.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.IndexOf(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Finds the position where a sub-text appears in the specified text.
 </summary>
 <param name="text">the text to search in.</param>
 <param name="subText">the text to search for.</param>
 <param name="start">the text position to start seacting from</param>
 <param name="isBackward">True if you want to search from start back to the the first position in the text (1), or False if you want to go forward to the end of the text.</param>
 <returns>
 The position at which the sub-text appears in the specified text.  If the text doesn't appear, it returns 0.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.ConvertToLowerCase(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts the given text to lower case.
 </summary>
 <param name="text">
 The text to convert to lower case.
 </param>
 <returns>
 The lower case version of the given text.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.ConvertToUpperCase(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts the given text to upper case.
 </summary>
 <param name="text">
 The text to convert to upper case.
 </param>
 <returns>
 The upper case version of the given text.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.GetCharacter(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Given the Unicode character code, gets the corresponding character, which can then be used with regular text.
 </summary>
 <param name="characterCode">
 The character code (Unicode based) for the required character.
 </param>
 <returns>
 A Unicode character that corresponds to the code specified.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.GetCharacterCode(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Given a Unicode character, gets the corresponding character code.
 </summary>
 <param name="character">
 The character whose code is requested.
 </param>
 <returns>
 A Unicode based code that corresponds to the character specified.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.GetCharacterAt(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 returns the char existing in the given posision in the text
 </summary>
 <param name="text">The input text</param>
 <param name="pos">The posision of the char</param>
 <returns>The char exusted in the given position</returns>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Text.NewLine">
 <summary>
 Returns the new line characters so you can add them to the text to continue writing in a new line
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.SetCharacterAt(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Changes the character existing at the given posision to the givin new text.
 </summary>
 <param name="text">the input text</param>
 <param name="pos">The posision of the character</param>
 <param name="newText">The new text to set at the given position. Send an empty string "" to remove the current character form the text, or send one or more characters to replace it.</param>
 <returns>a new text with the character in the given position changed to the given newText. The input text will not be changed</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.ToNumber(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts the input text to a number
 </summary>
 <param name="text">the input text</param>
 <returns>If text is numeric, returns the numeric value.
 If text contains only one character, returns the ascii code of this character
 Otherwise, returns 0.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.ToLower(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts all characters of the input text to lower case.
 </summary>
 <param name="text">the input text</param>
 <returns>a lower-case text</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.ToUpper(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts all characters of the input text to upper case.
 </summary>
 <param name="text">the input text</param>
 <returns>an upper-case text</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.Trim(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
Removes all leading and trailing white-space characters from the given text
Wite-space chars iclude spaces, tabs, and line symbols.
 </summary>
 <param name="text">the input text</param>
 <returns>the trimmed string</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.ToStr(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
Converts the given value or array to a string.
 </summary>
 <param name="value">the input value</param>
 <returns>The string representaion of the value. For example, the array string can be of the form {1, 2, 3}</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.IsEmpty(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
Returns true if the given text is empty, or returns false otherwise.
 </summary>
 <param name="text">the input text</param>
 <returns>True or False</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.Split(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Splits the given text at the given separator.
 </summary>
 <param name="text">The input text</param>
 <param name="separator">One character or more to split the text at. The separator will not appear in the result. You can also send an array to use its items as separators.</param>
 <param name="trim">Use True to trim white spaces from the start and end of the separated strings</param>
 <param name="removeEmpty">Use True to remove empty strings from the result</param>
 <returns>An array containing the splitted items</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.PadLeft(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds spaces on the left of the given text so that its length equals the given total width. This is useful when you want to right-align texts.
 Note that if the length of the input text is greater than or egual to the given length, it will be displayed as it is and will not be trimmed.
 </summary>
 <param name="text">the input text</param>
 <param name="totalWidth">The desired total length of the text.</param>
 <returns>a new text that has the given total length (at least).</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.PadRight(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds spaces on the right of the given text so that its length equals the given total width. This is useful when you want to left-align texts.
 Note that if the length of the input text is greater than or egual to the given length, it will be displayed as it is and will not be trimmed.
 </summary>
 <param name="text">the input text</param>
 <param name="totalWidth">The desired total length of the text.</param>
 <returns>a new text that has the given total length (at least).</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Text.ToDuration(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts the input text to a duration if it has a valid format.
 </summary>
 <param name="text">the input text</param>
 <returns>If text is a valid duration, returns the the duration value.
 Otherwise, returns a 0 duration.
 </returns>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.TextWindow">
 <summary>
 Provides text-related input and output functionalities.  For example using this class, it is possible to write or read some text or number to and from the text-based text window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.TextWindow.ForegroundColor">
 <summary>
 Gets or sets the foreground color of the text to be output in the text window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.TextWindow.BackgroundColor">
 <summary>
 Gets or sets the background color of the text to be output in the text window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.TextWindow.CursorLeft">
 <summary>
 Gets or sets the cursor's column position on the text window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.TextWindow.CursorTop">
 <summary>
 Gets or sets the cursor's row position on the text window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.TextWindow.Left">
 <summary>
 Gets or sets the Left position of the Text Window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.TextWindow.Title">
 <summary>
 Gets or sets the Title for the text window.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.TextWindow.Top">
 <summary>
 Gets or sets the Top position of the Text Window.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.TextWindow.Show">
 <summary>
 Shows the Text window to enable interactions with it.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.TextWindow.Hide">
 <summary>
 Hides the text window.  Content is perserved when the window is shown again.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.TextWindow.Clear">
 <summary>
 Clears the TextWindow.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.TextWindow.Pause">
 <summary>
 Waits for user input before returning.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.TextWindow.PauseIfVisible">
 <summary>
 Waits for user input only when the TextWindow is already open.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.TextWindow.PauseThenClose">
 <summary>
 Waits for user to press any key to close the window, otherwise it closes it directly.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.TextWindow.PauseWithoutMessage">
 <summary>
 Waits for user input before returning.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.TextWindow.Read">
 <summary>
 Reads a line of text from the text window.  This function will not return until the user hits ENTER.
 Use ? as a shortcut name for this method.
 </summary>
 <returns>The text that was read from the text window</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.TextWindow.ReadKey">
 <summary>
 Reads a single character from the text window.  
 </summary>
 <returns>
 The character that was read from the text window.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.TextWindow.ReadNumber">
 <summary>
 Reads a number from the text window.  This function will not return until the user hits ENTER.
 Use #? as a shortcut name for this method.
 </summary>
 <returns>The number that was read from the text window</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.TextWindow.WriteLine(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Writes text or number to the text window.  A new line character will be appended to the output, so that the next time something is written to the text window, it will go in a new line.
 Use ? as a shortcut name for this method.
 </summary>
 <param name="data">The text or number to write to the text window.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.TextWindow.WriteLines(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Writes the items of the given array to the TextWindow, and appends a new line after each of them.
 Use ? as a shortcut name for this method, followed by an array initializer or a direct comman separated values
 </summary>
 <param name="lines">An array of text lines</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.TextWindow.Write(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Writes text or number to the text window.  Unlike WriteLine, this will not append a new line character, which means, anything written to the text window after this call will be on the same line.
 Use ?: as a shortcut name for this method.
 </summary>
 <param name="data">The text or number to write to the text window</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.TextWindow.WriteFormatted(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Formats the given text by substituting the placeholders by the given values, and writes the resulted text to the current line of the Text Window.
 </summary>
 <param name="text">The string to format. Use [1], [2],... [n] in the string, to refer values[1], values[2], ... values[n] in the values array</param>
 <param name="values">An array. Its elements will be used to replace [1], [2],... [n] placeholders if found in the text</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.TextWindow.VerifyAccess">
 <summary>
 Verifies if the access to text Window has been made yet
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Timer">
 <summary>
 The Timer object provides an easy way for doing something repeatedly with a constant interval between.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Timer.Interval">
 <summary>
 Gets or sets the interval (in milliseconds) specifying how often the timer should raise the Tick event.  
 This value can range from 10 to 100000000.
 Note that setting the interval resumes the timer.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.Library.Timer.Tick">
 <summary>
 Raises an event when the timer ticks.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Timer.RemoveTickHandler">
 <summary>
 Removes the Tick hamdler of the timer.
 Ulternatively, you can set the Tick event to Nothing to remove its handler:
 Timer.Tick = Nothing
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Timer.IsRunnning">
 <summary>
 Returns True is the timer is currently working (has an event handler and not paused), or False otherwise.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Timer.Pause">
 <summary>
 Pauses the timer.  Tick events will not be raised.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Timer.Resume">
 <summary>
 Resumes the timer from a paused state.  Tick events will now be raised.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.Library.Turtle">
 <summary>
 The Turtle provides Logo-like functionality to draw shapes by manipulating the properties of a pen and drawing primitives.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Turtle.Width">
 <summary>
 Gets or sets the turtle width. The default value is 16, and the minimum value is 4.
 Note that changeing the turtle width will also set its height to the same value.
 </summary>     
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Turtle.Height">
 <summary>
 Gets or sets the turtle height. The default value is 16, and the minimum value is 4.
 Note that changeing the turtle height will also set its width to the same value.
 </summary>     
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Turtle.Speed">
 <summary>
 Specifies how fast the turtle should move. 
 Valid values are 1 to 50. The default value is 5.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Turtle.UseAnimation">
 <summary>
 Indicates whether or not the turtle moves and turns are animated.
 The default value is True, which is OK in most cases, and you can increase the Turtle.Speed up to 50 to make it faster.
 But you may need to set this property fo false while you are drawing curves, which require many turns and succissive short movements, which make the turtle too slow because of the animations overhead. 
 Setting this property to False, will make the Move, MoveTo and Turn methods call the DirectMove, DirectMoveTo and DirectTurn Methods to avoid using animation, which will make the turtle super fast.
 You can also call the three `Direct` methods manually even when this property is set to True, which allows you to mix animated and non-animated moves.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Turtle.Angle">
 <summary>
 Gets or sets the current angle of the turtle.  While setting, this will turn the turtle instantly to the new angle.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Turtle.X">
 <summary>
 Gets or sets the X location of the Turtle.  While setting, this will move the turtle instantly to the new location.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.Library.Turtle.Y">
 <summary>
 Gets or sets the Y location of the Turtle.  While setting, this will move the turtle instantly to the new location.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Turtle.Show">
 <summary>
 Shows the Turtle to enable interactions with it.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Turtle.Hide">
 <summary>
 Hides the Turtle and disables interactions with it.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Turtle.PenDown">
 <summary>
 Sets the pen down to enable the turtle to draw as it moves.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Turtle.PenUp">
 <summary>
 Lifts the pen up to stop drawing as the turtle moves.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Turtle.CreateFigure">
 <summary>
 Uses the next turtle movements to create a closed figure, so that you can fill it by calling the FillFigure method.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Turtle.FillFigure">
 <summary>
 Closes the figure the Turtle created after calling the CreateFigure method, and filsl it with the GraphicsWindow.BrushColor.
 After calling this method, the figure Is completed, And you need To create a New figure If you want To fill a New area.
 If there Is no figure, calling this method will Do Nothing.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Turtle.Move(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Moves the turtle to a specified distance. If the pen is down, it will draw a line as it moves.
 </summary>
 <param name="distance">
 The distance to move the turtle.
 </param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Turtle.DirectMove(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Moves the turtle to a specified distance directly without animation. If the pen is down, it will draw a line as it moves.
 </summary>
 <param name="distance">
 The distance to move the turtle.
 </param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Turtle.MoveTo(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Turns and moves the turtle to the specified location.  If the pen is down, it will draw a line as it moves.
 </summary>
 <param name="newX">
 The x co-ordinate of the destination point.
 </param>
 <param name="newY">
 The y co-ordinate of the destination point.
 </param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Turtle.DirectMoveTo(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Turns and moves the turtle to the specified location directly without any animation.  If the pen is down, it will draw a line as it moves.
 </summary>
 <param name="newX">
 The x co-ordinate of the destination point.
 </param>
 <param name="newY">
 The y co-ordinate of the destination point.
 </param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Turtle.Turn(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Turns the turtle by the specified angle.
 </summary>
 <param name="angle">
 The angle in degrees to turn the turtle. It can be either positive or negative:
 If the angle is positive, the turtle turns to its right.
 If it is negative, the turtle turns to its left.
 </param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Turtle.DirectTurn(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Turns the turtle by the specified angle directly without any animation.        
 </summary>
 <param name="angle">
 The angle in degrees to turn the turtle. It can be either positive or negative:
 If the angle is positive, the turtle turns to its right.
 If it is negative, the turtle turns to its left.
 </param>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Turtle.TurnRight">
 <summary>
 Turns the turtle 90 degrees to the right.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.Library.Turtle.TurnLeft">
 <summary>
 Turns the turtle 90 degrees to the left.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ArrayEx.AddItem(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds an item to the array.
 </summary>
 <param name="value">the item you want to add after the last item in the array.</param>
 <returns>a new array with the new item added. The input array will not be changed</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ArrayEx.AddItems(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds many items to the array.
 </summary>
 <param name="items">an array containing the items to add eact of them as a single item at the end of the array.</param>
 <returns>a new array with the new items added. The input array will not be changed</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ArrayEx.AddKeyValue(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds an item to the array, with the given key and value
 </summary>
 <param name="key">the key of the item. If there is already an item with this key, it's value will be modified</param>
 <param name="value">the value of the item</param>
 <returns>a new array with the item added. the input array will not be changed</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ArrayEx.ContainsIndex(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets whether or not the array contains the specified index.  This is very useful when deciding if the array's index was initialized by some value or not.
 </summary>
 <param name="index"> The index to check.</param>
 <returns>
 "True" or "False" depending on if the index was present in the specified array.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ArrayEx.ContainsValue(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets whether or not the array contains the specified value.  This is very useful when deciding if the array's value was stored in some index.
 </summary>
 <param name="value">The value to check.</param>
 <returns>
 "True" or "False" depending on if the value was present in the specified array.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ArrayEx.GetIndices(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets all the indices for the array, as another array.
 </summary>
 <returns>
 An array filled with all the indices of the specified array.  The index of the returned array starts from 1.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ArrayEx.GetCount(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the number of items stored in the array.
 </summary>
 <returns>
 The number of items in the specified array.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ArrayEx.RemoveItem(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Removes the array item at the specified index (key).
 </summary>
 <param name="index">The key of the item to remove.</param>
 <returns>a new array with the item removed. The original array will not change</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ArrayEx.IndexOf(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Searches the array for the given value, and returns its index position in the array.
 </summary>
 <param name="value">the item to search for</param>
 <param name="start">an integer representing the array index to start searching at</param>
 <param name="ignoreCase">set it to true if you want to do an case-insensitive search</param>
 <returns>the position (order) of the item in the array if found, otherwise 0. </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ArrayEx.GetItemAt(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets value of the array item that exists at the given numeric position.
 </summary>
 <param name="position">A number that represents the position of the item in the array, which not always be the same as its index (key). Note that position must be > 0.</param>
 <returns>the item value if found, otherwise empty string "".</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ArrayEx.SetItemAt(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Sets the value of the array item that exists at the given numeric position. The current array will be changed directly, so this method is faster then the array indexer [] when dealing with a large array, but be careful because it will affect the reference array that the current array is copied from!
 </summary>
 <param name="position">A number that represents the position of the item in the array, which is not always the same as its index (key). Note that position must be > 0.</param>
 <param name="value">The item value.</param>
 <returns>the item key if found at the given position, otherwise an empty string "".</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ArrayEx.GetKeyAt(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the key of the array item that exists at the given numeric position.
 </summary>
 <param name="position">A number that represents the position of the item in the array, which not always be the same as its index (key). Note that position must be > 0.</param>
 <returns>the item key if found, otherwise empty string "".</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ArrayEx.Find(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Searches the current array for the given value.
 </summary>
 <param name="value">the item to search for</param>
 <param name="start">an integer representing the array index to start searching at</param>
 <param name="ignoreCase">set it to true if you want to do an case-insensetive search</param>
 <returns>the index or string key of the item if found, otherwise empty string</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ArrayEx.Join(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Joins the given array items into one text.
 </summary>
 <param name="separator">a string to use as a separator between array items</param>
 <returns>a string containing the array items, separated by the given separator</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ArrayEx.ToStr(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
Converts the current array to a string.
 </summary>
 <returns>The string representation of the array. If the array is simple, its string can be of the form {1, 2, 3}. If the array contains keys, its string can be of the form {[1]=1, [2]=2, [Name]=Adam}.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ArrayEx.AddNextItem(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds an item to the array. The current array will be changed directly, so this method is faster when you want to build a large array, but be careful because it will affect the reference array that the current array is copied from!
 sVB calls this method when you use the array intializer {}, so it is faster than adding individual items using the array indixer [].
 </summary>
 <param name="value">The item you want to add after the last item in the array.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ArrayEx.Append(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds an item at the end of the array. The current array will be changed directly, so this method is faster when you want to build a large array, but be careful because it will affect the reference array that the current array is copied from!
 sVB calls this method when you use the array intializer {}, so it is faster than adding individual items using the array indixer [].
 </summary>
 <param name="value">The item you want to add after the last item in the array.</param>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.Button">
 <summary>
 Represents the Button control, that the user can click to perform the task that you provide in the OnClick event handler.
 You can use the form designer to add a button to the form by dragging it from the toolbox.
 It is also possible to use the Form.AddButton method to create a new button and add it to the form at runtime.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Button.GetText(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the test that is displayed on the button
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Button.GetUnderlined(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets whether or not to draw a line under the text.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Button.GetWordWrap(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets whether or not to the text will be continue on the next line if it exceeds the width of the control.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Button.GetIsFlat(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets whether or not to show the button with a flat style.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.Chars">
 <summary>
 Contains some useful non-printed characters, such as the Escape and new line characters. 
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Chars.Cr">
 <summary>
 Represents a carriage return character, which is the end of line.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Chars.Lf">
 <summary>
 Represents a line feed character, which is the start of a new line. In some cases, this character a lone can be used to represent the new line.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Chars.CrLf">
 <summary>
 Represents a carriage return and a line feed character. Together, they indicate the presence of a new line.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Chars.Back">
 <summary>
     Represents a backspace character.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Chars.FormFeed">
 <summary>
     Represents a form feed character for print functions.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Chars.Tab">
 <summary>
     Represents a tab character.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Chars.VerticalTab">
 <summary>
     Represents a vertical tab character.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Chars.Null">
 <summary>
     Represents a null character.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Chars.Quote">
 <summary>
     Represents a double-quote character.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Chars.GetCharacter(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Given the Unicode character code, gets the corresponding character, which can then be used with regular text.
 </summary>
 <param name="characterCode">
 The character code (Unicode based) for the required character.
 </param>
 <returns>
 A Unicode character that corresponds to the code specified.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Chars.GetCharacterCode(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Given a Unicode character, gets the corresponding character code.
 </summary>
 <param name="character">The character whose code is requested.</param>
 <returns>
 A Unicode based code that corresponds to the character specified.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Chars.IsLetter(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Checks if the given character is a letter in any language.
 </summary>
 <param name="character">the character to check.</param>
 <returns>True or False.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Chars.IsDigit(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Checks if the given character is a digit (0-9).
 </summary>
 <param name="character">the character to check.</param>
 <returns>True or False.</returns>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.CheckBox">
 <summary>
 Represents a CheckBox control, that the user can check or uncheck. 
 Use the Checked property and OnCheck event to respond to the user choices.
 You can use the form designer to add a check box to the form by dragging it from the toolbox.
 It is also possible to use the Form.AddCheckBox method to create a new check box and add it to the form at runtime.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.CheckBox.GetText(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the text that is displayed by the CheckBox
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.CheckBox.GetChecked(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 When True, the check box is checked.
 When False, the check box is unchecked.
 When empty string "",  the check box is not checked nor unchecked (indeterminate state)
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.CheckBox.GetAllowThreeState(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Controls what happens when the user clicks the checkbox to cange its state:
 * When False(the defaust value): the checkbox state goes from checked to unchecked then back to checked and so on.
 * When True, the the checkbox state goes from checked to dimmed (indeterminate) to unchecked then back to checked and so on.
 Note that you can set the dimmed (indeterminate) state from code by setting the Checked property to an empty string "". This will always work regardless the value of AllowTriState, which has effect on the user interaction only.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.CheckBox.GetUnderlined(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets whether or not to draw a line under the text.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.CheckBox.GetWordWrap(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets whether or not to the text will be continue on the next line if it exceeds the width of the control.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.CheckBox.OnCheck">
 <summary>
 Fired when the checked state is changed.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.Color">
 <summary>
 Contains methods to create and modify colors.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Color.GetRandomColor">
 <summary>
 Gets a valid random color.
 </summary>
 <returns>
 A valid random color.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Color.FromRGB(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a color from its red, green, and blue components.
 </summary>
 <param name="red">the 0 to 255 value of the red component</param>
 <param name="green">the 0 to 255 value of the green component</param>
 <param name="blue">the 0 to 255 value of the blue component</param>
 <returns>a string representing the color</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Color.FromARGB(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
Creates a color from its alpha, red, green, and blue components.
 </summary>
 <param name="alpha">the 0 to 255 value of the color opacity. 0 means the color is fully transparent</param>
 <param name="red">the 0 to 255 value of the red component</param>
 <param name="green">the 0 to 255 value of the green component</param>
 <param name="blue">the 0 to 255 value of the blue component</param>
 <returns>a string representing the color</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Color.ChangeTransparency(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new color based on the given colr, with the transparency set to the given value.
 </summary>
 <param name="color">the color you want to change its transparency</param>
 <param name="percentage">A number between 0 and 100 that represents the percentage of the color transparency</param>
 <returns>a new color with the given transparency</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Color.GetTransparency(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the transparency percentage of the color
 </summary>
 <param name="color">the color you want to get its transparency percentage</param>
 <returns>a number between 0 and 100 representing the percentage of the color transparency</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Color.GetName(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the English name of the color if its defined.
 </summary>
 <param name="color">the color you want to get its name</param>
 <returns>the English name of the color</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Color.GetNameAndTransparency(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the English name of the color if its defined, followed by the transparency percentage of the color.
 </summary>
 <param name="color">the color you want to get its name</param>
 <returns>the English name of the color, followed by the transparency percentage of the color</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Color.GetRedRatio(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the red component of the color
 </summary>
 <param name="color">the input color</param>
 <returns>A number between 0 and 255 that represents the red component of the color</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Color.GetGreenRatio(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the green component of the color
 </summary>
 <param name="color">the input color</param>
 <returns>A number between 0 and 255 that represents the green component of the color</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Color.GetAlpha(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the alpha component of the color, which is an indicator of the color opacity.
 </summary>
 <param name="color">the input color</param>
 <returns>
 a number between 0 and 255 that represents the alpha component of the color:
   • 0 means a fully transparent color.
   • 255 means a fully opaque solid color.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Color.GetBlueRatio(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the blue component of the color
 </summary>
 <param name="color">the input color</param>
 <returns>A number between 0 and 255 that represents the blue component of the color</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Color.ChangeRedRatio(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new color based on the given color, with the red component changed to the given value.
 </summary>
 <param name="color">The input color</param>
 <param name="value">A number between 0 and 255 for the new value of the red component</param>
 <returns>a new color with the red component changed to the given value</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Color.ChangeGreenRatio(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new color based on the given color, with the green component changed to the given value.
 </summary>
 <param name="color">The input color</param>
 <param name="value">A number between 0 and 255 for the new value of the green component</param>
 <returns>a new color with the green component changed to the given value</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Color.ChangeAlpha(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new color based on the given color, with the alpha component changed to the given value.
 The alpha component is an indicator of the color opacity, where 0 means a fully transparent color, while 255 means a fully opaque solid color.
 </summary>
 <param name="color">The input color</param>
 <param name="value">A number between 0 and 255 for the new value of the alpha component.</param>
 <returns>a new color with the alpha component changed to the given value</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Color.ChangeBlueRatio(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new color based on the given color, with the blue component changed to the given value.
 </summary>
 <param name="color">The input color</param>
 <param name="value">A number between 0 and 255 for the new value of the blue component</param>
 <returns>a new color with the blue component changed to the given value</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Color.ShowDialog(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Shows the color dialog to allow the user to select a color.
 </summary>
 <param name="initialColor">the color that will be selected when the dialog is opened</param>
 <returns>
 If the user selected a color and clicks the OK button, this method will return the selected color.
 If the user canceled the color dialog, this method returms an empty String "".
 </returns>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Color.AllColors">
 <summary>
 Returns an array of all pre-defined colors
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ColorEx.ChangeTransparency(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new color based on the current color, with the transparency set to the given value.
 </summary>
 <param name="percentage">a 0 to 100 value that represents the percentage of the transparency of the color</param>
 <returns>a new color with the given transparency. The current color will not change.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ColorEx.GetTransparency(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the transparency percentage of the color.
 Note that this property is read only, and you must use the ChangeTransparency method to change the color transparency percentage.
 </summary>
 <returns>a 0 to 100 value represents the transparency percentage of the color</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ColorEx.GetName(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the English name of the color if its defined.
 </summary>
 <returns>the English name of the color</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ColorEx.GetNameAndTransparency(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the English name  of the color if its defined, followed by the transparency percentage of the color.
 </summary>
 <returns>the English name of the color, followed by the transparency percentage of the color</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ColorEx.GetRedRatio(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the red component of the color, which is a number between 0 and 255.
 Note that this property is read only, and you must use the ChangeRedRatio method to change the color red component.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ColorEx.GetGreenRatio(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the green component of the color, which is a number between 0 and 255.
 Note that this property is read only, and you must use the ChangeGreenRatio method to change the color green component.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ColorEx.GetBlueRatio(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the blue component of the color, which is a number between 0 and 255.
 Note that this property is read only, and you must use the ChangeBlueRatio method to change the color blue component.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ColorEx.ChangeRedRatio(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new color based on the current color, with the red component changed to the given value.
 </summary>
 <param name="value">the new value of the red component</param>
 <returns>a new color with the red component changed to the given value. The current color will not change.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ColorEx.ChangeGreenRatio(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new color based on the current color, with the green component changed to the given value.
 </summary>
 <param name="value">the new value of the green component</param>
 <returns>a new color with the green component changed to the given value. The current color will not change.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ColorEx.ChangeBlueRatio(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new color based on the current color, with the blue component changed to the given value.
 </summary>
 <param name="value">the new value of the blue component</param>
 <returns>a new color with the blue component changed to the given value. The current color will not change.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ColorEx.ChangeAlpha(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new color based on the current color, with the alpha component changed to the given value.
 The alpha component is an indicator of the color opacity, where 0 means a fully transparent color, while 255 means a fully opaque solid color.
 </summary>
 <param name="value">A number between 0 and 255 for the new value of the alpha component.</param>
 <returns>a new color with the alpha component changed to the given value</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ColorEx.GetAlpha(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the alpha component of the color, which is a number betwwn 0 and 255, that indicats the color opacity, where:
   • 0 means a fully transparent color.
   • 255 means a fully opaque solid color.
 Note that this property is read only, and you must use the ChangeAlpha method to change the color alpha component.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.Colors">
 <summary>Defines all known color names</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.AliceBlue">
 <summary>
 AliceBlue Color:
 Hex: "#FFF0F8FF"
 R=240, G=248, B=255
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.AntiqueWhite">
 <summary>
 AntiqueWhite Color:
 Hex: "#FFFAEBD7"
 R=250, G=235, B=215
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Aqua">
 <summary>
 Cyan Color:
 Hex: "#FF00FFFF"
 R=0, G=255, B=255
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Aquamarine">
 <summary>
 Aquamarine Color:
 Hex: "#FF7FFFD4"
 R=127, G=255, B=212
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Azure">
 <summary>
 Azure Color:
 Hex: "#FFF0FFFF"
 R=240, G=255, B=255
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Beige">
 <summary>
 Beige Color:
 Hex: "#FFF5F5DC"
 R=245, G=245, B=220
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Bisque">
 <summary>
 Bisque Color:
 Hex: "#FFFFE4C4"
 R=255, G=228, B=196
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Black">
 <summary>
 Black Color:
 Hex: "#FF000000"
 R=0, G=0, B=0
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.BlanchedAlmond">
 <summary>
 BlanchedAlmond Color:
 Hex: "#FFFFEBCD"
 R=255, G=235, B=205
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Blue">
 <summary>
 Blue Color:
 Hex: "#FF0000FF"
 R=0, G=0, B=255
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.BlueViolet">
 <summary>
 BlueViolet Color:
 Hex: "#FF8A2BE2"
 R=138, G=43, B=226
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Brown">
 <summary>
 Brown Color:
 Hex: "#FFA52A2A"
 R=165, G=42, B=42
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.BurlyWood">
 <summary>
 BurlyWood Color:
 Hex: "#FFDEB887"
 R=222, G=184, B=135
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.CadetBlue">
 <summary>
 CadetBlue Color:
 Hex: "#FF5F9EA0"
 R=95, G=158, B=160
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Chartreuse">
 <summary>
 Chartreuse Color:
 Hex: "#FF7FFF00"
 R=127, G=255, B=0
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Chocolate">
 <summary>
 Chocolate Color:
 Hex: "#FFD2691E"
 R=210, G=105, B=30
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Coral">
 <summary>
 Coral Color:
 Hex: "#FFFF7F50"
 R=255, G=127, B=80
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.CornflowerBlue">
 <summary>
 CornflowerBlue Color:
 Hex: "#FF6495ED"
 R=100, G=149, B=237
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Cornsilk">
 <summary>
 Cornsilk Color:
 Hex: "#FFFFF8DC"
 R=255, G=248, B=220
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Crimson">
 <summary>
 Crimson Color:
 Hex: "#FFDC143C"
 R=220, G=20, B=60
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Cyan">
 <summary>
 Cyan Color:
 Hex: "#FF00FFFF"
 R=0, G=255, B=255
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DarkBlue">
 <summary>
 DarkBlue Color:
 Hex: "#FF00008B"
 R=0, G=0, B=139
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DarkCyan">
 <summary>
 DarkCyan Color:
 Hex: "#FF008B8B"
 R=0, G=139, B=139
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DarkGoldenrod">
 <summary>
 DarkGoldenrod Color:
 Hex: "#FFB8860B"
 R=184, G=134, B=11
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DarkGray">
 <summary>
 DarkGray Color:
 Hex: "#FFA9A9A9"
 R=169, G=169, B=169
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DarkGreen">
 <summary>
 DarkGreen Color:
 Hex: "#FF006400"
 R=0, G=100, B=0
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DarkKhaki">
 <summary>
 DarkKhaki Color:
 Hex: "#FFBDB76B"
 R=189, G=183, B=107
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DarkMagenta">
 <summary>
 DarkMagenta Color:
 Hex: "#FF8B008B"
 R=139, G=0, B=139
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DarkOliveGreen">
 <summary>
 DarkOliveGreen Color:
 Hex: "#FF556B2F"
 R=85, G=107, B=47
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DarkOrange">
 <summary>
 DarkOrange Color:
 Hex: "#FFFF8C00"
 R=255, G=140, B=0
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DarkOrchid">
 <summary>
 DarkOrchid Color:
 Hex: "#FF9932CC"
 R=153, G=50, B=204
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DarkRed">
 <summary>
 DarkRed Color:
 Hex: "#FF8B0000"
 R=139, G=0, B=0
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DarkSalmon">
 <summary>
 DarkSalmon Color:
 Hex: "#FFE9967A"
 R=233, G=150, B=122
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DarkSeaGreen">
 <summary>
 DarkSeaGreen Color:
 Hex: "#FF8FBC8F"
 R=143, G=188, B=143
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DarkSlateBlue">
 <summary>
 DarkSlateBlue Color:
 Hex: "#FF483D8B"
 R=72, G=61, B=139
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DarkSlateGray">
 <summary>
 DarkSlateGray Color:
 Hex: "#FF2F4F4F"
 R=47, G=79, B=79
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DarkTurquoise">
 <summary>
 DarkTurquoise Color:
 Hex: "#FF00CED1"
 R=0, G=206, B=209
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DarkViolet">
 <summary>
 DarkViolet Color:
 Hex: "#FF9400D3"
 R=148, G=0, B=211
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DeepPink">
 <summary>
 DeepPink Color:
 Hex: "#FFFF1493"
 R=255, G=20, B=147
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DeepSkyBlue">
 <summary>
 DeepSkyBlue Color:
 Hex: "#FF00BFFF"
 R=0, G=191, B=255
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DimGray">
 <summary>
 DimGray Color:
 Hex: "#FF696969"
 R=105, G=105, B=105
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.DodgerBlue">
 <summary>
 DodgerBlue Color:
 Hex: "#FF1E90FF"
 R=30, G=144, B=255
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.FireBrick">
 <summary>
 FireBrick Color:
 Hex: "#FFB22222"
 R=178, G=34, B=34
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.FloralWhite">
 <summary>
 FloralWhite Color:
 Hex: "#FFFFFAF0"
 R=255, G=250, B=240
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.ForestGreen">
 <summary>
 ForestGreen Color:
 Hex: "#FF228B22"
 R=34, G=139, B=34
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Magenta">
 <summary>
 Fuchsia Color:
 Hex: "#FFFF00FF"
 R=255, G=0, B=255
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Gainsboro">
 <summary>
 Gainsboro Color:
 Hex: "#FFDCDCDC"
 R=220, G=220, B=220
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.GhostWhite">
 <summary>
 GhostWhite Color:
 Hex: "#FFF8F8FF"
 R=248, G=248, B=255
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Gold">
 <summary>
 Gold Color:
 Hex: "#FFFFD700"
 R=255, G=215, B=0
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Goldenrod">
 <summary>
 Goldenrod Color:
 Hex: "#FFDAA520"
 R=218, G=165, B=32
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Gray">
 <summary>
 Gray Color:
 Hex: "#FF808080"
 R=128, G=128, B=128
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Green">
 <summary>
 Green Color:
 Hex: "#FF008000"
 R=0, G=128, B=0
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.GreenYellow">
 <summary>
 GreenYellow Color:
 Hex: "#FFADFF2F"
 R=173, G=255, B=47
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Honeydew">
 <summary>
 Honeydew Color:
 Hex: "#FFF0FFF0"
 R=240, G=255, B=240
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.HotPink">
 <summary>
 HotPink Color:
 Hex: "#FFFF69B4"
 R=255, G=105, B=180
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.IndianRed">
 <summary>
 IndianRed Color:
 Hex: "#FFCD5C5C"
 R=205, G=92, B=92
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Indigo">
 <summary>
 Indigo Color:
 Hex: "#FF4B0082"
 R=75, G=0, B=130
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Ivory">
 <summary>
 Ivory Color:
 Hex: "#FFFFFFF0"
 R=255, G=255, B=240
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Khaki">
 <summary>
 Khaki Color:
 Hex: "#FFF0E68C"
 R=240, G=230, B=140
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Lavender">
 <summary>
 Lavender Color:
 Hex: "#FFE6E6FA"
 R=230, G=230, B=250
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.LavenderBlush">
 <summary>
 LavenderBlush Color:
 Hex: "#FFFFF0F5"
 R=255, G=240, B=245
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.LawnGreen">
 <summary>
 LawnGreen Color:
 Hex: "#FF7CFC00"
 R=124, G=252, B=0
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.LemonChiffon">
 <summary>
 LemonChiffon Color:
 Hex: "#FFFFFACD"
 R=255, G=250, B=205
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.LightBlue">
 <summary>
 LightBlue Color:
 Hex: "#FFADD8E6"
 R=173, G=216, B=230
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.LightCoral">
 <summary>
 LightCoral Color:
 Hex: "#FFF08080"
 R=240, G=128, B=128
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.LightCyan">
 <summary>
 LightCyan Color:
 Hex: "#FFE0FFFF"
 R=224, G=255, B=255
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.LightGoldenrodYellow">
 <summary>
 LightGoldenrodYellow Color:
 Hex: "#FFFAFAD2"
 R=250, G=250, B=210
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.LightGray">
 <summary>
 LightGray Color:
 Hex: "#FFD3D3D3"
 R=211, G=211, B=211
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.LightGreen">
 <summary>
 LightGreen Color:
 Hex: "#FF90EE90"
 R=144, G=238, B=144
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.LightPink">
 <summary>
 LightPink Color:
 Hex: "#FFFFB6C1"
 R=255, G=182, B=193
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.LightSalmon">
 <summary>
 LightSalmon Color:
 Hex: "#FFFFA07A"
 R=255, G=160, B=122
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.LightSeaGreen">
 <summary>
 LightSeaGreen Color:
 Hex: "#FF20B2AA"
 R=32, G=178, B=170
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.LightSkyBlue">
 <summary>
 LightSkyBlue Color:
 Hex: "#FF87CEFA"
 R=135, G=206, B=250
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.LightSlateGray">
 <summary>
 LightSlateGray Color:
 Hex: "#FF778899"
 R=119, G=136, B=153
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.LightSteelBlue">
 <summary>
 LightSteelBlue Color:
 Hex: "#FFB0C4DE"
 R=176, G=196, B=222
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.LightYellow">
 <summary>
 LightYellow Color:
 Hex: "#FFFFFFE0"
 R=255, G=255, B=224
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Lime">
 <summary>
 Lime Color:
 Hex: "#FF00FF00"
 R=0, G=255, B=0
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.LimeGreen">
 <summary>
 LimeGreen Color:
 Hex: "#FF32CD32"
 R=50, G=205, B=50
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Linen">
 <summary>
 Linen Color:
 Hex: "#FFFAF0E6"
 R=250, G=240, B=230
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Fuchsia">
 <summary>
 Fuchsia Color:
 Hex: "#FFFF00FF"
 R=255, G=0, B=255
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Maroon">
 <summary>
 Maroon Color:
 Hex: "#FF800000"
 R=128, G=0, B=0
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.MediumAquamarine">
 <summary>
 MediumAquamarine Color:
 Hex: "#FF66CDAA"
 R=102, G=205, B=170
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.MediumBlue">
 <summary>
 MediumBlue Color:
 Hex: "#FF0000CD"
 R=0, G=0, B=205
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.MediumOrchid">
 <summary>
 MediumOrchid Color:
 Hex: "#FFBA55D3"
 R=186, G=85, B=211
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.MediumPurple">
 <summary>
 MediumPurple Color:
 Hex: "#FF9370DB"
 R=147, G=112, B=219
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.MediumSeaGreen">
 <summary>
 MediumSeaGreen Color:
 Hex: "#FF3CB371"
 R=60, G=179, B=113
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.MediumSlateBlue">
 <summary>
 MediumSlateBlue Color:
 Hex: "#FF7B68EE"
 R=123, G=104, B=238
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.MediumSpringGreen">
 <summary>
 MediumSpringGreen Color:
 Hex: "#FF00FA9A"
 R=0, G=250, B=154
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.MediumTurquoise">
 <summary>
 MediumTurquoise Color:
 Hex: "#FF48D1CC"
 R=72, G=209, B=204
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.MediumVioletRed">
 <summary>
 MediumVioletRed Color:
 Hex: "#FFC71585"
 R=199, G=21, B=133
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.MidnightBlue">
 <summary>
 MidnightBlue Color:
 Hex: "#FF191970"
 R=25, G=25, B=112
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.MintCream">
 <summary>
 MintCream Color:
 Hex: "#FFF5FFFA"
 R=245, G=255, B=250
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.MistyRose">
 <summary>
 MistyRose Color:
 Hex: "#FFFFE4E1"
 R=255, G=228, B=225
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Moccasin">
 <summary>
 Moccasin Color:
 Hex: "#FFFFE4B5"
 R=255, G=228, B=181
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.NavajoWhite">
 <summary>
 NavajoWhite Color:
 Hex: "#FFFFDEAD"
 R=255, G=222, B=173
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Navy">
 <summary>
 Navy Color:
 Hex: "#FF000080"
 R=0, G=0, B=128
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.None">
 <summary>
 No color. Use this value when you don't want to draw the background color or the outline color.
 There is a difference between Colors.None and Colors.Transparent:
 ● The None color deletes the surface of the graphic, so, it doesn't respond to mouse and keyboard events, which are delivered to the underneath control.
 ● The Transparent color keeps the surfuce of the graphic but you can see through it, while it Is still responding to  mouse And keyboard events.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.OldLace">
 <summary>
 OldLace Color:
 Hex: "#FFFDF5E6"
 R=253, G=245, B=230
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Olive">
 <summary>
 Olive Color:
 Hex: "#FF808000"
 R=128, G=128, B=0
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.OliveDrab">
 <summary>
 OliveDrab Color:
 Hex: "#FF6B8E23"
 R=107, G=142, B=35
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Orange">
 <summary>
 Orange Color:
 Hex: "#FFFFA500"
 R=255, G=165, B=0
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.OrangeRed">
 <summary>
 OrangeRed Color:
 Hex: "#FFFF4500"
 R=255, G=69, B=0
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Orchid">
 <summary>
 Orchid Color:
 Hex: "#FFDA70D6"
 R=218, G=112, B=214
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.PaleGoldenrod">
 <summary>
 PaleGoldenrod Color:
 Hex: "#FFEEE8AA"
 R=238, G=232, B=170
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.PaleGreen">
 <summary>
 PaleGreen Color:
 Hex: "#FF98FB98"
 R=152, G=251, B=152
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.PaleTurquoise">
 <summary>
 PaleTurquoise Color:
 Hex: "#FFAFEEEE"
 R=175, G=238, B=238
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.PaleVioletRed">
 <summary>
 PaleVioletRed Color:
 Hex: "#FFDB7093"
 R=219, G=112, B=147
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.PapayaWhip">
 <summary>
 PapayaWhip Color:
 Hex: "#FFFFEFD5"
 R=255, G=239, B=213
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.PeachPuff">
 <summary>
 PeachPuff Color:
 Hex: "#FFFFDAB9"
 R=255, G=218, B=185
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Peru">
 <summary>
 Peru Color:
 Hex: "#FFCD853F"
 R=205, G=133, B=63
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Pink">
 <summary>
 Pink Color:
 Hex: "#FFFFC0CB"
 R=255, G=192, B=203
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Plum">
 <summary>
 Plum Color:
 Hex: "#FFDDA0DD"
 R=221, G=160, B=221
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.PowderBlue">
 <summary>
 PowderBlue Color:
 Hex: "#FFB0E0E6"
 R=176, G=224, B=230
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Purple">
 <summary>
 Purple Color:
 Hex: "#FF800080"
 R=128, G=0, B=128
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Random">
 <summary>
 Returns a random color from the list of well-known colors, that contains 139 colors.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Red">
 <summary>
 Red Color:
 Hex: "#FFFF0000"
 R=255, G=0, B=0
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.RosyBrown">
 <summary>
 RosyBrown Color:
 Hex: "#FFBC8F8F"
 R=188, G=143, B=143
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.RoyalBlue">
 <summary>
 RoyalBlue Color:
 Hex: "#FF4169E1"
 R=65, G=105, B=225
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SaddleBrown">
 <summary>
 SaddleBrown Color:
 Hex: "#FF8B4513"
 R=139, G=69, B=19
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Salmon">
 <summary>
 Salmon Color:
 Hex: "#FFFA8072"
 R=250, G=128, B=114
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SandyBrown">
 <summary>
 SandyBrown Color:
 Hex: "#FFF4A460"
 R=244, G=164, B=96
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SeaGreen">
 <summary>
 SeaGreen Color:
 Hex: "#FF2E8B57"
 R=46, G=139, B=87
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Seashell">
 <summary>
 Seashell Color:
 Hex: "#FFFFF5EE"
 R=255, G=245, B=238
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Sienna">
 <summary>
 Sienna Color:
 Hex: "#FFA0522D"
 R=160, G=82, B=45
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Silver">
 <summary>
 Silver Color:
 Hex: "#FFC0C0C0"
 R=192, G=192, B=192
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SkyBlue">
 <summary>
 SkyBlue Color:
 Hex: "#FF87CEEB"
 R=135, G=206, B=235
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SlateBlue">
 <summary>
 SlateBlue Color:
 Hex: "#FF6A5ACD"
 R=106, G=90, B=205
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SlateGray">
 <summary>
 SlateGray Color:
 Hex: "#FF708090"
 R=112, G=128, B=144
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Snow">
 <summary>
 Snow Color:
 Hex: "#FFFFFAFA"
 R=255, G=250, B=250
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SpringGreen">
 <summary>
 SpringGreen Color:
 Hex: "#FF00FF7F"
 R=0, G=255, B=127
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SteelBlue">
 <summary>
 SteelBlue Color:
 Hex: "#FF4682B4"
 R=70, G=130, B=180
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Tan">
 <summary>
 Tan Color:
 Hex: "#FFD2B48C"
 R=210, G=180, B=140
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Teal">
 <summary>
 Teal Color:
 Hex: "#FF008080"
 R=0, G=128, B=128
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Thistle">
 <summary>
 Thistle Color:
 Hex: "#FFD8BFD8"
 R=216, G=191, B=216
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Tomato">
 <summary>
 Tomato Color:
 Hex: "#FFFF6347"
 R=255, G=99, B=71
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Transparent">
 <summary>
 Transparent Color:
 Hex: "#00FFFFFF"
 Alpha = 0, R=255, G=255, B=255
 There is a difference between Colors.Transparent and Colors.None:
 ● The None color deletes the surface of the graphic, so, it doesn't respond to mouse and keyboard events, which are delivered to the underneath control.
 ● The Transparent color keeps the surfuce of the graphic but you can see through it, while it Is still responding to  mouse And keyboard events.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Turquoise">
 <summary>
 Turquoise Color:
 Hex: "#FF40E0D0"
 R=64, G=224, B=208
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Violet">
 <summary>
 Violet Color:
 Hex: "#FFEE82EE"
 R=238, G=130, B=238
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Wheat">
 <summary>
 Wheat Color:
 Hex: "#FFF5DEB3"
 R=245, G=222, B=179
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.White">
 <summary>
 White Color:
 Hex: "#FFFFFFFF"
 R=255, G=255, B=255
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.WhiteSmoke">
 <summary>
 WhiteSmoke Color:
 Hex: "#FFF5F5F5"
 R=245, G=245, B=245
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.Yellow">
 <summary>
 Yellow Color:
 Hex: "#FFFFFF00"
 R=255, G=255, B=0
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.YellowGreen">
 <summary>
 YellowGreen Color:
 Hex: "#FF9ACD32"
 R=154, G=205, B=50
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemActiveBorder">
 <summary>
 Gets the color of active window's border as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemInactiveSelectionHighlight">
 <summary>
 Gets the color used on the usrs system to highlight a selected item that is inactive.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemInactiveSelectionHighlightText">
 <summary>
 Gets the color of an inactive selected item’s text, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemWindow">
 <summary>
 Gets the background color in the client area of a window, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemScrollBar">
 <summary>
 Gets the background color of a scroll bar, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemMenuText">
 <summary>
 Gets the color of a menu's text, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemMenuHighlight">
 <summary>
 Gets the color used to highlight a menu item, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemMenuBar">
 <summary>
 Gets the background color for a menu bar, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemMenu">
 <summary>
 Gets the color of a menu's background, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemInfoText">
 <summary>
 Gets the text color for the ToolTip control, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemInfo">
 <summary>
 Gets the background color for the ToolTip control, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemInactiveCaptionText">
 <summary>
 Gets the color of the text of an inactive window's title bar, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemInactiveCaption">
 <summary>
 Gets the background color of an inactive window's title bar, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemInactiveBorder">
 <summary>
 Gets the color of an inactive window's border, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemHotTrack">
 <summary>
 Gets the color used to designate a hot-tracked item, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemHighlightText">
 <summary>
 Gets the color of the text of selected items, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemHighlight">
 <summary>
 Gets the background color of selected items, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemGrayText">
 <summary>
 Gets the color of disabled text, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemGradientInactiveCaption">
 <summary>
 Gets the right side color in the gradient of an inactive window's title bar, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemGradientActiveCaption">
 <summary>
 Gets the right side color in the gradient of an active window's title bar, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemDesktop">
 <summary>
 Gets the color of the desktop, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemControlText">
 <summary>
 Gets the color of text in a three-dimensional display element, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemControlHighlight">
 <summary>
 Gets the highlight color of a three-dimensional display element, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemControlLight">
 <summary>
 Gets the light color of a three-dimensional display element, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemControlDarkShadow">
 <summary>
 Gets the dark shadow color of a three-dimensional display element, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemControlShadow">
 <summary>
 Gets the shadow color of a three-dimensional display element, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemControl">
 <summary>
 Gets the face color of a three-dimensional display element, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemAppWorkspace">
 <summary>
 Gets the color of the application workspace, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemActiveCaptionText">
 <summary>
 Gets the color of the text in      the active window's title bar, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemActiveCaption">
 <summary>
 Gets the background color of the active window's title bar, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemWindowFrame">
 <summary>
 Gets the color of a window frame, as defined on the user system.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Colors.SystemWindowText">
 <summary>
 Gets the color of the text in the client area of a window, as defined on the user system.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.ComboBox">
 <summary>
 Represents a ComboBox control, which is composed of a textbox and a dropdown listbox.
 You can use the form designer to add a combo box to the form by dragging it from the toolbox.
 It is also possible to use the Form.AddComboBox method to create a new combo box and add it to the form at runtime.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ComboBox.GetItemsCount(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the count of the items in the ComboBox
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ComboBox.GetItems(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets an array containing the items of the ComboBox
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ComboBox.GetSelectedItem(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the item that is currently selected in the ComboBox
 </summary>
 <remarks>This property returns empty string if there is no item selected.
 But there can ba a selected item that displays an empty string!
 So, use the SelectedIndex property if you want to distinguish between the two cases.
 If you set the selectedItem to a value that doesn't existed in the list, 
 no item will be selected.
 </remarks>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ComboBox.GetSelectedIndex(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the index of the selected item in the ComboBox. 
 Zero indicates that no item is selected.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ComboBox.GetAllowEdit(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Set this property to True to allow the user to write in the textbox of the ComboBox.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ComboBox.GetText(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the text that is displayed by the textbox of the ComboBox
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ComboBox.GetItemAt(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Returns the item that exists in the given index in the list.
 </summary>
 <param name="index">
 The index of the item. It should be greater than zero and not exceed the count of the items,
 otherwise, this method will return an empty string.
 </param>
 <returns>the value of the item</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ComboBox.SetItemAt(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Sets the value of the item that exists in the given index in the list.
 </summary>
 <param name="index">The index of the item. It should be greater than zero and not exceed the count of the items</param>
 <param name="value">the value to set to the item</param>
 <returns>True if the item is modified, otherwise False.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ComboBox.AddItem(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds an item to the end of the list.
 </summary>
 <param name="value">The item you want to add to the list. You can send an array to add all its items</param>
 <returns>the index of the newly added item, or 0 if the operation failed.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ComboBox.AddItemAt(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given item to the list at the given index.
 </summary>
 <param name="value">the item you want to add to the list. You can send an array to add all its items</param>
 <param name="index">The index you want to add the item at. The value of this index must be greater that 0 and less that list items count + 1, otherwise the item will not be added.</param>
 <returns>True is the item is successfully added at the given index, otherwise False.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ComboBox.RemoveItem(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Searches for the given value in the list, and removes the first found item.
 </summary>
 <param name="value">the item you want to remove. You can send an array to remove all its items</param>
 <returns>True is the item is removed, otherwise False.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ComboBox.RemoveAllItems(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Reomves all the items from the listbox
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ComboBox.RemoveItemAt(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Removes the list item that exists at the given index
 </summary>
 <param name="index">The index of the item you want to remove</param>
 <returns>True if the item id removd, otherwise False.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ComboBox.ContainsItem(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Checkes whether or not the given item exists in the list.
 </summary>
 <param name="value">The value of the item to search for.</param>
 <returns>True if the item found, or False otherwise.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ComboBox.FindItem(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Returns the index of the given item if it esists in the list, otherwise retruns 0.
 </summary>
 <param name="value">The item you want to find</param>
 <returns>the index of the item if found, or 0 otherwise</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ComboBox.FindItemAt(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Returns the index of the given item if it esists in the list in the given index range, otherwise retruns 0.
 </summary>
 <param name="value">The item you want to find.</param>
 <param name="startIndex">The array index the search starts at.</param>
 <param name="endIndex">The array index the search ends at.If endIndex is less than startIndex, the search direction will be reversed to find the last index of the item.</param>
 <returns>the index of the item if found, or 0 otherwise</returns>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.ComboBox.OnSelection">
 <summary>
 This event is fired when the selected item in the list is changed.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.Control">
 <summary>
 This is the parent control of other controls like Form, Label, and Button controls. All controls inherit the properties, methods and events defined in this type.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetName(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the name of the control.
 Note that you can't change the control name at runtime. Use the designer to change the name.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetParentForm(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the form that contains the given control. 
 If the control is a form, it will be the return value.
 If the control has no parent form, the return value will be an empty string "".
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetTypeName(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the name of the control type, like TextBox, Label, and Button.           
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetTag(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 An extra property to store any value you want that is related to the control. you can store multiple values as by putting them in an array or a dynamic object
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetLeft(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the x-pos of the left edge of control on its parent control.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetRight(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the x-pos of the right edge of control on its parent control.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetTop(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the y-pos of the top edge of the control on its parent control.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetBottom(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the y-pos of the bottom edge of the control on its parent control.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetWidth(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the width of the control.
 If you want an auto-width to fit the control's content width, set this property to 0 or amy negative number. 
 You can also limit the auto width by setting the MaxWidth property.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetHeight(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the height of the control. 
 If you want an auto-heigh to fit the control's content heigh, set this property to 0 or any negative number. 
 You can also limit the auto height by setting the MaxHeigh property.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetMaxWidth(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 The max width of the control. It is useful especially when you set the control's width to auto (Width = -1), to force the auto witdth not to exceed a max length.
 Setting this property to 0 or a negative value will reset it (no max width).
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetMaxHeight(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 The max height of the control. It is useful especially when you set the control's height to auto (Height = -1), to force the auto height not to exceed a max length.
 Setting this property to 0 or a negative value will reset it (no max height).
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetPadding(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the padding of the control, which is the internal space between the control edges and its content.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.FitContentWidth(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Changes the witdth of the control to fit its content width.
 This is a one time change, and will not make the control width auto-szied.
 If you want to make the width auto-sized, set the Width property to -1.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.FitContentHeight(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Changes the height of the control to fit its content height. This may be useful when you set WordWrap = True in labels and buttons.
 This is a one time change, and will not make the control height auto-szied.
 If you want to make the height auto-sized, set the Height property to -1.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.FitContentSize(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Changes the witdth and height of the control to fit its content size.
 This is a one time change, and will not make the control width and height auto-szied.
 If you want to make them auto-sized, set both Width and Height properties to -1.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetEnabled(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 When it is True, user can interact with the control.
 When it is False,  the control is disabled, and user can't interact with it.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetVisible(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 When it is True, the control is shown at the form.
 When it is False,  the control is hidden.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetRightToLeft(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets whether the control content is displayed from right to left.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetMouseX(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 The mouse x-pos relative to the control. When mouse is over the control, this value lies between 0 and the control's width.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetMouseY(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 The mouse y-pos relative to the control. When mouse is over the control, this value lies between 0 and the control's height.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.Focus(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Moves focus to the control, so it beccomes the active control that recives the keybored keys.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.ReleaseMouse(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Releases the mouse if the currrent control captured it by calling the CaptureMouse method.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.CaptureMouse(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Makes the current control owns the mouse and its events, until you call the ReleaseMouse function.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetError(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the error message for this control. 
 When you set the error message, the control will display a red border, And the error message will shown as a tooltip when the mouse hovers over the control.
 To reset the error, jsut set this property to an empty string.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetToolTip(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the message to display as a tooltip when you hover over the control. 
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.SetResourceDictionary(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Sets the resource dictionary of the control from the given file. The resource dictionary contains styles for the control and its child controls. This allows you to design advanced styles with other tools like VS.NET, save them to a file as a resource dictionary, then use this method to load it.
 </summary>
 <param name="fileName">The xaml file that contains the resource dictionary.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.SetStyle(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Sets the style of the control by loading it from the given file.
 This allows you To design advanced styles With other tools Like VS.NET, save them To a file As a resource dictionary, Then use this method To load it.
 </summary>
 <param name="fileName">The xaml file that contains the resource dictionary.</param>
 <param name="styleKey">The key of style. The resource dictionary can contain many styles targetting the same control. This method will search for the style that have this key.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.Validate(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Raises the OnLostFocus event to apply any validation logic supplied by you in the OnLostFocus handler, then checks the Error property to see if the control has errors or not.
 </summary>
 <returns>True if the current control has no errors, or False otherwise.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetBackColor(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 The backgeound color of the control.
 Use values from the Colors object, such as Colors.Yellow
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetForeColor(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 The foregeound color used to draw the text of the control.
 Use values from the Colors object, such as Colors.Red
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.ChooseBackColor(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Shows the color dialog to allow user to change the back color of the current control
 </summary>
 <returns>The color that the user choosed, or "" if he cancelled the operation</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.ChooseForeColor(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Shows the color dialog to allow user to change the fore color of the current control
 </summary>
 <returns>The color that the user choosed, or "" if he cancelled the operation</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.ChooseFont(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Shows the font dialog to allow user to change the font properties including the fore color of the current control
 </summary>
 <returns>The font properties that the user choosed, or "" if he cancelled the operation</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetFont(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets an array containing the font properties under the keys: Name, Size, Bold, Italic, Underlined and Color, so you can use them as dynamic properties.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetFontName(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the font name used to display the text of the control
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetFontSize(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the font size used to display the text of the control.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetFontBold(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets whether or not the font used to display the text of the control, is bold.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetFontItalic(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets whether or not the font used to display the text of the control, is italic.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.GetAngle(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the rotation angle of the control.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.Rotate(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Rotates the control by the specified angle.
 </summary>
 <param name="angle">
 The angle to rotate the shape by. It will be added to the shape current angle.
 </param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.AnimateColor(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Animates the control's backColor to a new color.
 </summary>
 <param name="newColor">
 The new color to animate the control's backColor to.
 </param>
 <param name="duration">
 The time for the animation, in milliseconds.
 </param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.AnimateTransparency(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Animates the control's backColor to a new transparency.
 </summary>
 <param name="transparency">The new transparency to animate the backColor to. Use a value between 0 and 100.</param>
 <param name="duration">The time for the animation, in milliseconds.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.AnimatePos(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Animates the control to a new position.
 </summary>
 <param name="x">
 The x co-ordinate of the new position.
 </param>
 <param name="y">
 The y co-ordinate of the new position.
 </param>
 <param name="duration">
 The time for the animation, in milliseconds.
 </param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.AnimateSize(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Animates the control to a new size.
 </summary>
 <param name="width">
 The new width.
 </param>
 <param name="height">
 The new height.
 </param>
 <param name="duration">
 The time for the animation, in milliseconds.
 </param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.AnimateAngle(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Animates the control's rotation angle to a new angle.
 </summary>
 <param name="angle">
 The new rotation angle.
 </param>
 <param name="duration">
 The time for the animation, in milliseconds.
 </param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.RemoveEventHandler(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Removes the handler of the given event of the current control.
 </summary>
 <param name="eventName">The name of the event to remove its handler</param>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Control.OnMouseLeftDown">
 <summary>
 Fired when user presses the left mouse-button down
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Control.OnClick">
 <summary>
 Fired when user clicks the control by the left mouse button.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Control.OnMouseLeftUp">
 <summary>
     ''' Fired when user releases the left mouse-button
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Control.OnDoubleClick">
 <summary>
     ''' Fired when user double-clicks the mouse-button
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Control.OnMouseRightDown">
 <summary>
 Fired when user presses the right mouse-button down
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Control.OnMouseRightUp">
 <summary>
 Fired when user releases the right mouse-button
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Control.OnMouseMove">
 <summary>
 Fired when the mouse pointer moves over the control.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Control.OnMouseWheel">
 <summary>
 Fired when user moves the mouse wheel
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Control.OnMouseEnter">
 <summary>
 Fired when the mouse pointer enters the control area.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Control.OnMouseLeave">
 <summary>
 Fired when the mouse pointer leaves the control area.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Control.OnKeyDown">
 <summary>
 Fired when the user presses a keyboard key down
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Control.OnKeyUp">
 <summary>
 Fired when the user releases a keyboard key.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Control.OnGotFocus">
 <summary>
 Fired when the control gets the focus.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Control.OnLostFocus">
 <summary>
 Fired when the control looses the focus.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.BringToFront(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Brings the current control to front of all other controls on the form.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Control.SendToBack(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Sends the current control to the back of all other controls on the form.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.ControlTypes">
 <summary>
 Contains the names of winforms controls
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.ControlTypes.Control">
 <summary>Control</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.ControlTypes.Form">
 <summary>Form</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.ControlTypes.TextBox">
 <summary>TextBox</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.ControlTypes.Label">
 <summary>Label</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.ControlTypes.ListBox">
 <summary>ListBox</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.ControlTypes.ComboBox">
 <summary>ComboBox</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.ControlTypes.DatePicker">
 <summary>DatePicker</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.ControlTypes.CheckBox">
 <summary>CheckBox</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.ControlTypes.RadioButton">
 <summary>RadioButton</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.ControlTypes.Button">
 <summary>Button</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.ControlTypes.MenuItem">
 <summary>MenuItem</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.ControlTypes.MainMenu">
 <summary>Menu</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.ControlTypes.Slider">
 <summary>Slider</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.ControlTypes.ProgressBar">
 <summary>ProgressBar</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.ControlTypes.ScrollBar">
 <summary>ScrollBar</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.ControlTypes.WinTimer">
 <summary>WinTimer</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.ControlTypes.ToggleButton">
 <summary>ToggleButton</summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.Date">
 <summary>
 This class provides methods to deal with date and time
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Date.Now">
 <summary>
 Returns the current date and time as defined by the user system.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.CreateDuration(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a time span from given duration parts.
 </summary>
 <param name="days">the total days in the duration. For example, 1000 days approximatly represents 2 years and 9 months</param>
 <param name="hours">the hours part of the duration</param>
 <param name="minutes">the minutes part of the duration</param>
 <param name="seconds">the seconds part of the duration</param>
 <param name="milliseconds">the milliseconds part of the duration</param>
 <returns>a new duration</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.FromCulture(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date from the given text if it has a valid date format for the given culture.
 </summary>
 <param name="dateText">The text that represents the date</param>
 <param name="cultureName">
 The culture name used to format the date, like "en-US" for English (United States) culture, "ar-EG" for Arabic (Egypt) culture, and "ar-SA" for Arabic (Saudi Arabia) culture.
 ''' Send an empty string "" to use the local culture of the user's system.
 </param>
 <returns>a new date or empty string</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.ToCulture(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the short date and short time string representaion of the given date formatted with the given culture.
 </summary>
 <param name="date">The input date</param>
 <param name="cultureName">
 The culture name used to format the date, like "en-US" for English (United States) culture, "ar-EG" for Arabic (Egypt) culture, and "ar-SA" for Arabic (Saudi Arabia) culture.
 Send an empty string "" to use the local culture of the user's system.
 </param>
 <returns>a string represent the date in the given culture</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.TicksToDate(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date from the given ticks value. Note that the second contains 10 milion ticks.
 </summary>
 <param name="ticks">the total ticks of the date</param>
 <returns>a new date.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.TicksToDuration(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new TimeSpan from the given ticks value. Note that the second contains 10 milion ticks.
 </summary>
 <param name="ticks">The total ticks of the duration</param>
 <returns>a new duration.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.FromDate(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date from the given year, month and day values.
 </summary>
 <param name="year">the year number</param>
 <param name="month">a number between 1 and 12 representing the month</param>
 <param name="day">a number between 1 and 31 representing the day</param>
 <returns>a new date</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.FromTime(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date from the given time values.
 </summary>
 <param name="hour">A number between 0 and 23 representing the hour</param>
 <param name="minute">A number between 0 and 59 representing the minute</param>
 <param name="second">A number between 0 and 59 representing the second</param>
 <param name="millisecond">A number between 0 and 999 representing the millisecond</param>
 <returns>a new date</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.FromDateTime(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date from the given date and time values.
 </summary>
 <param name="year">the year number</param>
 <param name="month">a number between 1 and 12 representing the month</param>
 <param name="day">a number between 1 and 31 representing the day</param>
 <param name="hour">a number between 0 and 23 representing the hour</param>
 <param name="minute">a number between 0 and 59 representing the minute</param>
 <param name="second">a number between 0 and 59 representing the second</param>
 <param name="millisecond">a number between 0 and 999 representing the millisecond</param>
 <returns>a new date</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetLongTime(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the time part for the given date, which will include the seconds part and the day time part like AM/PM.
 </summary>
 <param name="date">the input date \ time</param>
 <returns>a string representing the long time</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetShortTime(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the short time part of the given date. The time will incude hours and minutes and AM or PM, but not seconds and milliseconds.
 </summary>
 <param name="date">the input date \ time</param>
 <returns>a string representing the short time</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetLongDate(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the long form of the given date. The long date contains the month name, instead of its number.
 </summary>
 <param name="date">the input date \ time</param>
 <returns>a string representing the long date.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetShortDate(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the short form of the given date, like 1/1/2020.
 </summary>
 <param name="date">The input date \ time</param>
 <returns>a string representing the short date.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetDateAndTime(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the date and time representaion in the user local culture.
 </summary>
 <param name="date">the input date \ time</param>
 <returns>a string representing the short date and long time in the user local culture.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetYear(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the year of the given date.
 </summary>
 <param name="date">the input date \ time</param>
 <returns>a number representing the year</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetMonth(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the month of the given date.
 </summary>
 <param name="date">the input date \ time</param>
 <returns>a number between 1 and 12 that represents the month</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetEnglishMonthName(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the English name of the month of the given date.
 </summary>
 <param name="date">the input date \ time</param>
 <returns>the name of the month in English</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetMonthName(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the local name of the month of the given date.
 </summary>
 <param name="date">the input date \ time</param>
 <returns>the name of the month in the local language defined on the user system</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetDay(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the day of the given date.
 </summary>
 <param name="date">the input date \ time</param>
 <returns>a number between 1 and 31 that represents the day</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetDayOfYear(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the day number in the year for the given date. 
 </summary>
 <param name="date">the input date \ time</param>
 <returns>a number between 1 and 366 that Represents the day in the year</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetDayOfWeek(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the day number in the week for the given date. 
 Note that Sunday is the first day of the week. 
 </summary>
 <param name="date">the input date \ time</param>
 <returns>a number between 1 and 7 that Represents the day in the week</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetEnglishDayName(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the English name of the week day for the given date.
 </summary>
 <param name="date">the input date \ time</param>
 <returns>the name of the week day in English</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetDayName(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the local name of the week day of the given date.
 </summary>
 <param name="date">the input date \ time</param>
 <returns>the name of the week day in the local language defined on the user system</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetHour(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the hour of the given date.
 </summary>
 <param name="date">the input date \ time</param>
 <returns>a number between 0 and 23 that represents the hour</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetMinute(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the minute of the given date.
 </summary>
 <param name="date">the input date \ time</param>
 <returns>a number between 0 and 59 that represents the minute</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetSecond(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the second of the given date.
 </summary>
 <param name="date">the input date \ time</param>
 <returns>a number between 0 and 59 that represents the second</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetMillisecond(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the millisecond of the given date.
 </summary>
 <param name="date">the input date \ time</param>
 <returns>a number between 0 and 999 that represents the millisecond</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetTicks(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the total ticks in the given date. Note that one second contains 10 million ticks!
 </summary>
 <param name="date">the input date \ time</param>
 <returns>the total ticks</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetElapsedMilliseconds(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Calculates the difference in milliseconds between the start of the year 1900 and the given date.
 </summary>
 <param name="date">the input date \ time</param>
 <returns>the number of milliseconds that have elapsed since 1900 until the given date</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.ChangeYear(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date based on the given date with the year set to the given value.
 </summary>
 <param name="date">the input date \ time</param>
 <param name="value">the new year</param>
 <returns>a new date with the new year value. The input date will not change</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.ChangeMonth(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date based on the given date with the month set to the given value.
 </summary>
 <param name="date">the input date \ time</param>
 <param name="value">a number between 1 and 12 that represents the month</param>
 <returns>a new date with the new month value if it's valide. The input date will not be changed</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.ChangeDay(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date based on the given date with the day set to the given value.
 </summary>
 <param name="date">the input date \ time</param>
 <param name="value">An integer number in the range (1-31) for dates and (0-10675199) for durations. Otherwise this method will Do Nothing And Return the input Date without any change.</param>
 <returns>a new date with the new day value. The input date will not change</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.ChangeHour(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date based on the given date with the hour set to the given value.
 </summary>
 <param name="date">the input date \ time</param>
 <param name="value">a number between 0 and 23 that represents the new hour</param>
 <returns>a new date with the new hour value. The input date will not change</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.ChangeMinute(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date based on the given date with the minute set to the given value.
 </summary>
 <param name="date">the input date \ time</param>
 <param name="value">a number between 0 and 59 that represents the new minute</param>
 <returns>a new date with the new minute value. The input date will not change</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.ChangeSecond(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date based on the given date with the second set to the given value.
 </summary>
 <param name="date">the input date \ time</param>
 <param name="value">a number between 0 and 59 that represents the new second</param>
 <returns>a new date with the new second value. The input date will not change</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.ChangeMillisecond(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date based on the given date with the millisecond set to the given value.
 </summary>
 <param name="date">the input date \ time</param>
 <param name="value">a number between 0 and 999 that represents the new millisecond</param>
 <returns>a new date with the new millisecond value. The input date will not change</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.AddYears(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date by adding the given years to the given date.
 </summary>
 <param name="date">the input date \ time</param>
 <param name="value">the number of years you want to add. If the given date is a duration, the total days of the years will be calculated assuming that a year = 365.2425 days.</param>
 <returns>a new date with the added years. The input date will not be affected</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.AddMonths(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date by adding the given months to the given date. 
 </summary>
 <param name="date">the input date \ time</param>
 <param name="value">the number of months you want to add. If the given date is a duration, the total days of the months will be calculated assuming that a month = 30.4375 days in avarage.</param>
 <returns>a new date with the added months. The input date will not be affected</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.AddDays(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date by adding the given days to the given date.
 </summary>
 <param name="date">the input date \ time</param>
 <param name="value">the number of days you want to add</param>
 <returns>a new date with the added days. The input date will not be affected</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.AddHours(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date by adding the given hours to the given date.
 </summary>
 <param name="date">the input date \ time</param>
 <param name="value">the number of hours you want to add</param>
 <returns>a new date with the added hours. The input date will not be affected</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.AddMinutes(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date by adding the given minutes to the given date.
 </summary>
 <param name="date">the input date \ time</param>
 <param name="value">the number of minutes you want to add</param>
 <returns>a new date with the added minutes. The input date will not be affected</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.AddSeconds(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date by adding the given seconds to the given date.
 </summary>
 <param name="date">the input date \ time</param>
 <param name="value">the number of seconds you want to add</param>
 <returns>a new date with the added seconds. The input date will not be affected</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.AddMilliseconds(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date by adding the given milliseconds to the given date.
 </summary>
 <param name="date">the input date \ time</param>
 <param name="value">the number of milliseconds to add</param>
 <returns>a new date with the added milliseconds. The input date will not be affected</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.Add(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date by adding the given duration to the given date.
 </summary>
 <param name="date">the input date \ time</param>
 <param name="duration">a date representing the duration you want to add</param>
 <returns>a new date with the added duration. The input date will not be affected</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.Subtract(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date by subtracting the given value from the given date.
 </summary>
 <param name="[date]">the input date \ time</param>
 <param name="value">The date or duration you want to subtract.</param>
 <returns>a duration representing the difference between the two dates. The input date will not be affected</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetTotalYears(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the approximate total years in the given duration, assuming that each year contains 365.2425 days.
 </summary>
 <param name="duration">the input duration</param>
 <returns>the approximate total years</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetTotalMonths(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the approximate total months in the given duration, assuming that there are 12 months in the year, and each year contains 365.2425 days.
 </summary>
 <param name="duration">the input duration</param>
 <returns>the approximate total months</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetTotalDays(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the total days in the given duration.
 </summary>
 <param name="duration">the input duration</param>
 <returns>the total days</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetTotalHours(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the total hours in the given duration.
 </summary>
 <param name="duration">the input duration</param>
 <returns>the total hours</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetTotalMinutes(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the total minutes in the given duration.
 </summary>
 <param name="duration">the input duration</param>
 <returns>the total minutes</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetTotalSeconds(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the total seconds in the given duration.
 </summary>
 <param name="duration">the input duration</param>
 <returns>the total seconds</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.GetTotalMilliseconds(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the total milliseconds in the given duration.
 </summary>
 <param name="duration">the input duration</param>
 <returns>the total milliseconds</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Date.Negate(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Negatives the given duration.
 </summary>
 <param name="duration">The input duration</param>
 <returns>
 If the input duration is positive, returns the negative value of it.
 If the input duration is negative, returns the positive value of it.
 If the input is a date, it returns it as it can't be negated.
 </returns>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.DateEx">
 <summary>
 This class provides methods to deal with date and time
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetLongTime(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the full time part in the user local culture (including seconds, AM/PM and milliseconds) of the current date.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetShortTime(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the short time part of the current date in the user local culture. The time will incude hours and minutes and AM or PM, but not seconds and milliseconds.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetLongDate(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the long form of the current date. The long date contains the month name in the user local culture instead of its number.
 </summary>
 <returns>a string representing the long date in the user local culture</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetShortDate(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the short form of the current date in the user local culture, like 1/1/2020
 </summary>
 <returns>a string representing the short date in the user local culture.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetDateAndTime(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the short date and long time representaion of the current date in the user local culture.
 </summary>
 <returns>a string representing the short date and long time in the user local culture</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetYear(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the year of the current date.
 </summary>
 <returns>a number representing the year</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetMonth(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the month of the current date.
 </summary>
 <returns>a number between 1 and 12 that represents the month</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetEnglishMonthName(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the English name of the month of the current date.
 </summary>
 <returns>the name of the month in English</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetMonthName(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the local name of the month of the current date.
 </summary>
 <returns>the name of the month in the local language defined on the user system</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetDay(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the day of the current date.
 </summary>
 <returns>a number between 1 and 31 that represents the day</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetDayOfYear(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the day number in the year of the current date. 
 </summary>
 <returns>a number between 1 and 366 that Represents the date in the week</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetDayOfWeek(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the day of the week of the current date. Note that Sunday is the first day of the week. 
 </summary>
 <returns>a number between 1 and 7 that Represents the date in the week</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetEnglishDayName(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the English name of the week day of the current date.
 </summary>
 <returns>the name of the week day in English</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetDayName(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the local name of the week day of the current date.
 </summary>
 <returns>the name of the week day in the local language defined on the user system</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetHour(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the hour of the current date.
 </summary>
 <returns>a number between 0 and 23 that represents the hour</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetMinute(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the minute of the current date.
 </summary>
 <returns>a number between 0 and 59 that represents the minute</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetSecond(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the second of the current date.
 </summary>
 <returns>a number between 0 and 59 that represents the second</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetMillisecond(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the millisecond of the current date.
 </summary>
 <returns>a number between 0 and 999 that represents the millisecond</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetTicks(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the total ticks in the current date. Note that one second contains 10 million ticks!
 </summary>
 <returns>the total ticks</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetElapsedMilliseconds(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Calculates the difference in milliseconds between the start of the year 1900 and the current date.
 </summary>
 <returns>the number of milliseconds that have elapsed since 1900 until the current date</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.ChangeYear(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date based on the current date with the year set to the given value.
 </summary>
 <param name="value">the new year</param>
 <returns>a new date with the new year value. The input date will not change</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.ChangeMonth(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date based on the current date with the month set to the given value.
 </summary>
 <param name="value">a number between 1 and 12 that represents the month</param>
 <returns>a new date with the new month value. The input date will not change</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.ChangeDay(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date based on the current date with the day set to the given value.
 </summary>
 <param name="value">a number between 1 and 31 that represents the day</param>
 <returns>a new date with the new day value. The input date will not change</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.ChangeHour(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date based on the current date with the hour set to the given value.
 </summary>
 <param name="value">a number between 0 and 23 that represents the new hour</param>
 <returns>a new date with the new hour value. The input date will not change</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.ChangeMinute(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date based on the current date with the minute set to the given value.
 </summary>
 <param name="value">a number between 0 and 59 that represents the new minute</param>
 <returns>a new date with the new minute value. The input date will not change</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.ChangeSecond(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date based on the current date with the second set to the given value.
 </summary>
 <param name="value">a number between 0 and 59 that represents the new second</param>
 <returns>a new date with the new second value. The input date will not change</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.ChangeMillisecond(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date based on the current date with the millisecond set to the given value.
 </summary>
 <param name="value">a number between 0 and 999 that represents the new millisecond</param>
 <returns>a new date with the new millisecond value. The input date will not change</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.AddYears(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date by adding the given years to the current date.
 </summary>
 <param name="value">the number of years you want to add. If the given date is a duration, the total days of the years will be calculated assuming that a year = 365.2425 days.</param>
 <returns>a new date with the added years. The input date will not be affected</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.AddMonths(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date by adding the given months to the current date.
 </summary>
 <param name="value">the number of months you want to add. If the given date is a duration, the total days of the months will be calculated assuming that a month = 30.4375 days in avarage.</param>
 <returns>a new date with the added months. The input date will not be affected</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.AddDays(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date by adding the given days to the current date.
 </summary>
 <param name="value">the number of days you want to add</param>
 <returns>a new date with the added days. The input date will not be affected</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.AddHours(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date by adding the given hours to the current date.
 </summary>
 <param name="value">the number of hours you want to add</param>
 <returns>a new date with the added hours. The input date will not be affected</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.AddMinutes(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date by adding the given minutes to the current date.
 </summary>
 <param name="value">the number of minutes you want to add</param>
 <returns>a new date with the added minutes. The input date will not be affected</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.AddSeconds(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date by adding the given seconds to the current date.
 </summary>
 <param name="value">the number of seconds you want to add</param>
 <returns>a new date with the added seconds. The input date will not be affected</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.AddMilliseconds(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date by adding the given milliseconds to the current date.
 </summary>
 <param name="value">the number of milliseconds to add</param>
 <returns>a new date with the added milliseconds. The input date will not be affected</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.Add(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date by adding the current duration to the current date.
 </summary>
 <param name="duration">a date representing the duration you want to add</param>
 <returns>a new date with the added duration. The input date will not be affected</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.Subtract(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date by subtracting the given duration from the given date.
 </summary>
 <param name="value">the date\time or duration you want to subtract</param>
 <returns>a duration representing the difference between the two dates. The input date will not be affected</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetTotalDays(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the total days in the current duration.
 </summary>
 <returns>the total days</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetTotalHours(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the total hours in the current duration.
 </summary>
 <returns>the total hours</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetTotalMinutes(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the total minutes in the current duration.
 </summary>
 <returns>the total minutes</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetTotalSeconds(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the total seconds in the current duration.
 </summary>
 <returns>the total seconds</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetTotalMonths(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the approximate total months in the current duration, assuming that there are 12 months in the year, and each year contains 365.2425 days.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetTotalYears(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the approximate total years in the given duration, assuming that each year contains 365.2425 days.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.GetTotalMilliseconds(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the total milliseconds in the current duration.
 </summary>
 <returns>the total milliseconds</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.ToCulture(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the short date and short time string representaion of the given date formatted with the given culture.
 </summary>
 <param name="cultureName">the culture name used to format the date, like "en-US" for English (United States) culture, "ar-EG" for Arabic (Egypt) culture, and "ar-SA" for Arabic (Saudi Arabia) culture</param>
 <returns>a string represent the date in the given culture</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DateEx.Negate(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Negatives the current duration.
 </summary>
 <returns>
 If the duration is positive, returns the negative value of it.
 If the duration is negative, returns the positive value of it.
 If this is a date, it returns it as it can't be negated.
 </returns>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.DatePicker">
 <summary>
 Represents a DatePicker control, that allows the user to enter a date or pick it from the drop down calendar.
 You can use the form designer to add a date picker to the form by dragging it from the toolbox.
 It is also possible to use the Form.AddDatePicker method to create a new date picker and add it to the form at runtime.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.DatePicker.GetSelectedDate(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the date that is selected by the DatePicker
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.DatePicker.OnSelection">
 <summary>
 Fired when the selected date is changed.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.DialogResults">
 <summary>
 Contains the names of common dialog results
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.DialogResults.Cancel">
 <summary>
 The user clicked the Cancel button or the form close button
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.DialogResults.OK">
 <summary>
 The user clicked the OK button.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.DialogResults.Yes">
 <summary>
 The user clicked the Yes button.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.DialogResults.No">
 <summary>
 The user clicked the No button.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.DialogResults.Abort">
 <summary>
 The user clicked the Abort button.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.DialogResults.Retry">
 <summary>
 The user clicked the Retry button.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.DialogResults.Ignore">
 <summary>
 The user clicked the Ignore button.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.DialogResults.Try">
 <summary>
 The user clicked the Try button.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.DialogResults.Continue">
 <summary>
 The user clicked the Continue button.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.Event">
 <summary>
 Contains info about the last fired event
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Event.SenderControl">
 <summary>
Gets the name of the control that raised the last event.
It is useful when you use one sub to handle many events, to get info about the contol that fired the event.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Event.Handled">
 <summary>
 If you set this property to true inside an event handler sub, the event will be considered handled and will not be processed by windows anymore.
 For example, if you want to cancel writrting a key to the textbox, use `Event.Handled = True` inside the OnKeyDown event handler.
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Event.LastKey">
 <summary>
 Returns the last Key pressed on the keyboard. 
 Use The Keys enum members to check they key.
 Example: If Event.LastKey = Keys.A Then
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Event.LastTextInput">
 <summary>
 returns the last text that was about to be written to the TextBox
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Event.LastKeyName">
 <summary>
 Returns the name of the last key pressed on the keyboard.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Event.HandleEventsOf(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Set the Evemt.SenderForm and Event.SenderControl. 
 You must call this method before adding event handlers for contrl events.
 </summary>
 <param name="ControlName">The cntrl you will handle its events.</param>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Event.MouseX">
 <summary>
 Gets or sets the mouse cursor's x co-ordinate.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Event.MouseY">
 <summary>
 Gets or sets the mouse cursor's y co-ordinate.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Event.LastMouseWheelDirection">
 <summary>
 Get a value that indicates the last mouse wheel movement direction:
  * 0 means down.
  * 1 means up.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Event.IsLeftButtonDown">
 <summary>
 Gets whether or not the left button is pressed.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Event.IsRightButtonDown">
 <summary>
 Gets whether or not the right button is pressed.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.Form">
 <summary>
 Represents the Form control, which is the window that the user interacts with.
 It is easier use the form designer to add new forms and save it to a XAML file.
 It is also possible to crate forms at run time, by calling the Forms.AddForm method to create a new form, or the Forms.LoadForm method to load a form from the XAML file that contains its design, then call the Form.Show method to display the form.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.RunTests(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Runs the test functions written in the current form, and shows the test results in the TxtTest textbox. If the form doesn't contain a textbox with this name, it will be added at run time to show the results.
 The test function must follow these rules:
 1. Its name must start with `Test_`, like `Test_FindNames`.
 2. It must be a function not a sub, and it can't have any parameters.
 3. The function return value should be a string containing the test result like "passed" or "failed". 
 See the tests written in the "UnitTest Sample" project in the samples folder.
 </summary>
 <returns>the number of tests that have been run.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.RunGlobalTests(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Runs the test functions written in the global.sb file, and shows the test results in the TxtTest textbox on the current form. If the form doesn't contain a textbox with this name, it will be added at run time to show the results.
 The test function must follow these rules:
 1. Its name must start with `Test_`, like `Test_FindNames`.
 2. It must be a function not a sub, and it can't have any parameters.
 3. The function return value should be a string containing the test result like "passed" or "failed". 
 See the tests written in the "UnitTest Sample" project in the samples folder.
 </summary>
 <returns>the number of tests that have been run.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.AddTextBox(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new TextBox control to the form
 </summary>
 <param name="textBoxName">A unique name for the new TextBox.</param>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="width">The width of the control. Use -1 for auto-width</param>
 <param name="height">The height of the control. Use -1 for auto-height</param>
 <returns>
 The key of the TextBox in the formula {formName.textBoxName} like "form1.textbox1".
 sVB can deal with this key as an object of type TextBox, so, you can access the TextBox methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.AddLabel(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new Label control to the form
 </summary>
 <param name="labelName">A unique name for the new Label.</param>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="width">The width of the control. Use -1 for auto-width</param>
 <param name="height">The height of the control. Use -1 for auto-height</param>
 <returns>
 The key of the label in the formula {formName.labelName} like "form1.label1".
 sVB can deal with this key as an object of type Label, so, you can access the Label methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.AddImageBox(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new IamgeBox control to the form
 </summary>
 <param name="imageBoxName">A unique name for the new ImageBox.</param>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="width">The width of the control. Use -1 for auto-width</param>
 <param name="height">The height of the control. Use -1 for auto-height</param>
 <param name="fileName">the path of the image file</param>
 <returns>
 The key of the ImageBox in the formula {formName.imageBoxName} like "form1.imagebox1".
 sVB can deal with this key as an object of type ImageBox, so, you can access the ImageBox methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.AddTimer(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new Timer control to the form
 </summary>
 <param name="timerName">A unique name for the new Timer.</param>
 <param name="interval">The delay time in milliseconds between ticks</param>
 <returns>
 The key of the Timer in the formula {formName.timerName} like "form1.timer1".
 sVB can deal with this key as an object of type WinTimer, so, you can access the WinTimer methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.AddMainMenu(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a main menu to the current form. If there is already a main menu, it will be replaced.
 </summary>
 <param name="menuName">The name of the main menu</param>
 <returns>
 The key of the menu in the formula {formName.mainMenuName} like "form1.mainMenu1".
 sVB can deal with this key as an object of type MainMenu, so, you can access the MainMenu methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.AddButton(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new Button control to the form
 </summary>
 <param name="buttonName">A unique name for the new Button.</param>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="width">The width of the control. Use -1 for auto-width</param>
 <param name="height">The height of the control. Use -1 for auto-height</param>
 <returns>
 The key of the button in the formula {formName.buttonName} like "form1.button1".
 sVB can deal with this key as an object of type Button, so, you can access the Button methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.AddToggleButton(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new ToggleButton control to the form
 </summary>
 <param name="toggleButtonName">A unique name for the new ToggleButton.</param>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="width">The width of the control. Use -1 for auto-width</param>
 <param name="height">The height of the control. Use -1 for auto-height</param>
 <returns>
 The key of the ToggleButton in the formula {formName.toggleButtonName} like "form1.toggleButton1".
 sVB can deal with this key as an object of type ToggleButton, so, you can access the ToggleButton methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.AddCheckBox(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new CheckBox control to the form
 </summary>
 <param name="checkBoxName">A unique name for the new CheckBox.</param>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="text">the text to desply on the CheckBox</param>
 <param name="isChecked">The value to set to the Checked property</param>
 <returns>
 The key of the CheckBox in the formula {formName.checkBoxName} like "form1.checkbox1".
 sVB can deal with this key as an object of type CheckBox, so, you can access the CheckBox methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.AddRadioButton(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new RadioButton control to the form
 </summary>
 <param name="radioButtonName">A unique name for the new RadioButton.</param>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="text">The text to desply on the RadioButton</param>
 <param name="groupName">The name of the group to add the button to</param>
 <param name="isChecked">The value to set to the Checked property</param>
 <returns>
 The key of the RadioButton in the formula {formName.radioButtonName} like "form1.radiobutton1".
 sVB can deal with this key as an object of type RadioButton, so, you can access the RadioButton methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.AddListBox(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new ListBox control to the form
 </summary>
 <param name="listBoxName">A unique name for the new ListBox.</param>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="width">The width of the control. Use -1 for auto-width</param>
 <param name="height">The height of the control. Use -1 for auto-height</param>
 <returns>
 The key of the listBox in the formula {formName.listBoxName} like "form1.listbox1".
 sVB can deal with this key as an object of type ListBox, so, you can access the ListBox methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.AddComboBox(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new ComboBox control to the form
 </summary>
 <param name="comboBoxName">A unique name for the new ComboBox.</param>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="width">The width of the control. Use -1 for auto-width</param>
 <param name="height">The height of the control. Use -1 for auto-height</param>
 <returns>
 The key of the comboBox in the formula {formName.comboBoxName} like "form1.combobox1".
 sVB can deal with this key as an object of type ComboBox, so, you can use the ComboBox methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.AddDatePicker(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new DatePicker control to the form
 </summary>
 <param name="datePickerName">A unique name for the new DatePicker.</param>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="width">The width of the control. Use -1 for auto-width</param>
 <param name="selectedDate">the date that will be selected in the control</param>
 <returns>
 The key of the DatePicker in the formula {formName.datePikkerName} like "form1.datepicker1".
 sVB can deal with this key as an object of type DatePicker, so, you can access the DatePicker methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.AddProgressBar(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new ProgressBar control to the form
 </summary>
 <param name="progressBarName">A unique name for the new ProgressBar.</param>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="width">The width of the control. Use -1 for auto-width</param>
 <param name="height">The height of the control. Use -1 for auto-height</param>
 <param name="minimum">The progress minimum value</param>
 <param name="maximum">The progress maximum value. Use 0 if the max value is indeterminate.</param>
 <returns>
 The key of the ProgressBar in the formula {formName.progressBar} like "form1.progressBar1".
 sVB can deal with this key as an object of type ProgressBar, so, you can access the ProgressBar methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.AddSlider(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new Slider control to the form
 </summary>
 <param name="sliderName">A unique name for the new Slider.</param>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="width">The width of the control. Use -1 for auto-width</param>
 <param name="height">The height of the control. Use -1 for auto-height</param>
 <param name="minimum">The slider minimum value</param>
 <param name="maximum">The slider maximum value.</param>
 <param name="value">The slider current value</param>
 <param name="tickFrequency">The distance between slide ticks</param>
 <returns>
 The key of the Slider in the formula {formName.sliderName} like "form1.slider1".
 sVB can deal with this key as an object of type Slider, so, you can access the Slider methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.AddScrollBar(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new ScrollBar control to the form
 </summary>
 <param name="scrollBarName">A unique name for the new ScrollBar.</param>
 <param name="left">The X-pos of the control.</param>
 <param name="top">The Y-pos of the control.</param>
 <param name="width">The width of the control. Use -1 for auto-width</param>
 <param name="height">The height of the control. Use -1 for auto-height</param>
 <param name="minimum">The scrollbar minimum value</param>
 <param name="maximum">The scrollbar maximum value.</param>
 <param name="value">The scrollbar current value</param>
 <returns>
 The key of the Scrollbar in the formula {formName.scrollbarName} like "form1.scrollbar1".
 sVB can deal with this key as an object of type Scrollbar, so, you can access the Scrollbar methods via it.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.RemoveControl(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Removes the given control from the current form.
 </summary>
 <param name="controlName">The name or key of the control that you want to remove.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.GetArgsArr(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Returns the additional data sent to the form via Forms.ShowForm and Forms.ShowDialog methods.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.ContainsControl(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Returns True if the form dsiplays a control with the given name.
 </summary>
 <param name="controlName">The name of the control to search for. It is case-insensitive.</param>
 <returns>True or False</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.GetControls(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Returns an array containg the names of all controls displayed on the form
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.GetIcon(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the image file path to be displayed as an icon on the title bar of the current form.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.Show(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Displays the form on the screen, if it is loaded but not shown yet, or if it is hidden.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.ShowDialog(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Displays the form on the screen as a modal dialog, so the user must close it first to ba able to accees other forms of your app.
 </summary>
 <returns>the dialog result that Represents the type of the button that user clicked, like OK, Yes, No, ... etc.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.ShowChildForm(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Shows the form that has the given name as a child form of the current form.
 </summary>
 <param name="childFormName">The name of the child form.</param>
 <param name="argsArr">Any additional data, an array, or a dynamic object you want to pass to the form. It will be stored in the Form.ArgsArr property of the child form, so you can use it as you want.</param>
 <returns>the child form name</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.GetDialogResult(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the name of the button that the user clicked when he closes the dialog form.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.ShowMessage(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Shows a message box dialog on the owner form.
 Use MsgBox as a shorcut name to show the message box. Ex:
 MsgBox "Hello!"
 </summary>
 <param name="message">the text to dislpay on the message box</param>
 <param name="title">the title to display of the dialog box</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.Hide(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Hides the form
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.Close(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Closes the form. This will clear any data displayed by its controls, as in fact the form will be totally disposed. You can't call the Form.Show method to show  the form after it is closed, unless you re-created a new instance of it first. If you want to keep the form alive but just hide it, you can just set its Visible property to False to hide it, so you can still be able to show it.
 Note that closing the main form of the project will close the whole application. You can choose the main form by just open any form of the project in sVB and press F5 to run the project, so that form will be the first form displayed when the application starts up.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.GetIsLoaded(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Returns True if the current form is loaded, regardless if it is hidden in this moment.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.GetText(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the title of the form
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.GetTopmost(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets whether or not the form is the top most window that always appears on top of all other desktop windows even when it is not the active window.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.AllowTransparency(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Call this method to allow using transparent colors on the form background.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.Validate(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Raises the OnLostFocus event for every control on the current form, to apply any validation logic supplied by you in each OnLostFocuse handler, then checks the Error property to see if the control has errors or not. The process stops at first control with errors and returns false.
 </summary>
 <returns>True if the all controls are valid, or False otherwise.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Form.SaveDesign(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Saves the current form design to the given xaml file. This is useful if you use code to create a form and add controls to it in runtime, so you can save it's design to a file if you want.
 </summary>
 <param name="xamlFile">the path an name of the file you want to save the design to.</param>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Form.OnPreviewKeyDown">
 <summary>
 Fired when the user presses a keyboard key down on the form or any of its child controls.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Form.OnPreviewKeyUp">
 <summary>
 Fired when the user releases a keyboard key on the form or any of its child controls.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Form.OnPreviewMouseWheel">
 <summary>
 Fired when user moves the mouse wheel ober the form or any of its children
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Form.OnShown">
 <summary>
 Fired after the form is shown and all controls are rendered and are ready to use their properties.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Form.OnClosing">
 <summary>
 Fired jsut before the form is closed.
 Use Event.Handled = True if you want to cancel closing the form.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Form.OnClosed">
 <summary>
 Fired after the form is closed
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.Forms">
 <summary>
 This types provides methods to create forms, show them, and get a list of all opened forms in the program.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Forms.TimerParentForm">
 <summary>
 Used internally by the compiler to stop the calssic timer when the form is closed
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Forms.GetForms(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the forms of the current app.
 </summary>
 <param name="loadedFormsOnly">If True, this method will return the loaded forms only, otherwise, it will return all forms defined in this app even if you didn't load them yet.</param>
 <returns>an array containing the names the forms</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Forms.LoadForm(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Loads a form from its xaml file.
 </summary>
 <param name="formName">the name of the form</param>
 <param name="xamlPath">the path pf the xaml file that contains the form design</param>
 <returns>The name of the form</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Forms.AddForm(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new form with the given name, and adds it to the forms collection.
 </summary>
 <param name="formName">the name of the form</param>
 <returns>the name of the form</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Forms.ShowMessage(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Shows a message box dialog.
 Use MsgBox as a shorcut name to show the message box. Ex:
 MsgBox "Hello!"
 </summary>
 <param name="message">the text to dislpay on the message box</param>
 <param name="title">the title to display of the dialog box</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Forms.ShowForm(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Shows the form that has the given name if exists in the project.
 </summary>
 <param name="formName">the name of the form.</param>
 <param name="argsArr">any additional data, array, or a dynamic object you want to pass to the form. It will be stored in the ArgsArr property of the form, so you can use it as you want</param>
 <returns>the form name</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Forms.ShowDialog(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Loads the form that has the given name if exists in the project, and shows it as a modal dialog.
 </summary>
 <param name="formName">the name of the form.</param>
 <param name="argsArr">any additional data, array, or a dynamic object you want to pass to the form. It will be stored in the Form.ArgsArr property, so you can use it as you want</param>
 <returns>the dialog result that Represents the type of the button that user clicked, like OK, Yes, No, ... etc.</returns>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.GeometricPath">
 <summary>
 Allows you to combine shapes into one path, and create new geometric figures from line and arc segments, so you can create new complex custom shapes.
 You can add the geometric path to the shapes collection by calling the Shapes.AddGeometricPath() method, then you can apply any rotation or animation on it as you do with any other normal shape.
 You can also add the the geometric path to any label on any form by calling the Label.AddGeometricPath method, so you can move, rotate or animate it using the label methods.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.GeometricPath.CreatePath">
 <summary>
 creates a new geometric path to add geometric shapes to it, so you can compose complex shapes.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.GeometricPath.AddRectangle(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a rectangle to the geometric path.
 </summary>
 <param name="x">The x co-ordinate of the rectangle.</param>
 <param name="y">The y co-ordinate of the rectangle.</param>
 <param name="width">The width of the rectangle.</param>
 <param name="height">The height of the rectangle.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.GeometricPath.AddEllipse(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds an ellipse to the geometric path
 </summary>
 <param name="x">The x co-ordinate of the ellipse.</param>
 <param name="y">The y co-ordinate of the ellipse.</param>
 <param name="width">The width of the ellipse.</param>
 <param name="height">The height of the ellipse.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.GeometricPath.AddTriangle(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a triangle to the geometric path.
 </summary>
 <param name="x1">The x co-ordinate of the first point.</param>
 <param name="y1">The y co-ordinate of the first point.</param>
 <param name="x2">The x co-ordinate of the second point.</param>
 <param name="y2">The y co-ordinate of the second point.</param>
 <param name="x3">The x co-ordinate of the third point.</param>
 <param name="y3">The y co-ordinate of the third point.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.GeometricPath.AddLine(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a line to the geometric path.
 </summary>
 <param name="x1">The x co-ordinate of the first point.</param>
 <param name="y1">The y co-ordinate of the first point.</param>
 <param name="x2">The x co-ordinate of the second point.</param>
 <param name="y2">The y co-ordinate of the second point.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.GeometricPath.CreateFigure(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a new figure to the geometric path that starts at the given point
 </summary>
 <param name="x">The x co-ordinate of the start point of the figure</param>
 <param name="y">The y co-ordinate of the start point of the figure</param>
 <param name="isClosed">When True, a line segment is automatically drown between the last point and the start point of the figure to make it a closed shape. Use Fals if you want to draw an open figure like a curve.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.GeometricPath.AddLineSegment(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a line segment to the current figure in the geometric path, starting from the last point in the figure to the given point.
 </summary>
 <param name="x">The x co-ordinate of the end point of the line segment.</param>
 <param name="y">The y co-ordinate of the end point of the line segment.</param>
 <param name="usePen">Use True to draw the segment with the pen color, or False to hide the segment outline.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.GeometricPath.AddArcSegment(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds an arc segment to the current figure in the geometric path, starting from the last point in the figure to the given point.
 This arc is a part of the ellipse that has the given radius and passes through these tow points.
 </summary>
 <param name="x">The x co-ordinate of the end point of the arc segment.</param>
 <param name="y">The y co-ordinate of the end point of the arc segment.</param>
 <param name="xRadius">The horizontal radius of the arc</param>
 <param name="yRadius">The vertical radius of the arc</param>
 <param name="angle">The x-axis rotation of the ellipse</param>
 <param name="isLargArc">Use True if the arc should be greater than 180 degrees, or False otherwise</param>
 <param name="isClockwise">Use True to draw the arc in a positive angle direction, or False otherwise</param>
 <param name="usePen">Use True to draw the segment with the pen color, or False to hide the segment outline.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.GeometricPath.AddBezierSegment(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a cubic Bezier curve segment to the current figure in the geometric path, starting from the last point in the figure, passing through the  two given control points, and ending at the given end point.
 </summary>
 <param name="x1">The x co-ordinate of the first control point.</param>
 <param name="y1">The y co-ordinate of the first control point.</param>
 <param name="x2">The x co-ordinate of the second control point.</param>
 <param name="y2">The y co-ordinate of the second control point.</param>
 <param name="x3">The x co-ordinate of the end point.</param>
 <param name="y3">The y co-ordinate of the end point.</param>
 <param name="usePen">Use True to draw the segment with the pen color, or False to hide the segment outline.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.GeometricPath.AddQuadraticBezierSegment(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a cubic quadratic Bezier curve segment to the current figure in the geometric path, starting from the last point in the figure, passing through the given control point and ending at the given end point.
 </summary>
 <param name="x1">The x co-ordinate of the control point.</param>
 <param name="y1">The y co-ordinate of the control point.</param>
 <param name="x2">The x co-ordinate of the end point.</param>
 <param name="y2">The y co-ordinate of the end point.</param>
 <param name="usePen">Use True to draw the segment with the pen color, or False to hide the segment outline.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ImageBox.GetFileName(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the path of the image that is displayed in the control.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ImageBox.GetLeft(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 The x-pos of the control on its parent control.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ImageBox.GetTop(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 The y-pos of the control on its parent control.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ImageBox.GetWidth(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 The width of the control.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ImageBox.GetHeight(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 The height of the control.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.Keyboard">
 <summary>
 Contains info about the state of the keyboard keys.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keyboard.AltPressed">
 <summary>
 Returns True if the Alt key is pressed
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keyboard.CtrlPressed">
 <summary>
 Returns True if the Cntrl key is pressed
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keyboard.ShiftPressed">
 <summary>
 Returns True if the Shift key is pressed
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keyboard.WinPressed">
 <summary>
 Returns True if the Win key is pressed
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keyboard.CapsLockOn">
 <summary>
 Returns True if the Caps Lock key is on.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keyboard.InsertOn">
 <summary>
 Returns True if the Insert key is on.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keyboard.ScrollOn">
 <summary>
 Returns True if the Scroll Lock key is on.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keyboard.NumLockOn">
 <summary>
 Returns True if the Num Lock key is on.
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keyboard.LastKey">
 <summary>
 Returns the last Key pressed on the keyboard. 
 Use The Keys enum members to check they key.
 Example: If Keyboard.LastKey = Keys.A Then
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keyboard.LastTextInput">
 <summary>
 returns the last text that was about to be written to the TextBox
 </summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keyboard.LastKeyName">
 <summary>
 Returns the name of the last key pressed on the keyboard.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.Keys">
<summary>Specifies the possible key values on a keyboard.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.None">
<summary>No key pressed.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Cancel">
<summary>The Cancel key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Back">
<summary>The Backspace key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Tab">
<summary>The Tab key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.LineFeed">
<summary>The Linefeed key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Clear">
<summary>The Clear key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Return">
<summary>The Return key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Enter">
<summary>The Enter key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Pause">
<summary>The Pause key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Capital">
<summary>The Caps Lock key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.CapsLock">
<summary>The Caps Lock key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.KanaMode">
<summary>The IME Kana mode key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.HangulMode">
<summary>The IME Hangul mode key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.JunjaMode">
<summary>The IME Junja mode key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.FinalMode">
<summary>The IME Final mode key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.HanjaMode">
<summary>The IME Hanja mode key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.KanjiMode">
<summary>The IME Kanji mode key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Escape">
<summary>The ESC key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.ImeConvert">
<summary>The IME Convert key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.ImeNonConvert">
<summary>The IME NonConvert key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.ImeAccept">
<summary>The IME Accept key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.ImeModeChange">
<summary>The IME Mode change request.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Space">
<summary>The Spacebar key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Prior">
<summary>The Page Up key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.PageUp">
<summary>The Page Up key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Next">
<summary>The Page Down key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.PageDown">
<summary>The Page Down key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.End">
<summary>The End key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Home">
<summary>The Home key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Left">
<summary>The Left Arrow key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Up">
<summary>The Up Arrow key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Right">
<summary>The Right Arrow key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Down">
<summary>The Down Arrow key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Select">
<summary>The Select key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Print">
<summary>The Print key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Execute">
<summary>The Execute key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Snapshot">
<summary>The Print Screen key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.PrintScreen">
<summary>The Print Screen key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Insert">
<summary>The Insert key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Delete">
<summary>The Delete key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Help">
<summary>The Help key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.D0">
<summary>The 0 (zero) key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.D1">
<summary>The 1 (one) key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.D2">
<summary>The 2 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.D3">
<summary>The 3 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.D4">
<summary>The 4 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.D5">
<summary>The 5 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.D6">
<summary>The 6 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.D7">
<summary>The 7 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.D8">
<summary>The 8 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.D9">
<summary>The 9 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.A">
<summary>The A key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.B">
<summary>The B key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.C">
<summary>The C key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.D">
<summary>The D key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.E">
<summary>The E key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F">
<summary>The F key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.G">
<summary>The G key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.H">
<summary>The H key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.I">
<summary>The I key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.J">
<summary>The J key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.K">
<summary>The K key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.L">
<summary>The L key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.M">
<summary>The M key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.N">
<summary>The N key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.O">
<summary>The O key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.P">
<summary>The P key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Q">
<summary>The Q key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.R">
<summary>The R key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.S">
<summary>The S key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.T">
<summary>The T key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.U">
<summary>The U key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.V">
<summary>The V key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.W">
<summary>The W key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.X">
<summary>The X key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Y">
<summary>The Y key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Z">
<summary>The Z key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.LWin">
<summary>The left Windows logo key (Microsoft Natural Keyboard).</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.RWin">
<summary>The right Windows logo key (Microsoft Natural Keyboard).</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Apps">
<summary>The Application key (Microsoft Natural Keyboard).</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Sleep">
<summary>The Computer Sleep key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.NumPad0">
<summary>The 0 key on the numeric keypad.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.NumPad1">
<summary>The 1 key on the numeric keypad.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.NumPad2">
<summary>The 2 key on the numeric keypad.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.NumPad3">
<summary>The 3 key on the numeric keypad.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.NumPad4">
<summary>The 4 key on the numeric keypad.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.NumPad5">
<summary>The 5 key on the numeric keypad.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.NumPad6">
<summary>The 6 key on the numeric keypad.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.NumPad7">
<summary>The 7 key on the numeric keypad.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.NumPad8">
<summary>The 8 key on the numeric keypad.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.NumPad9">
<summary>The 9 key on the numeric keypad.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Multiply">
<summary>The Multiply key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Add">
<summary>The Add key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Separator">
<summary>The Separator key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Subtract">
<summary>The Subtract key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Decimal">
<summary>The Decimal key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Divide">
<summary>The Divide key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F1">
<summary>The F1 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F2">
<summary>The F2 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F3">
<summary>The F3 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F4">
<summary>The F4 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F5">
<summary>The F5 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F6">
<summary>The F6 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F7">
<summary>The F7 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F8">
<summary>The F8 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F9">
<summary>The F9 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F10">
<summary>The F10 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F11">
<summary>The F11 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F12">
<summary>The F12 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F13">
<summary>The F13 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F14">
<summary>The F14 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F15">
<summary>The F15 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F16">
<summary>The F16 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F17">
<summary>The F17 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F18">
<summary>The F18 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F19">
<summary>The F19 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F20">
<summary>The F20 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F21">
<summary>The F21 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F22">
<summary>The F22 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F23">
<summary>The F23 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.F24">
<summary>The F24 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.NumLock">
<summary>The Num Lock key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Scroll">
<summary>The Scroll Lock key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.LeftShift">
<summary>The left Shift key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.RightShift">
<summary>The right Shift key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.LeftCtrl">
<summary>The left CTRL key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.RightCtrl">
<summary>The right CTRL key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.LeftAlt">
<summary>The left ALT key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.RightAlt">
<summary>The right ALT key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.BrowserBack">
<summary>The Browser Back key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.BrowserForward">
<summary>The Browser Forward key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.BrowserRefresh">
<summary>The Browser Refresh key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.BrowserStop">
<summary>The Browser Stop key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.BrowserSearch">
<summary>The Browser Search key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.BrowserFavorites">
<summary>The Browser Favorites key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.BrowserHome">
<summary>The Browser Home key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.VolumeMute">
<summary>The Volume Mute key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.VolumeDown">
<summary>The Volume Down key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.VolumeUp">
<summary>The Volume Up key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.MediaNextTrack">
<summary>The Media Next Track key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.MediaPreviousTrack">
<summary>The Media Previous Track key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.MediaStop">
<summary>The Media Stop key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.MediaPlayPause">
<summary>The Media Play Pause key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.LaunchMail">
<summary>The Launch Mail key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.SelectMedia">
<summary>The Select Media key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.LaunchApplication1">
<summary>The Launch Application1 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.LaunchApplication2">
<summary>The Launch Application2 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Oem1">
<summary>The OEM 1 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.OemSemicolon">
<summary>The OEM Semicolon key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.OemPlus">
<summary>The OEM Addition key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.OemComma">
<summary>The OEM Comma key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.OemMinus">
<summary>The OEM Minus key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.OemPeriod">
<summary>The OEM Period key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Oem2">
<summary>The OEM 2 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.OemQuestion">
<summary>The OEM Question key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Oem3">
<summary>The OEM 3 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.OemTilde">
<summary>The OEM Tilde key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.AbntC1">
<summary>The ABNT_C1 (Brazilian) key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.AbntC2">
<summary>The ABNT_C2 (Brazilian) key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Oem4">
<summary>The OEM 4 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.OemOpenBrackets">
<summary>The OEM Open Brackets key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Oem5">
<summary>The OEM 5 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.OemPipe">
<summary>The OEM Pipe key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Oem6">
<summary>The OEM 6 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.OemCloseBrackets">
<summary>The OEM Close Brackets key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Oem7">
<summary>The OEM 7 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.OemQuotes">
<summary>The OEM Quotes key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Oem8">
<summary>The OEM 8 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Oem102">
<summary>The OEM 102 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.OemBackslash">
<summary>The OEM Backslash key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.ImeProcessed">
<summary>A special key masking the real key being processed by an IME.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.System">
<summary>A special key masking the real key being processed as a system key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.OemAttn">
<summary>The OEM ATTN key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.DbeAlphanumeric">
<summary>The DBE_ALPHANUMERIC key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.OemFinish">
<summary>The OEM FINISH key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.DbeKatakana">
<summary>The DBE_KATAKANA key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.OemCopy">
<summary>The OEM COPY key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.DbeHiragana">
<summary>The DBE_HIRAGANA key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.OemAuto">
<summary>The OEM AUTO key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.DbeSbcsChar">
<summary>The DBE_SBCSCHAR key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.OemEnlw">
<summary>The OEM ENLW key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.DbeDbcsChar">
<summary>The DBE_DBCSCHAR key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.OemBackTab">
<summary>The OEM BACKTAB key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.DbeRoman">
<summary>The DBE_ROMAN key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Attn">
<summary>The ATTN key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.DbeNoRoman">
<summary>The DBE_NOROMAN key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.CrSel">
<summary>The CRSEL key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.DbeEnterWordRegisterMode">
<summary>The DBE_ENTERWORDREGISTERMODE key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.ExSel">
<summary>The EXSEL key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.DbeEnterImeConfigureMode">
<summary>The DBE_ENTERIMECONFIGMODE key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.EraseEof">
<summary>The ERASE EOF key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.DbeFlushString">
<summary>The DBE_FLUSHSTRING key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Play">
<summary>The PLAY key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.DbeCodeInput">
<summary>The DBE_CODEINPUT key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Zoom">
<summary>The ZOOM key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.DbeNoCodeInput">
<summary>The DBE_NOCODEINPUT key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.NoName">
<summary>A constant reserved for future use.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.DbeDetermineString">
<summary>The DBE_DETERMINESTRING key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.Pa1">
<summary>The PA1 key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.DbeEnterDialogConversionMode">
<summary>The DBE_ENTERDLGCONVERSIONMODE key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.OemClear">
<summary>The OEM Clear key.</summary>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Keys.DeadCharProcessed">
<summary>The key is used with another key to create a single combined character.</summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.GetLabel(System.String)">
 <summary>
 Represents a Label control, that shows a text, a hyper link, an image or a graphic to the user.
 Use the Text property to set the text displayed by the label. You can also use the Append methods to add formatted text to the label.
 Use the AppendLink method to add a Hyper link to the label.
 Use the Image property to load an image from a file and display it in the label.
 Use the Add methods to add geometric shapes to the label.
 You can use the form designer to add a label to the form by dragging it from the toolbox.
 It is also possible to use the Form.AddLabel method to create a new label and add it to the form at runtime.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.GetText(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the text that is displayed on the label
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.GetImage(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the path of the image that is displayed on the label
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AppendFormatted(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end of the current label with the given formats.
 </summary>
 <param name="text">The text to add to the label</param>
 <param name="fontName">The name of the font to apply on the text. Send an empty string to use the current label font</param>
 <param name="fontSize">The font size of the text. Send 0 to use the current label font size</param>
 <param name="isBold">True to use a bold font, False otherwise. Send an empty string to use the current label FontBold value.</param>
 <param name="isItalic">True to use an italic font, False otherwise. Send an empty string to use the current label FontItalic value.</param>
 <param name="isUnderlined">True to draw aline under the text, False otherwise. Send an empty string to use the current label Underlined value.</param>
 <param name="foreColor">The color of the text. Send Colors.None to use the current label foreColor.</param>
 <param name="backColor">The background color of the text. Send Colors.None to use the current label backColor.</param>
 <param name="url">The address to navigate to. Send empty string to view a normal text, otherwise the formated text will be viewed as a hyper link that opens the given url.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AppendWithFontName(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end of the current label with the given font name.
 </summary>
 <param name="text">The text to add to the label</param>
 <param name="fontName">The name of the font to apply on the text. Send an empty string to use the current label font</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AppendWithFontSize(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end of the current label with the given font size.
 </summary>
 <param name="text">The text to add to the label</param>
 <param name="fontSize">The font size of the text. Send 0 to use the current label font size.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AppendWithFontNameAndSize(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end of the current label with the given font name and size.
 </summary>
 <param name="text">The text to add to the label</param>
 <param name="fontName">The name of the font to apply on the text. Send an empty string to use the current label font</param>
 <param name="fontSize">The font size of the text. Send 0 to use the current label font size</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AppendBold(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end of the current label with a bold font.
 </summary>
 <param name="text">The text to add to the label</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AppendItalic(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end of the current label with an italic font.
 </summary>
 <param name="text">The text to add to the label</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AppendBoldItalic(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end of the current label with a bold and italic font.
 </summary>
 <param name="text">The text to add to the label</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AppendUnderlined(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end of the current label with a line drawn under it.
 </summary>
 <param name="text">The text to add to the label</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AppendWithFontEffects(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end of the current label with the given font effects.
 </summary>
 <param name="text">The text to add to the label</param>
 <param name="isBold">True to use a bold font, False otherwise.</param>
 <param name="isItalic">True to use an italic font, False otherwise.</param>
 <param name="isUnderlined">True to draw aline under the text, False otherwise.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AppendWithFont(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end of the current label with the given font properties.
 </summary>
 <param name="text">The text to add to the label</param>
 <param name="fontName">The name of the font to apply on the text. Send an empty string to use the current label font</param>
 <param name="fontSize">The font size of the text. Send 0 to use the current label font size</param>
 <param name="isBold">True to use a bold font, False otherwise.</param>
 <param name="isItalic">True to use an italic font, False otherwise.</param>
 <param name="isUnderlined">True to draw aline under the text, False otherwise.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AppendWithForeColor(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end of the current label with the given for color.
 </summary>
 <param name="text">The text to add to the label</param>
 <param name="foreColor">The color of the text. Send Colors.None to use the current label foreColor.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AppendWithBackColor(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end of the current label with the given back color.
 </summary>
 <param name="text">The text to add to the label</param>
 <param name="backColor">The background color of the text. Send Colors.None to use the current label backColor.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AppendWithColors(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end of the current label with the given fore and back colors.
 </summary>
 <param name="text">The text to add to the label</param>
 <param name="foreColor">The color of the text. Send Colors.None to use the current label foreColor.</param>
 <param name="backColor">The background color of the text. Send Colors.None to use the current label backColor.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AppendLink(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end of the current label and formates it as a hyper link that opens the given url.
 </summary>
 <param name="text">The text to add to the label</param>
 <param name="url">The address to navigate to. Send empty string to view a normal text, otherwise the formated text will be viewed as a hyper link that opens the given url.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AppendBoldLink(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end of the current label with a bold font and formates it as a hyper link that opens the given url.
 </summary>
 <param name="text">The text to add to the label</param>
 <param name="url">The address to navigate to. Send empty string to view a normal text, otherwise the formated text will be viewed as a hyper link that opens the given url.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AppendItalicLink(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end of the current label with an italic font and formates it as a hyper link that opens the given url.
 </summary>
 <param name="text">The text to add to the label</param>
 <param name="url">The address to navigate to. Send empty string to view a normal text, otherwise the formated text will be viewed as a hyper link that opens the given url.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AppendBoldItalicLink(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end of the current label with a bold and italic font and formates it as a hyper link that opens the given url.
 </summary>
 <param name="text">The text to add to the label</param>
 <param name="url">The address to navigate to. Use an empty string to view a normal text, otherwise the formated text will be viewed as a hyper link that opens the given url.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.Append(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end of the current label.
 </summary>
 <param name="text">The text to add to the label</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AppendLine(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end of the current label then inserts a new line.
 </summary>
 <param name="text">The text to add to the label</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.GetUnderlined(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets whether or not to draw a line under the text.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.GetWordWrap(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets whether or not to the text will be continue on the next line if it exceeds the width of the control.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AddGeometricPath(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Draws the shape defined by GeometricPath on the label
 </summary>
 <param name="penColor">The color used to draw the shape outline</param>
 <param name="penWidth">The width of the shape outline</param>
 <param name="brushColor">The color used to fill the shape</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AddRectangle(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Draws a rectangle shape with the specified width and height on the current label..
 Note that the label can contain only one shape, but you can add many shapes to the GeometricPath then use the Label.AddGeometricPath to add them as a combined shape to the label.
 </summary>
 <param name="width">The width of the rectangle shape.</param>
 <param name="height">The height of the rectangle shape.</param>
 <param name="penColor">The color used to draw the shape outline</param>
 <param name="penWidth">The width of the shape outline</param>
 <param name="brushColor">The color used to fill the shape</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AddEllipse(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Draws an ellipse shape with the specified width and height on the currentLabel.
 Note that the label can contain only one shape, but you can add many shapes to the GeometricPath then use the Label.AddGeometricPath to add them as a combined shape to the label.
 </summary>
 <param name="width">The width of the ellipse shape.</param>
 <param name="height">The height of the ellipse shape.</param>
 <param name="penColor">The color used to draw the shape outline</param>
 <param name="penWidth">The width of the shape outline</param>
 <param name="brushColor">The color used to fill the shape</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AddTriangle(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Draws a triangle shape represented by the specified points on the current label.
 Note that the label can contain only one shape, but you can add many shapes to the GeometricPath then use the Label.AddGeometricPath to add them as a combined shape to the label.
 </summary>
 <param name="x1">The x co-ordinate of the first point.</param>
 <param name="y1">The y co-ordinate of the first point.</param>
 <param name="x2">The x co-ordinate of the second point.</param>
 <param name="y2">The y co-ordinate of the second point.</param>
 <param name="x3">The x co-ordinate of the third point.</param>
 <param name="y3">The y co-ordinate of the third point.</param>
 <param name="penColor">The color used to draw the shape outline</param>
 <param name="penWidth">The width of the shape outline</param>
 <param name="brushColor">The color used to fill the shape</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AddPolygon(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Draws a polygon shape represented by the given points array on the current label.       
 Note that the label can contain only one shape, but you can add many shapes to the GeometricPath then use the Label.AddGeometricPath to add them as a combined shape to the label.
 </summary>
 <param name="pointsArr">An array of points representing the heads of the polygn. Each item in this array is an array containing the x and y of the point.</param>
 <param name="penColor">The color used to draw the shape outline</param>
 <param name="penWidth">The width of the shape outline</param>
 <param name="brushColor">The color used to fill the shape</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Label.AddLine(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Draws a line between the specified two points on the current label.
 Note that the label can contain only one shape, but you can add many shapes to the GeometricPath then use the Label.AddGeometricPath to add them as a combined shape to the label.
 </summary>
 <param name="x1">The x co-ordinate of the first point.</param>
 <param name="y1">The y co-ordinate of the first point.''' </param>
 <param name="x2">The x co-ordinate of the second point.</param>
 <param name="y2">The y co-ordinate of the second point.</param>
 <param name="penColor">The color used to draw the shape outline</param>
 <param name="penWidth">The width of the shape outline</param>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.ListBox">
 <summary>
 Represents a ListBox control, which shows a list of items to the user to select one of them.
 You can use the form designer to add a list box to the form by dragging it from the toolbox.
 It is also possible to use the Form.AddListBox method to create a new list box and add it to the form at runtime.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ListBox.GetItemsCount(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the count of the items in the ListBox
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ListBox.GetItems(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets an array containing the items of the ListBox
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ListBox.GetSelectedItem(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the item that is curruntly selected in the ListBox
 </summary>
 <remarks>This property returns empty string if there is no item selected.
 But some there can ba a selected item that displays an empty string!
 So, use the SelectedIndex property if you want to distinguish between the two cases.
 If you set the selectedItem to a value that doesn't existed in the list, 
 no item will be selected.
 </remarks>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ListBox.GetSelectedIndex(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the index of the selected item in the ListBox. 
 Zero indicates that no item is selected.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ListBox.GetItemAt(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Returns the item that exists in the given index in the list.
 </summary>
 <param name="index">
 The index of the item. It should be greater than zero and not exceed the count of the items,
 otherwise, this method will return an empty string.
 </param>
 <returns>the value of the item</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ListBox.SetItemAt(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Sets the value of the item that exists in the given index in the list.
 </summary>
 <param name="index">The index of the item. It should be greater than zero and not exceed the count of the items.</param>
 <param name="value">the value to set to the item</param>
 <returns>True if the item is modified, otherwise False.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ListBox.AddItem(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds an item to the end of the list.
 </summary>
 <param name="value">The item you want to add to the list. You can send an array to add all its items</param>
 <returns>the index of the newly added item, or 0 if the operation failed.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ListBox.AddItemAt(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given item to the list at the given index.
 </summary>
 <param name="value">the item you want to add to the list. You can send an array to add all its items</param>
 <param name="index">The index you want to add the item at. The value of this index must be greater that 0 and less that list items count + 1, otherwise the item will not be added.</param>
 <returns>True is the item is successfully added at the given index, otherwise False.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ListBox.RemoveItem(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Searches for the given value in the list, and removes the first found item.
 </summary>
 <param name="value">the item you want to remove. You can send an array to remove all its items</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ListBox.RemoveAllItems(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Reomves all the items from the listbox
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ListBox.RemoveItemAt(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Removes the list item that exists at the given index
 </summary>
 <param name="index">The index of the item you want to remove</param>
 <returns>True if the item id removd, otherwise False.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ListBox.ContainsItem(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Checkes whether or not the given item exists in the list.
 </summary>
 <param name="value">The value of the item to search for.</param>
 <returns>True if the item found, or False otherwise.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ListBox.FindItem(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Returns the index of the given item if it esists in the list, otherwise retruns 0.
 </summary>
 <param name="value">The item you want to find</param>
 <returns>the index of the item if found, or 0 otherwise</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ListBox.FindItemAt(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Returns the index of the given item if it esists in the list in the given index range, otherwise retruns 0.
 </summary>
 <param name="value">The item you want to find.</param>
 <param name="startIndex">The array index the search starts at.</param>
 <param name="endIndex">The array index the search ends at. If endIndex is less than startIndex, the search direction will be reversed to find the last index of the item.</param>
 <returns>the index of the item if found, or 0 otherwise.</returns>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.ListBox.OnSelection">
 <summary>
 This event is fired when the selected item in the list is changed.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.MainMenu">
 <summary>
 Represents the Menu control, which shows menu items on a bar, so the user can click any of them to drop down a list of sub menu items.
 The form designer doesn't supoport adding a main menu at design time, but you can use the Form.AddMainMenu method to add it in runtime.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MainMenu.AddItem(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a menu item to the current menu.
 </summary>
 <param name="itemName">The name of the new menu item</param>
 <param name="text">The title of the menu item</param>
 <param name="shortcut">The keyboard shortcut keys, like Ctrl+N, or use "" if there is no shortcut.</param>
 <returns>The menu item that have been added.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MainMenu.RemoveItem(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Removes a menu item from the current menu.
 </summary>
 <param name="itemName">The name of the new menu item</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MainMenu.GetMenuItems(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Returns an array containing the child menu items of the current menu.
 </summary>
 <returns>an array of menu items</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.GetAbs(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the absolute value of the current number.  For example, -32.233 will return 32.233.
 </summary>
 <returns>The absolute value of the current number.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.GetCeiling(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Returns the smallest integer that is greater than or equal to the argument.  It rounds up the integer value.
 For example, 32.233 will return 33. Also, 44 will return 44.
 </summary>
 <returns>
 The ceiling value of the current number.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.GetFloor(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Returns the largest integer that is less than or equal to the argument.  It rounds down the integer value.
 For example, 32.233 will return 32. Also, 44 will return 44.
 </summary>
 <returns>
 The floor value of the current number.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.GetNaturalLog(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the natural logarithm value of the current number.
 </summary>
 <returns>
 The natural log value of the current number.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.GetLog(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the logarithm (base 10) value of the current number.
 </summary>
 <returns>
 The log value of the current number
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.GetCos(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the cosine of the current angle in radians.
 </summary>
 <returns>
 The cosine of the current angle.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.GetSin(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the sine of the current angle in radians.
 </summary>
 <returns>
 The sine of the current angle
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.GetTan(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the tangent of the current angle in radians.
 </summary>
 <returns>
 The tangent of the current angle.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.GetArcSin(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the angle in radians for the current sin value.
 </summary>
 <returns>
 The angle (in radians) for the current sine Value.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.GetArcCos(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the angle in radians for the current cosine value.
 </summary>
 <returns>
 The angle (in radians) for the current cosine Value.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.GetArcTan(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the angle in radians for the current tangent value.
 </summary>
 <returns>
 The angle (in radians) for the current tangent Value.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.GetDegrees(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts the current angle from radians to degrees.
 </summary>
 <returns>
 The converted angle in degrees.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.GetRadians(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts the current angle from degrees to radians.
 </summary>
 <returns>
 The converted angle in radians.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.GetSquareRoot(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the square root of the current number.
 </summary>
 <returns>
 The square root value of the current number.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.Power(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Raises the current number to the specified power.
 </summary>
 <param name="exponent">
 The power to raise the base number.
 </param>
 <returns>
 The base number raised to the specified exponent.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.GetRound(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Rounds the current number to the nearest integer.  For example 32.233 will be rounded to 32.0 while 
 32.566 will be rounded to 33.
 </summary>
 <returns>
 The rounded value of the current number.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.Round(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Rounds a current number to the given decimal places.
 </summary>
 <param name="decimalPlaces">the number of decimal places to keep in the number</param>
 <returns>
 The rounded value of the current number.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.Remainder(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Divides the first number by the second and returns the remainder.
 Note that you can directly use the Mod operator to get the same result.
 </summary>
 <param name="divisor">
 The number that divides. It can be positive or negative, but it can't be zero, otherwise this methodd will caause an error.
 </param>
 <returns>
 The remainder after the division. It can be positive, negative or zero.
 An example of a negative remainder is Remaibder(-10, -3) which returns -1, because
 -10 = -3 * 3 - 1
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.GetRandom(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets a random number between 1 and the specified maxNumber (inclusive).
 </summary>
 <returns>
 A Random number that is less than or equal to the specified max.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.ToDate(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date from the current ticks value. Note that the second contains 10 milion ticks.
 </summary>
 <returns>a new date.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.ToDuration(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new TimeSpan from the current ticks value. Note that the second contains 10 milion ticks.
 </summary>
 <returns>a new duration</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.ToChar(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the character that crossponds to the current Unicode value.
 </summary>
 <returns>the character of the current Unicode value</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.GetHex(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts the current decimal number to its hexadecimal representaion.
 </summary>
 <returns>the hexadecimal representaion of the number</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MathEx.ToDecimal(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts the current hexadecimal number to a decimal number. 
 You can use the Math.Hex method to convert a decimal number to a hexadecimal number.
 </summary>
 <returns>The decimal value the hexa number if it is valid, or an empty string otherwise.</returns>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.MenuItem">
 <summary>
 Represents the MenuItem control, which shows a menuItem on the main menu bar or on the dropdown list of a parent manuItem.
 The user can click the menu item to perform the task you programmed in the OnClick event handler.
 You can also set the Checkable property to True to allow the user to check or uncheck the menu item, hence you can use the Checked property and the OnCheck event to respond the user choices.
 The form designer doesn't supoport adding menu items at design time, but you can use the MainMenu.AddItem method to add an item to the main menu, or use the MenuItem.AddItem to add an item to a pearent menu item.
 You can also use the MenuItem.AddSeparator to add a separator line to the menu item.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MenuItem.AddItem(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a sub menu item to the current menu item
 </summary>
 <param name="itemName">The name of the new sub item</param>
 <param name="text">The title of the sub menu item</param>
 <param name="shortcut">The keyboard shortcut keys, like Ctrl+N</param>
 <returns>The menu item that have been added.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MenuItem.RemoveItem(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Removes a sub menu item from the current menu item.
 </summary>
 <param name="itemName">The name of the new menu item</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MenuItem.AddSeparator(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds a separator line betwen menu items
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MenuItem.GetCheckable(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 When it is True, user can interact with the control.
 When it is False,  the control is disabled, and user can't interact with it.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MenuItem.GetChecked(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 When True, the menu item is checked.
 When False, the menu item is unchecked.
 Set the Checkable property to True, to allow the user to check the menu item.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.MenuItem.GetMenuItems(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Returns as array containing the child menu items of the current menu item.
 Separators will not be included.
 </summary>
 <returns>an array of menu items</returns>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.MenuItem.OnClick">
 <summary>
 Fired when user clicks the menu item by the left mouse button.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.MenuItem.OnOpen">
 <summary>
 Fired when the submenu is opened.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.MenuItem.OnCheck">
 <summary>
 Fired when the checked state is changed.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.ProgressBar">
 <summary>
 Represents the ProgressBar control, that indicates how much of the task has done.
 Use the Minimum and Maximun properties to set the progress range, and use the Value property to set the current progress.
 You can use the form designer to add a progress bar to the form by dragging it from the toolbox.
 It is also possible to use the Form.AddProgressBar method to create a new progress bar and add it to the form at runtime.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ProgressBar.GetValue(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the progress value in current ProgressBar
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ProgressBar.GetMinimum(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the progress minimum value in current ProgressBar. The default value is 0.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ProgressBar.GetMaximum(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the progress maximum value in current ProgressBar. The default value is 100.
 If you set the max value to 0, this will mean you don't know when the progress will end (indeterminate), so, it will show an infinitly moving marquee.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.RadioButton">
 Represents a RadioButton control, that the user can check or uncheck.
 You can use the Checked property and OnCheck event to respond to the user choices.
 You can use the form designer to add a radio button to the form by dragging it from the toolbox.
 It is also possible to use the Form.AddRadioButton method to create a new radio button and add it to the form at runtime.
 Radio buttons work togethor as a group, where each group can contain only one checked radio button. 
 By default, all radio buttons you add to the form will be grouped together, but if you want to create more than one goup, you can group some radio buttons together by setting the GroupNmae property in each of them to the same group name.
 You can also use the form designer to group radiobuttons by selecting them, right-clicking one of the selected radio buttons, and clicking the Group command from the context menu.
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.RadioButton.GetText(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the text that is displayed by the RadioButton
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.RadioButton.GetGroupName(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the name of the radio buttons group. Radio buttons that belong to the same group can have only one seleected button at a time, so, if the user checks one button, the previously checked button will be unchecked.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.RadioButton.GetChecked(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 When True, the radio button is checked.
 When False, the radio button is unchecked.
 When empty string "",  the radio button is not checked nor unchecked (indeterminate state)
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.RadioButton.GetUnderlined(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets whether or not to draw a line under the text.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.RadioButton.GetWordWrap(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets whether or not to the text will be continue on the next line if it exceeds the width of the control.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.RadioButton.OnCheck">
 <summary>
 Fired when the checked state is changed.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.ScrollBar">
 <summary>
 Represents the ScrollBar control, that allows the user to scroll a value within a range.
 Use the Minimum and Maximun properties to set the scroll range, use the Value property to set the current scroll position, and use the OnScroll event to take action when the scroll position changes.
 You can use the form designer to add a scroll bar to the form by dragging it from the toolbox.
 It is also possible to use the Form.AddScrollBar method to create a new scroll bar and add it to the form at runtime.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ScrollBar.GetValue(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the value of current ScrollBar
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ScrollBar.GetMinimum(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the minimum value of the current ScrollBar. The default value is 0.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ScrollBar.GetMaximum(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the maximum value of the current ScrollBar. The default value is 100.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.ScrollBar.OnScroll">
 <summary>
 Fired when the scrollBar value changes.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.ShapesEx">
 <summary>
 The Shape object allows you to add, move and rotate shapes on the Graphics window.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ShapesEx.GetText(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the text of the shape, if it is a text object.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ShapesEx.Remove(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Removes the shape from the Graphics Window.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ShapesEx.Move(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Moves the shape to a new position.
 </summary>
 <param name="x">The x co-ordinate of the new position.</param>
 <param name="y">The y co-ordinate of the new position.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ShapesEx.Rotate(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Rotates the shape to the specified angle.
 </summary>
 <param name="angle">The angle to rotate the shape.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ShapesEx.Zoom(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Scales the shape using the specified zoom levels. Minimum is 0.1 and maximum is 20.
 </summary>
 <param name="scaleX">The x-axis zoom level.</param>
 <param name="scaleY">The y-axis zoom level.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ShapesEx.Animate(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Animates a shape to a new position.
 </summary>
 <param name="x">The x co-ordinate of the new position.</param>
 <param name="y">The y co-ordinate of the new position.</param>
 <param name="duration">The time for the animation, in milliseconds.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ShapesEx.GetLeft(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the left co-ordinate of the shape.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ShapesEx.GetTop(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the top co-ordinate of the shape.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ShapesEx.GetOpacity(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the opacity of a shape. Valid values are between 0 and 100, where 0 is completely transparent and 100 is completely opaque.
 </summary>        
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ShapesEx.Hide(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Hides the shape.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ShapesEx.Show(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Shows the shape if it is hidden.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.Slider">
 <summary>
 Represents the Slider control, that allows the user to choose a value within a range.
 Use the Minimum and Maximun properties to set the slider range, use the Value property to set the current slide position, and use the OnSlide event to take action when the slider value changes.
 You can use the form designer to add a slider to the form by dragging it from the toolbox.
 It is also possible to use the Form.AddSlider method to create a new slider and add it to the form at runtime.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Slider.GetValue(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the value of current Slider
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Slider.GetMinimum(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the minimum value of the current Slider. The default value is 0.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Slider.GetMaximum(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the maximum value of the current Slider. The default value is 100.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Slider.GetTickFrequency(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the distance between slide ticks.
 Note that you can change the tics color by using the ForeColor property, which allows you to hid the ticks by setting the ForeColor property to Colors.None or Colors.Trabsparent.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Slider.GetSnapToTick(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets whether or not the thumb movment snaps to tick marquees when the user slides it.
 Set this property to True and set the TickFrequency property to a proper value to show marquees on the slider, and force the user to slide only to marquees positions.
 The default value is False, which gives the user freedom to slide to positions between tha marquees.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Slider.GetTrackColor(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the color used to draw the track of the slider bar.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.Slider.GetThumbColor(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the color used to draw the thunb of the slider.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Slider.OnSlide">
 <summary>
 Fired when the slider value changes.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.SoundEx">
 <summary>
 The Sound object provides operations that allow the playback of sounds.  Some sample sounds are provided along with the library.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.SoundEx.Play(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>Plays the current audio.</summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.SoundEx.Resume(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Resumes playing the current audio from the position it was paused at.
 If the file hasn't not played yet, this operation will play it from start.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.SoundEx.PlayAndWait(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Plays the current audio and waits until it is finished playing.
 If the file was already paused, this operation will resume from the position where the playback was paused.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.SoundEx.Pause(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Pauses playback of the current audio.  If the file was not already playing, this operation will not do anything.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.SoundEx.Stop(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Stops playback of the current audio.  If the file was not already playing, this operation will not do anything.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.TextBox">
 <summary>
 Represents the TextBox control, which allows the user to input text.
 Use the Text property to read the text the user wrote.
 Use the OnTextInput event to intercept the text before it is written to the textbox.
 Use the OnTextChanged to take action after the text of the textbox changes.
 You can use the form designer to add a textbox to the form by dragging it from the toolbox.
 It is also possible to use the Form.AddTextBox method to create a new textbox and add it to the form at runtime.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.GetText(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the text that is displayed by the TextBox
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.GetSelectionStart(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the start pos of the selected text.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.GetSelectionLength(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the length of the selected text.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.GetSelectedText(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the selected text.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.GetCaretIndex(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the current caret pos in the TextBox.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.GetLength(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the length of the text written in the TextBox.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.GetMultiLine(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Set this property to True  to allow the user to write more than one line in the TextBox
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.Select(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Selects a part ot the text displayed in the textbox.
 </summary>
 <param name="startPos">the pos of the first character you want to select</param>
 <param name="length">the number of characters you want to select</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.SelectAll(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Selects all the text displayed in the TextBox
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.Append(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end of the TextBox
 </summary>
 <param name="text">the text that will be written at the end of the TextBox</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.AppendLine(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds the given text at the end ot the TextBox then adds a new line cahracter, so the next text will be written in a new line
 </summary>
 <param name="lineText">the text that will be written at the end of the TextBox followed by a new line character.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.AppendLines(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Appends the items of the given array as new lines in the textbox, just after the last character of the textbox
 </summary>
 <param name="lines">An array containing the lines to add to the textbox.</param>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.GetWordWrap(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets whether or not to wrap words to the next line if they exceed the textbox width.
 When set this property to False, the horizontal scroll bar will appear when any line exceeds the textbox width.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.GetUnderlined(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets whether or not to draw a line under the text.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.GetCanRedo(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Returns True if you can redo the last action on the TextBox.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.GetCanUndo(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Returns True if you can undo the last action on the TextBox.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.Redo(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Call this method to Redo the last action on the TextBox
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.Undo(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Call this method to undo the last action on the TextBox
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.Cut(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Call this method to cut the selected text from the TextBox and add it to the clibboard.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.Copy(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Call this method to copy the selected text from the TextBox to the clibboard.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextBox.Paste(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Call this method to paste the text from the clibboard to the current caret pos in the textbox.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.TextBox.OnTextChanged">
 <summary>
 Fired when the text is changed.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.TextBox.OnTextInput">
 <summary>
 Fired just before text is written to the TextBox. 
 Use Event.LastTextInput to get this text.
 Use Event.Handled = True if you want to cancel writing this text to the TexBox. 
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.TextBox.OnSelection">
 <summary>
 Fired when the selected text is changed in TextBox.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.Format(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Formats the string by replacing [1], [2], ... [n] by items from the values array.
 </summary>
 <param name="values">An array its elements will be used to replace [1], [2],... [n] strings if found in the text</param>
 <returns>The formated string after substituting [1], [2],... [n] with elements from the values array</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.GetIsNumeric(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Checks if the string contains a numeric value
 </summary>
 <returns>True if text is a number, False otherwise</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.Append(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Appends two text inputs and returns the result as another text.  This operation is particularly useful when dealing with unknown text in variables which could accidentally be treated as numbers and get added, instead of getting appended.
 </summary>
 <param name="text">
 Second part of the text to be appended.
 </param>
 <returns>
 The appended text containing both the specified parts.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.GetLength(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the length of the given text.
 </summary>
 <returns>
 The length of the given text.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.EndsWith(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets whether or not a given text ends with the specified subText.
 </summary>
 <param name="subText">
 The sub-text to search for.
 </param>
 <returns>
 True if the subtext was found at the end of the given text.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.StartsWith(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets whether or not a given text starts with the specified subText.
 </summary>
 <param name="subText">
 The sub-text to search for.
 </param>
 <returns>
 True if the subtext was found at the start of the given text.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.Contains(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets whether or not a given text contains the specified subText.
 </summary>
 <param name="subText">
 The sub-text to search for.
 </param>
 <returns>
 True if the subtext was found at any posision in the given text, or False otherwise.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.SubText(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets a sub-text from the given text.
 </summary>
 <param name="start">
 Specifies where to start from.
 </param>
 <param name="length">
 Specifies the length of the sub text.
 </param>
 <returns>
 The requested sub-text
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.SubTextToEnd(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets a sub-text from the given text from a specified position to the end.
 </summary>
 <param name="start">
 Specifies where to start from.
 </param>
 <returns>
 The requested sub-text.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.GetIndexOf(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Finds the position where a sub-text appears in the specified text.
 </summary>
 <param name="subText">the text to search for.</param>
 <param name="start">the text position to start seacting from</param>
 <param name="isBackward">True if you want to search from start back to the the first position in the text (1), or False if you want to go forward to the end of the text.</param>
 <returns>
 The position at which the sub-text appears in the specified text.  If the text doesn't appear, it returns 0.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.IndexOf(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Finds the position where a sub-text appears in the specified text.
 </summary>
 <param name="subText">the text to search for.</param>
 <param name="start">the text position to start seacting from</param>
 <param name="isBackward">True if you want to search from start back to the the first position in the text (1), or False if you want to go forward to the end of the text.</param>
 <returns>
 The position at which the sub-text appears in the specified text.  If the text doesn't appear, it returns 0.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.GetLowerCase(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts the given text to lower case.
 </summary>
 <returns>
 The lower case version of the given text.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.ToLower(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts the given text to lower case.
 </summary>
 <returns>
 The lower case version of the given text.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.GetUpperCase(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts the given text to upper case.
 </summary>
 <returns>
 The upper case version of the given text.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.ToUpper(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts the given text to upper case.
 </summary>
 <returns>
 The upper case version of the given text.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.GetCharacterAt(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets the character existing in the given posision in the text
 </summary>
 <param name="pos">The posision of the character</param>
 <returns>The character existed in the given position</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.SetCharacterAt(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Changes the char existing in the given posision to the givin value
 </summary>
 <param name="pos">The posision of the char</param>
 <returns>a new text with the char changed to the given value. The current text will not change</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.Trim(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
Removes all leading and trailing white-space characters from the given text
Wite-space chars iclude spaces, tabs, and line symbols.
 </summary>
 <returns>the trimmed string</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.GetIsEmpty(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
Returns true if the current text is empty, or returns false otherwise.
 </summary>
 <returns>True or False</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.Split(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Splits the current text at the given separator.
 </summary>
 <param name="separator">One character or more to split the text at. The separator will not appear in the result.</param>
 <param name="trim">Use True to trim white spaces from the start and end of the separated strings</param>
 <param name="removeEmpty">Use True to remove empty strings from the result</param>
 <returns>An array containing the splitted items</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.GetIsLetter(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Checks if the current text is a letter in any language.
 </summary>
 <returns>
 True in the text consists of one character and it is a letter in any language, itherwise False.
 Note that this property is meant to b used with a single character. It the text length is > 1, this method will always return false. In such case, you should use a for loop to get each charcter in the text and check it individually, if thi is what you need.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.ToDecimal(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts the current hexadecimal string to a decimal number. 
 You can use the Math.Hex method to convert a decimal number to a hexadecimal number.
 </summary>
 <returns>The decimal value the hexa number if it is valid, or an empty string otherwise.</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.PadLeft(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds spaces on the left of the current text so that its length equals the given total width. This is useful when you want to right-align texts.
 Note that if the length of the current text is greater than or egual to the given length, it will be displayed as it is and will not be trimmed.
 </summary>
 <param name="totalWidth">The desired total length of the text.</param>
 <returns>a new text that has the given total length (at least).</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.PadRight(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Adds spaces on the right of the current text so that its length equals the given total width. This is useful when you want to left-align texts.
 Note that if the length of the current text is greater than or egual to the given length, it will be displayed as it is and will not be trimmed.
 </summary>
 <param name="totalWidth">The desired total length of the text.</param>
 <returns>a new text that has the given total length (at least).</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.ToNumber(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts the current text to a number
 </summary>
 <returns>If text is numeric, returns the numeric value.
 If text contains only one character, returns the ascii code of this character
 Otherwise, returns 0.
 </returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.ToDate(Microsoft.SmallVisualBasic.Library.Primitive,Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Creates a new date from the current text if it has a valid date format for the given culture.
 </summary>
 <param name="cultureName">
 The culture name used to format the date, like "en-US" for English (United States) culture, "ar-EG" for Arabic (Egypt) culture, and "ar-SA" for Arabic (Saudi Arabia) culture.
 ''' Send an empty string "" to use the local culture of the user's system.
 </param>
 <returns>a new date or empty string</returns>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.TextEx.ToDuration(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Converts the input text to a duration if it has a valid format.
 </summary>
 <returns>If text is a valid duration, returns the the duration value.
 Otherwise, returns a 0 duration.
 </returns>
</member>
<member name="P:Microsoft.SmallVisualBasic.WinForms.Thread.InitializationDelay">
 <summary>
 Gets or sets the time in milliseconds that the main thread will be paused for, to allow the new thread to start and read the global variables.
 The default value is 10, but you can increase it if the the thread needs to read many global variables.        
 Use 0 if you don't need any delay.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.Thread.SubToRun">
 <summary>
 This is not actually an event, but when you set its handler, it will be called immediately in a new thread to allow you to use execute a task in parallel to your normal code.
 You can set this handler more than one time to create many threads, but take care not to create too many threads (at most 100 threads and the lesser the better) because that can make your system hang or block some of these threads.
 Note also that you can't pass arguments to the handler, so you will need to use global variables.
 Warning: Threads will not be created in debug mode to allow you to trace the code. In this case your program may be slower and some of its logic may not function correctly.
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.WinTimer">
 <summary>
 Represents the WinTimer control, which provides an easy way for doing something repeatedly with a constant interval between.
 Use the Interval property to set the time between ticks, and write the code you want to be executed in the OnTick event handler.
 This object differs that the Timer object, as you can add many win timers as you want to each form in the project, while there is only a single Timer object that was suitable to SB code files.
 You can't use the form designer to add Win timers to the form, but you can use the Form.AddTimer method to add a new timer to the form.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.WinTimer.GetInterval(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the interval (in milliseconds) specifying how often the timer should raise the Tick event.  
 Setting this property will start or resume the timer and tick events will be raised.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.WinTimer.Pause(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Pauses the timer. Tick events will not be raised.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.WinTimer.GetIsEnabled(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Returns false if the timer is paused, or True otherwise.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.WinTimer.Resume(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Resumes the timer from a paused state.  Tick events will now be raised.
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.WinTimer.OnTick">
 <summary>
 Fired when user releases the left mouse-button
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.WinTimer.RemoveOnTickHandler(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Removes the OnTick hamdler of the current timer.
 Ulternatively, you can set the OnTick event to Nothing to remove its handler:
 myTimer.OnTick = Nothing
 </summary>
</member>
<member name="T:Microsoft.SmallVisualBasic.WinForms.ToggleButton">
 <summary>
 Represents a ToggleButton control, that the user can check or uncheck. The toggle button looks like a bormal button, but when the user clicks it it stays down (checked), and when he clicks it again, the button returns to its normal state (unchecked)
 Use the Checked property and OnCheck event to respond to the user choices.
 You can use the form designer to add a toggle button to the form by dragging it from the toolbox.
 It is also possible to use the Form.AddToggleButton method to create a new toggle button and add it to the form at runtime.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ToggleButton.GetText(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets the test that is displayed on the toggleButton
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ToggleButton.GetUnderlined(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets whether or not to draw a line under the text.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ToggleButton.GetWordWrap(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets whether or not to the text will be continue on the next line if it exceeds the width of the control.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ToggleButton.GetIsFlat(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 Gets or sets whether or not to show the toggleButton with a flat style.
 </summary>
</member>
<member name="M:Microsoft.SmallVisualBasic.WinForms.ToggleButton.GetChecked(Microsoft.SmallVisualBasic.Library.Primitive)">
 <summary>
 When True, the toggle button is checked.
 When False, the toggle button is unchecked.
 When empty string "",  the toggle button is not checked nor unchecked (indeterminate state)
 </summary>
</member>
<member name="E:Microsoft.SmallVisualBasic.WinForms.ToggleButton.OnCheck">
 <summary>
 Fired when the checked state is changed.
 </summary>
</member>
</members>
</doc>
