<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZS</name>
    </assembly>
    <members>
        <member name="T:ZS.ZSArguments">
            <summary>
            The Arguments object provides operations to access the command-line arguments that were passed at the start of this program.
            This class has been taken from Small Basic version 0.2.
            </summary>
        </member>
        <member name="M:ZS.ZSArguments.GetArgument(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the specified argument.
            </summary>
            <param name="index">
            Index of the argument.
            </param>
            <returns>
            The command-line argument at the specified index.
            </returns>
        </member>
        <member name="P:ZS.ZSArguments.Count">
            <summary>
            Gets the number of command-line arguments passed to this program.
            </summary>
        </member>
        <member name="T:ZS.ZSCall">
            <summary>
            Use For Using Small Basic Sub As A Method.
            </summary>
        </member>
        <member name="M:ZS.ZSCall.GetValue(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets The Value Sent To Stack
            </summary>
            <param name="Name">The name of stack</param>
            <returns>Value sent </returns>
        </member>
        <member name="M:ZS.ZSCall.Return(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Return The Value to CallSub.
            </summary>
            <param name="Value">The Value To Return.</param>
        </member>
        <member name="M:ZS.ZSCall.Return2(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Return The Value to CallSubWithEvent
            </summary>
            <param name="Value">The Value To Return</param>
        </member>
        <member name="M:ZS.ZSCall.CallSub(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Calls The Sub With Args.
            </summary>
            <param name="Sub">The Sub Name</param>
            <param name="Values">The Values Of Args Seperated By ;.</param>
            <returns>The Output Send Through Return.</returns>
        </member>
        <member name="M:ZS.ZSCall.CallSubWithEvent(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Calls The Sub That Is Suscribed To Function Event With Args.
            </summary>
            <param name="Values">The Values Of Args Seperated By ;.</param>
            <returns>The Output Send Through Return2.</returns>
        </member>
        <member name="M:ZS.ZSCall.Call2(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Calls The Sub With Args.
            The Varibles decleared inside sub will be assinged with new arg value.
            A Varible by name Return value will be returned.
            </summary>
            <param name="Values">The Values Of Args Seperated By ;.</param>
            <param name="Sub">The Sub Name.</param>
            <returns>The Output Send Through Return.</returns>
        </member>
        <member name="M:ZS.ZSCall.Call3(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Calls The Sub With Args.
            The Varibles decleared inside sub will be assinged with new arg value.
            A Varible by name Return_SubName value will be returned.
            </summary>
            <param name="Values">The Values Of Args Seperated By ;.</param>
            <returns>The Output Send Through Return.</returns>
        </member>
        <member name="E:ZS.ZSCall.Function">
            <summary>
            The Event Of Sub
            </summary>
        </member>
        <member name="T:ZS.ZSControl">
            <summary>
            Extended Controls For Graphics Window.
            </summary>
        </member>
        <member name="M:ZS.ZSControl.KeyDown(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Add Key Down Event To Shape.
            </summary>
            <param name="Shape">The Shape Name</param>
            <param name="Sub">The Sub Name.</param>
        </member>
        <member name="T:ZS.ZSRegex">
            <summary>
            Regex In SB.
            </summary>
        </member>
        <member name="M:ZS.ZSRegex.IsMatch(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Matches the regex pattern in the input string and returns true if it finds a match.
            </summary>
        </member>
        <member name="M:ZS.ZSRegex.Match(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Searches the input string for the first occurrence of the regex pattern and returns the matched value.
            </summary>
        </member>
        <member name="M:ZS.ZSRegex.Replace(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Replaces all occurrences of the regex pattern in the input string with the replacement string.
            </summary>
        </member>
        <member name="M:ZS.ZSRegex.Split(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Splits the input string based on the regex pattern and returns an array of substrings.
            </summary>
        </member>
        <member name="M:ZS.ZSRegex.FindAll(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Finds all matches of the regex pattern in the input string and returns an array of matched values.
            </summary>
        </member>
        <member name="M:ZS.ZSRegex.GetGroups(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the groups captured by the regex pattern from the input string and returns an array of group values.
            </summary>
        </member>
        <member name="M:ZS.ZSRegex.CountMatches(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the number of matches found for the regex pattern in the input string.
            </summary>
        </member>
        <member name="M:ZS.ZSRegex.IsExactMatch(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Validates if the entire input string matches the regex pattern.
            </summary>
        </member>
        <member name="M:ZS.ZSRegex.StartsWith(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if the input string starts with the regex pattern.
            </summary>
        </member>
        <member name="M:ZS.ZSRegex.EndsWith(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if the input string ends with the regex pattern.
            </summary>
        </member>
        <member name="M:ZS.ZSRegex.RemoveWhitespace(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns a string that contains the input string with all whitespace removed.
            </summary>
        </member>
        <member name="M:ZS.ZSRegex.Escape(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Escapes special regex characters in the input string.
            </summary>
        </member>
        <member name="T:ZS.ZSRS">
            <summary>
            The Raylib 2D Shapes.
            </summary>
        </member>
        <member name="M:ZS.ZSRS.DrawPixel(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw a pixel.
            </summary>
            <param name="X">The X Position.</param>
            <param name="Y">The Y Position.</param>
            <param name="Colour">The Hex Value Of Colour.</param>
        </member>
        <member name="M:ZS.ZSRS.DrawLine(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw a line.
            </summary>
            <param name="Start">The X-Y position of start of line</param>
            <param name="End">The X-Y position of end of line</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawLineEx(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw a line with a specified thickness.
            </summary>
            <param name="Start">The X-Y position of the start of the line.</param>
            <param name="End">The X-Y position of the end of the line.</param>
            <param name="Thickness">The thickness of the line.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawLineBezier(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw a line using cubic-bezier curves in-out.
            </summary>
            <param name="Start">The X-Y position of the start of the line.</param>
            <param name="End">The X-Y position of the end of the line.</param>
            <param name="Thickness">The thickness of the line.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawLineStrip(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw a sequence of connected lines.
            </summary>
            <param name="Points">An array of X-Y positions for the line points.</param>
            <param name="NumPoints">The number of points in the sequence.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawCircle(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw a color-filled circle.
            </summary>
            <param name="CenterX">The X position of the center of the circle.</param>
            <param name="CenterY">The Y position of the center of the circle.</param>
            <param name="Radius">The radius of the circle.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawCircleSector(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw a piece of a circle.
            </summary>
            <param name="Center">The X-Y position of the center of the circle.</param>
            <param name="Radius">The radius of the circle sector.</param>
            <param name="StartAngle">The starting angle of the sector.</param>
            <param name="EndAngle">The ending angle of the sector.</param>
            <param name="Segments">The number of segments in the sector.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawCircleSectorLines(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw circle sector outline.
            </summary>
            <param name="Center">The X-Y position of the center of the circle.</param>
            <param name="Radius">The radius of the circle sector.</param>
            <param name="StartAngle">The starting angle of the sector.</param>
            <param name="EndAngle">The ending angle of the sector.</param>
            <param name="Segments">The number of segments in the sector.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawCircleGradient(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw a gradient-filled circle.
            </summary>
            <param name="CenterX">The X position of the center of the circle.</param>
            <param name="CenterY">The Y position of the center of the circle.</param>
            <param name="Radius">The radius of the circle.</param>
            <param name="Colour1">The Hex Value Of the first color.</param>
            <param name="Colour2">The Hex Value Of the second color.</param>
        </member>
        <member name="M:ZS.ZSRS.DrawCircleLines(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw circle outline.
            </summary>
            <param name="CenterX">The X position of the center of the circle.</param>
            <param name="CenterY">The Y position of the center of the circle.</param>
            <param name="Radius">The radius of the circle.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawEllipse(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw an ellipse.
            </summary>
            <param name="CenterX">The X position of the center of the ellipse.</param>
            <param name="CenterY">The Y position of the center of the ellipse.</param>
            <param name="RadiusH">The horizontal radius of the ellipse.</param>
            <param name="RadiusV">The vertical radius of the ellipse.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawEllipseLines(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw ellipse outline.
            </summary>
            <param name="CenterX">The X position of the center of the ellipse.</param>
            <param name="CenterY">The Y position of the center of the ellipse.</param>
            <param name="RadiusH">The horizontal radius of the ellipse.</param>
            <param name="RadiusV">The vertical radius of the ellipse.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawRing(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw a ring.
            </summary>
            <param name="Center">The X-Y position of the center of the ring.</param>
            <param name="InnerRadius">The inner radius of the ring.</param>
            <param name="OuterRadius">The outer radius of the ring.</param>
            <param name="StartAngle">The starting angle of the ring.</param>
            <param name="EndAngle">The ending angle of the ring.</param>
            <param name="Segments">The number of segments in the ring.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawRingLines(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw ring outline.
            </summary>
            <param name="Center">The X-Y position of the center of the ring.</param>
            <param name="InnerRadius">The inner radius of the ring.</param>
            <param name="OuterRadius">The outer radius of the ring.</param>
            <param name="StartAngle">The starting angle of the ring.</param>
            <param name="EndAngle">The ending angle of the ring.</param>
            <param name="Segments">The number of segments in the ring.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawRectangle(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw a color-filled rectangle.
            </summary>
            <param name="PosX">The X position of the rectangle.</param>
            <param name="PosY">The Y position of the rectangle.</param>
            <param name="Width">The width of the rectangle.</param>
            <param name="Height">The height of the rectangle.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawRectanglePro(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw a color-filled rectangle with pro parameters.
            </summary>
            <param name="Rec">The rectangle parameters (X, Y, Width, Height).</param>
            <param name="Origin">The origin point of the rectangle.</param>
            <param name="Rotation">The rotation of the rectangle.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawRectangleGradientV(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw a vertical-gradient-filled rectangle.
            </summary>
            <param name="PosX">The X position of the rectangle.</param>
            <param name="PosY">The Y position of the rectangle.</param>
            <param name="Width">The width of the rectangle.</param>
            <param name="Height">The height of the rectangle.</param>
            <param name="Colour1">The Hex Value Of the first color.</param>
            <param name="Colour2">The Hex Value Of the second color.</param>
        </member>
        <member name="M:ZS.ZSRS.DrawRectangleGradientH(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw a horizontal-gradient-filled rectangle.
            </summary>
            <param name="PosX">The X position of the rectangle.</param>
            <param name="PosY">The Y position of the rectangle.</param>
            <param name="Width">The width of the rectangle.</param>
            <param name="Height">The height of the rectangle.</param>
            <param name="Colour1">The Hex Value Of the first color.</param>
            <param name="Colour2">The Hex Value Of the second color.</param>
        </member>
        <member name="M:ZS.ZSRS.DrawRectangleGradientEx(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw a gradient-filled rectangle with custom vertex colors.
            </summary>
            <param name="Rec">The rectangle parameters (X, Y, Width, Height).</param>
            <param name="Colour1">The Hex Value Of the first vertex color.</param>
            <param name="Colour2">The Hex Value Of the second vertex color.</param>
            <param name="Colour3">The Hex Value Of the third vertex color.</param>
            <param name="Colour4">The Hex Value Of the fourth vertex color.</param>
        </member>
        <member name="M:ZS.ZSRS.DrawRectangleLines(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw rectangle outline.
            </summary>
            <param name="PosX">The X position of the rectangle.</param>
            <param name="PosY">The Y position of the rectangle.</param>
            <param name="Width">The width of the rectangle.</param>
            <param name="Height">The height of the rectangle.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawRectangleLinesEx(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw rectangle outline with extended parameters.
            </summary>
            <param name="Rec">The rectangle parameters (X, Y, Width, Height).</param>
            <param name="LineThick">The thickness of the outline.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawRectangleRounded(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw rectangle with rounded edges.
            </summary>
            <param name="Rec">The rectangle parameters (X, Y, Width, Height).</param>
            <param name="Roundness">The roundness of the rectangle edges.</param>
            <param name="Segments">The number of segments in the rounded corners.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawRectangleRoundedLines(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw rectangle with rounded edges outline.
            </summary>
            <param name="Rec">The rectangle parameters (X, Y, Width, Height).</param>
            <param name="Roundness">The roundness of the rectangle edges.</param>
            <param name="Segments">The number of segments in the rounded corners.</param>
            <param name="LineThick">The thickness of the outline.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawTriangle(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw a color-filled triangle (vertex in counter-clockwise order!).
            </summary>
            <param name="V1">The first vertex of the triangle.</param>
            <param name="V2">The second vertex of the triangle.</param>
            <param name="V3">The third vertex of the triangle.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawTriangleFan(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw a triangle fan defined by points (first vertex is the center).
            </summary>
            <param name="Points">The array of triangle fan points.</param>
            <param name="NumPoints">The number of points.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawTriangleStrip(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw a triangle strip defined by points.
            </summary>
            <param name="Points">The array of triangle strip points.</param>
            <param name="PointsCount">The number of points.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawPoly(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw a regular polygon (Vector version).
            </summary>
            <param name="Center">The center point of the polygon.</param>
            <param name="Sides">The number of sides.</param>
            <param name="Radius">The radius of the polygon.</param>
            <param name="Rotation">The rotation of the polygon.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.DrawPolyLines(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Draw a polygon outline of n sides.
            </summary>
            <param name="Center">The center point of the polygon.</param>
            <param name="Sides">The number of sides.</param>
            <param name="Radius">The radius of the polygon.</param>
            <param name="Rotation">The rotation of the polygon.</param>
            <param name="Colour">The Hex Value Of Colour</param>
        </member>
        <member name="M:ZS.ZSRS.CheckCollisionRecs(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Check collision between two rectangles.
            </summary>
            <param name="Rec1">First rectangle, provide X, Y, Width, and Height (e.g., "x-y-width-height").</param>
            <param name="Rec2">Second rectangle, provide X, Y, Width, and Height (e.g., "x-y-width-height").</param>
            <returns>True if the rectangles collide, false otherwise.</returns>
        </member>
        <member name="M:ZS.ZSRS.CheckCollisionCircles(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Check collision between two circles.
            </summary>
            <param name="Center1">Center of the first circle, provide X and Y coordinates (e.g., "x-y").</param>
            <param name="Radius1">Radius of the first circle.</param>
            <param name="Center2">Center of the second circle, provide X and Y coordinates (e.g., "x-y").</param>
            <param name="Radius2">Radius of the second circle.</param>
            <returns>True if the circles collide, false otherwise.</returns>
        </member>
        <member name="M:ZS.ZSRS.CheckCollisionCircleRec(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Check collision between a circle and a rectangle.
            </summary>
            <param name="Center">Center of the circle, provide X and Y coordinates (e.g., "x-y").</param>
            <param name="Radius">Radius of the circle.</param>
            <param name="Rec">The rectangle, provide X, Y, Width, and Height (e.g., "x-y-width-height").</param>
            <returns>True if the circle collides with the rectangle, false otherwise.</returns>
        </member>
        <member name="M:ZS.ZSRS.CheckCollisionPointRec(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Check if a point is inside a rectangle.
            </summary>
            <param name="Point">The point, provide X and Y coordinates (e.g., "x-y").</param>
            <param name="Rec">The rectangle, provide X, Y, Width, and Height (e.g., "x-y-width-height").</param>
            <returns>True if the point is inside the rectangle, false otherwise.</returns>
        </member>
        <member name="M:ZS.ZSRS.CheckCollisionPointCircle(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Check if a point is inside a circle.
            </summary>
            <param name="Point">The point, provide X and Y coordinates (e.g., "x-y").</param>
            <param name="Center">The center of the circle, provide X and Y coordinates (e.g., "x-y").</param>
            <param name="Radius">Radius of the circle.</param>
            <returns>True if the point is inside the circle, false otherwise.</returns>
        </member>
        <member name="M:ZS.ZSRS.CheckCollisionPointTriangle(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Check if a point is inside a triangle.
            </summary>
            <param name="Point">The point, provide X and Y coordinates (e.g., "x-y").</param>
            <param name="P1">The first vertex of the triangle, provide X and Y coordinates (e.g., "x-y").</param>
            <param name="P2">The second vertex of the triangle, provide X and Y coordinates (e.g., "x-y").</param>
            <param name="P3">The third vertex of the triangle, provide X and Y coordinates (e.g., "x-y").</param>
            <returns>True if the point is inside the triangle, false otherwise.</returns>
        </member>
        <member name="M:ZS.ZSRS.GetCollisionRec(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Get the collision rectangle for two rectangles.
            </summary>
            <param name="Rec1">First rectangle, provide X, Y, Width, and Height (e.g., "x-y-width-height").</param>
            <param name="Rec2">Second rectangle, provide X, Y, Width, and Height (e.g., "x-y-width-height").</param>
            <returns>The collision rectangle as "x-y-width-height".</returns>
        </member>
        <member name="T:ZS.ZSZip">
            <summary>
            The Class for Zip and UnZip of Files.
            </summary>
        </member>
        <member name="M:ZS.ZSZip.CreateZip(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Create a new ZIP archive.
            </summary>
            <param name="Name">The identifier name for the ZIP archive.</param>
            <param name="Path">The path where the ZIP archive will be saved.</param>
            <returns>The name of the ZIP archive created.</returns>
        </member>
        <member name="M:ZS.ZSZip.OpenZip(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Open a ZIP archive.
            </summary>
            <param name="Name">The identifier name for the ZIP archive.</param>
            <param name="Path">The path where the ZIP archive is.</param>
            <returns>The name of the ZIP archive.</returns>
        </member>
        <member name="M:ZS.ZSZip.AddFile(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Add a file to the ZIP archive.
            </summary>
            <param name="Name">The name of the ZIP archive to add the file to.</param>
            <param name="FilePath">The file path of the file to add to the ZIP archive.</param>
        </member>
        <member name="M:ZS.ZSZip.CloseZip(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Close the ZIP archive and save it.
            </summary>
            <param name="Name">The name of the ZIP archive to close.</param>
        </member>
        <member name="M:ZS.ZSZip.ExtractZip(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Extract a ZIP archive to a specified directory.
            </summary>
            <param name="ZipPath">The path to the ZIP file to extract.</param>
            <param name="ExtractPath">The directory where files should be extracted.</param>
        </member>
        <member name="M:ZS.ZSZip.ListFiles(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            List all files currently added to a ZIP archive.
            </summary>
            <param name="Name">The name of the ZIP archive.</param>
            <returns>A string containing all file names in the ZIP archive.</returns>
        </member>
        <member name="M:ZS.ZSZip.CreateFromDir(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
             <summary>
             Make A Zip file from a directory whole content will be added.
             </summary>
             <param name="SourceDir">The Directory Path.</param>
             <param name="ZipName">The Zip Name to be created.</param>
             <param name="Level">Compression Level :
             0 = Fastest.
             1 = No Compression.
             2 = Optimal.
            </param>
             <param name="Includebase">True or False will you want they folder itself then its content into zip or the content of folder directly.</param>
        </member>
        <member name="T:ZS.ZSCamera2D">
            <summary>
            The Object For Creating 2D Camera.
            </summary>
        </member>
        <member name="M:ZS.ZSCamera2D.CreateCamera(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Create A 2D Camera.
            </summary>
            <param name="Name">The Camera Name.</param>
            <param name="Offset">Determines where the camera's target appears on the screen sperated by "-" ex: X-Y</param>
            <param name="Target">Target controls which part of the 2D world is visible, allowing for panning across the scene. Seprated by "-" ex: X-Y.</param>
            <param name="Rotation">Rotation adjusts the angle of the camera's view, with clockwise and counterclockwise rotation altering the scene's orientation.</param>
            <param name="Zoom">Determines the scale of the camera's view</param>
            <returns>The Camera Name.</returns>
        </member>
        <member name="M:ZS.ZSCamera2D.SetOffset(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sets The Offset Of Camera. 
            </summary>
            <param name="Name">The Camera Name.</param>
            <param name="Offset">The Offset Value Seprated By "-" X-Y</param>
        </member>
        <member name="M:ZS.ZSCamera2D.SetTarget(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sets The Target Of Camera. 
            </summary>
            <param name="Name">The Camera Name.</param>
            <param name="Target">The Target Value Seprated By "-" X-Y</param>
        </member>
        <member name="M:ZS.ZSCamera2D.SetRotation(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sets The Rotation Of Camera. 
            </summary>
            <param name="Name">The Camera Name.</param>
            <param name="Rotation">The Rotation Value.</param>
        </member>
        <member name="M:ZS.ZSCamera2D.SetZoom(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sets The Zoom Of Camera. 
            </summary>
            <param name="Name">The Camera Name.</param>
            <param name="Zoom">The Zoom Value.</param>
        </member>
        <member name="M:ZS.ZSCamera2D.GetOffsetX(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets The Offset X.
            </summary>
            <param name="Name">The Camera Name.</param>
            <returns>The Offset</returns>
        </member>
        <member name="M:ZS.ZSCamera2D.GetOffsetY(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets The Offset Y.
            </summary>
            <param name="Name">The Camera Name.</param>
            <returns>The Offset</returns>
        </member>
        <member name="M:ZS.ZSCamera2D.GetTargetX(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets The Target X.
            </summary>
            <param name="Name">The Camera Name.</param>
            <returns>The Target</returns>
        </member>
        <member name="M:ZS.ZSCamera2D.GetTargetY(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets The Target Y.
            </summary>
            <param name="Name">The Camera Name.</param>
            <returns>The Target</returns>
        </member>
        <member name="M:ZS.ZSCamera2D.GetRotation(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets The Rotation.
            </summary>
            <param name="Name">The Camera Name.</param>
            <returns>The Rotation</returns>
        </member>
        <member name="M:ZS.ZSCamera2D.GetZoom(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets The Zoom.
            </summary>
            <param name="Name">The Camera Name.</param>
            <returns>The Zoom</returns>
        </member>
        <member name="M:ZS.ZSCamera2D.Help">
            <summary>
            Provides detailed information on the properties of a Camera2D object in Raylib.
            
                offset :
            
             	  This property defines the 2D vector representing the camera's offset from the origin (0,0).
                  The offset determines the point within the window where the camera's target will be centered.
                  For example, setting the offset to (0, 0) will place the camera's focus point at the top-left corner of the screen,
                  whereas (screenWidth/2, screenHeight/2) centers the focus point in the middle of the window.
                  This property is essential for positioning the camera’s view within the rendering window.
                
                target :
                  
                  The target property specifies the 2D point that the camera is centered on, represented as a Vector2.
                  It controls what part of the 2D world is visible on the screen. By changing the target, 
                  you can pan the camera across the scene, effectively moving the view.
                  The relationship between the offset and the target determines which part of the world is rendered.
                
                rotation :
                  
                  This property, a float, defines the rotation angle of the camera in degrees.
                  A rotation of 0 means no rotation, while positive values rotate the camera clockwise, and negative values rotate it counterclockwise.
                  Rotation affects how the entire scene is viewed, making it possible to achieve effects like tilting or spinning the camera’s view.
                  This property is particularly useful in 2D games where dynamic camera angles are desired.
                
                zoom :
                  
                  The zoom property, also a float, determines the scale of the camera's view.
                  A zoom value of 1.0 means no zoom, values greater than 1.0 zoom in, and values less than 1.0 zoom out.
                  Zooming in magnifies the view, making objects appear larger, while zooming out provides a wider field of view.
                  The zoom property is crucial for creating effects such as magnifying specific parts of the scene or providing an overview of a larger area.
            </summary>
        </member>
        <member name="T:ZS.ZSCamera3D">
            <summary>
            The Object For Creating 2D Camera And Modifing.
            </summary>
        </member>
        <member name="M:ZS.ZSCamera3D.CreateCamera(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Creates a new camera
            All paramaters like position , target and up are sperated with "-" for cordinates
            like this "X-Y-Z"
            
            Camera Type : 
            CAMERA_PERSPECTIVE: Objects appear smaller as they are further from the camera, simulating depth.
            CAMERA_ORTHOGRAPHIC: Objects maintain the same size regardless of their distance from the camera, commonly used for 2D-style games in a 3D space.
            </summary>
            <param name="Name">A name for camera that will be used in feature</param>
            <param name="Position">defines the position x-y-z of the camera in the 3D world.</param>
            <param name="Target">defines the point x-y-z in the 3D world that the camera is looking at.</param>
            <param name="Up">defines the "up" direction for the camera. It helps orient the camera and define which way is up.</param>
            <param name="Fovy">defines the vertical field of view angle, typically measured in degrees. It determines how wide the camera's view is.</param>
            <param name="Type">determines the projection type of the camera, 1 for perspective and 2 for orthographic.</param>
            <returns>The Name Of Camera.</returns>
        </member>
        <member name="M:ZS.ZSCamera3D.SetPosition(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sets the Position of camera.
            </summary>
            <param name="Name">The camera name</param>
            <param name="Position">The position in x-y-z seperated by "-"</param>
        </member>
        <member name="M:ZS.ZSCamera3D.SetTarget(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sets the target of camera.
            </summary>
            <param name="Name">The camera name</param>
            <param name="Target">The target in x-y-z seperated by "-"</param>
        </member>
        <member name="M:ZS.ZSCamera3D.SetUp(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sets the Up of camera.
            </summary>
            <param name="Name">The camera name</param>
            <param name="Up">The Up in x-y-z seperated by "-"</param>
        </member>
        <member name="M:ZS.ZSCamera3D.Setfovy(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sets the fovy of camera.
            </summary>
            <param name="Name">The camera name</param>
            <param name="fovy">The fovy </param>
        </member>
        <member name="M:ZS.ZSCamera3D.SetType(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sets the Type of camera.
            </summary>
            <param name="Name">The camera name</param>
            <param name="Type">The Type of camera 1 for perspective and 2 for orthographic.</param>
        </member>
        <member name="M:ZS.ZSCamera3D.GetPosition(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the position of a camera to an array.
            array[1] = X-Coordinate.
            array[2] = Y-Coordinate.
            array[3] = Z-Coordinate.
            </summary>
            <param name="Name">The name of camera</param>
            <returns>The Array</returns>
        </member>
        <member name="M:ZS.ZSCamera3D.GetTarget(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the target of a camera to an array.
            array[1] = X-Coordinate.
            array[2] = Y-Coordinate.
            array[3] = Z-Coordinate.
            </summary>
            <param name="Name">The name of camera</param>
            <returns>The Array</returns>
        </member>
        <member name="M:ZS.ZSCamera3D.GetUp(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the up of a camera to an array.
            array[1] = X-Coordinate.
            array[2] = Y-Coordinate.
            array[3] = Z-Coordinate.
            </summary>
            <param name="Name">The name of camera</param>
            <returns>The Array</returns>
        </member>
        <member name="M:ZS.ZSCamera3D.Getfovy(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets The fovy of camera.
            </summary>
            <param name="Name">The camera Name.</param>
            <returns>The fovy</returns>
        </member>
        <member name="M:ZS.ZSCamera3D.GetType(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the type of camera.
            </summary>
            <param name="Name">The camera name.</param>
            <returns>Type as string.</returns>
        </member>
        <member name="M:ZS.ZSCamera3D.Help">
            <summary>
            Provides detailed information on the properties of a Camera3D object in Raylib.
            
                position :
                  
                  This property represents the position of the camera in 3D space, defined as a Vector3.
                  The position determines where the camera is located within the world. 
                  For example, setting the position to (0, 10, 10) would place the camera 10 units 
                  above the origin along the Y-axis and 10 units in front of the origin along the Z-axis.
                  The position is essential for determining the viewpoint from which the scene is rendered.
                
                target :
                  
                  This property defines the point in 3D space that the camera is aimed at,
                  specified as a Vector3. The target controls the direction in which the camera is looking.
                  If the target is set to (0, 0, 0), the camera will point directly at the origin. 
                  Changing the target allows you to rotate the camera to view different parts of the scene.
                  The relationship between the position and the target determines the camera's viewing angle.
                
                up :
                  
                  The up vector of the camera, also represented as a Vector3, defines the "up" direction
                  relative to the camera's orientation. This vector is typically set to (0, 1, 0), 
                  which corresponds to the positive Y-axis, ensuring that the camera remains upright. 
                  Modifying this vector can tilt the camera, affecting the roll of the camera's view.
                  The up vector plays a crucial role in maintaining the camera's orientation in the 3D world.
                
                fovy :
                  
                  The fovy property is a float that determines the field of view (FOV) angle in the Y-axis,
                  measured in degrees. A typical FOV for a perspective camera is between 45 and 60 degrees.
                  A larger FOV results in a wider view, allowing more of the scene to be visible, 
                  but can also introduce perspective distortion. Conversely, a smaller FOV gives a zoomed-in effect.
                  The fovy property is particularly important for perspective cameras, as it influences 
                  the depth perception of the scene.
                
                type :
                  
                  The type property specifies the projection type of the camera, using the CameraType enum.
                  This can be either:
                 
            		
                      CAMERA_PERSPECTIVE :
                        In this mode, the camera simulates how the human eye perceives the world, 
                        with objects appearing smaller as they are farther away. It is commonly used for 
                        rendering 3D scenes where depth and perspective are important.
                      
                      CAMERA_ORTHOGRAPHIC :
                        In this mode, the camera renders objects with parallel projection lines, 
                        meaning that objects do not get smaller with distance. This is useful for 2D games, 
                        technical drawings, or any scenario where depth perception is not required.
                      
                  The type property controls how the 3D scene is projected onto the 2D screen, 
                  significantly affecting the visual output.
            </summary>
        </member>
        <member name="T:ZS.ZSCanvas">
            <summary>
            Manage Multiple Canvas And Functions.
            Name For Small Basic Default Canvas Is "GWCanvas"
            </summary>
        </member>
        <member name="M:ZS.ZSCanvas.CreateCanvas(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Create A New Canvas.
            </summary>
            <param name="Name">The New Canvas Name.</param>
        </member>
        <member name="M:ZS.ZSCanvas.SetCanvas(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set A Canvas to GW.
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:ZS.ZSCanvas.HideCanvas(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Hides a Canvas on the GraphicsWindow.
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:ZS.ZSCanvas.ShowCanvas(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Shows A Canvas On GW.
            </summary>
            <param name="Name"></param>
        </member>
        <member name="T:ZS.ZSClipboard">
            <summary>
            Clipboard Functions In Small Basic.
            </summary>
        </member>
        <member name="M:ZS.ZSClipboard.GetText">
            <summary>
            Gets The Text in clipboard.
            </summary>
            <returns>The text</returns>
        </member>
        <member name="M:ZS.ZSClipboard.Clear">
            <summary>
            Clears the clipboard.
            </summary>
        </member>
        <member name="M:ZS.ZSClipboard.SetText(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set the text to clipboard.
            </summary>
            <param name="Text">the text to set</param>
        </member>
        <member name="M:ZS.ZSClipboard.ContainsAudio">
            <summary>
            True or False
            </summary>
            <returns>True or False</returns>
        </member>
        <member name="M:ZS.ZSClipboard.ContainsFileDropList">
            <summary>
            True or False
            </summary>
            <returns>True or False</returns>
        </member>
        <member name="M:ZS.ZSClipboard.ContainsImage">
            <summary>
            True or False
            </summary>
            <returns>True or False</returns>
        </member>
        <member name="M:ZS.ZSClipboard.ContainsText">
            <summary>
            True or False
            </summary>
            <returns>True or False</returns>
        </member>
        <member name="M:ZS.ZSClipboard.GetFileDropList">
            <summary>
            Get file drop list.
            </summary>
            <returns>the list</returns>
        </member>
        <member name="M:ZS.ZSClipboard.GetImage(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Get the image in clipboard.
            </summary>
            <param name="Path">the path to save the image</param>
        </member>
        <member name="M:ZS.ZSClipboard.SetImage(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set clipboard image
            </summary>
            <param name="Path">The image path</param>
        </member>
        <member name="T:ZS.ZSCmd">
            <summary>
            Provides methods to execute command line instructions from Small Basic.
            </summary>
        </member>
        <member name="M:ZS.ZSCmd.RunBatchScript(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Executes a batch script directly from a single string.
            </summary>
            <param name="script">The batch script to execute.</param>
            <returns>A string containing the output and errors from the batch script execution.</returns>
        </member>
        <member name="M:ZS.ZSCmd.RunBatchScriptFromArray(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Executes a batch script provided as an array of strings.
            Saves the script in a temporary file, runs it, returns the output, and deletes the script file.
            </summary>
            <param name="scriptLines">Array of strings, each representing a line of the batch script.</param>
            <returns>A string containing the output and errors from the batch script execution.</returns>
        </member>
        <member name="M:ZS.ZSCmd.Execute(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Executes a command in the command line and returns the output.
            </summary>
            <param name="command">The command to execute.</param>
            <returns>The output of the command execution.</returns>
        </member>
        <member name="M:ZS.ZSCmd.CopyFile(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Copies a file from source to destination using command line.
            </summary>
            <param name="source">Source file path.</param>
            <param name="destination">Destination file path.</param>
            <returns>Output of the command execution.</returns>
        </member>
        <member name="M:ZS.ZSCmd.MoveFile(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Moves a file from source to destination using command line.
            </summary>
            <param name="source">Source file path.</param>
            <param name="destination">Destination file path.</param>
            <returns>Output of the command execution.</returns>
        </member>
        <member name="M:ZS.ZSCmd.DeleteFile(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Deletes a file using command line.
            </summary>
            <param name="filePath">File path to delete.</param>
            <returns>Output of the command execution.</returns>
        </member>
        <member name="M:ZS.ZSCmd.Rename(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Renames a file or directory using command line.
            </summary>
            <param name="oldPath">Current path of the file or directory.</param>
            <param name="newPath">New path to rename to.</param>
            <returns>Output of the command execution.</returns>
        </member>
        <member name="M:ZS.ZSCmd.CreateDirectory(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Creates a directory using command line.
            </summary>
            <param name="directoryPath">Directory path to create.</param>
            <returns>Output of the command execution.</returns>
        </member>
        <member name="M:ZS.ZSCmd.RemoveDirectory(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Removes a directory using command line.
            </summary>
            <param name="directoryPath">Directory path to remove.</param>
            <returns>Output of the command execution.</returns>
        </member>
        <member name="M:ZS.ZSCmd.ListDirectoryContents(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Lists contents of a directory using command line.
            </summary>
            <param name="directoryPath">Directory path to list.</param>
            <returns>Output of the command execution.</returns>
        </member>
        <member name="M:ZS.ZSCmd.ChangeDirectory(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Changes current directory using command line.
            </summary>
            <param name="directoryPath">Directory path to change to.</param>
            <returns>Output of the command execution.</returns>
        </member>
        <member name="M:ZS.ZSCmd.PingHost(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Pings a host using command line.
            </summary>
            <param name="host">Host to ping.</param>
            <returns>Output of the command execution.</returns>
        </member>
        <member name="M:ZS.ZSCmd.ExecuteCommand(System.String)">
            <summary>
            Executes a command using the command line and captures the output.
            </summary>
            <param name="command">The command to execute.</param>
            <returns>The output of the command execution.</returns>
        </member>
        <member name="T:ZS.ZSNET">
            <summary>
            Some Powerful Net Function In Small Basic.
            Keywords And Operators.
            </summary>
        </member>
        <member name="M:ZS.ZSNET.Not(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts True To False And Vice-Versa.
            </summary>
            <param name="Bool">The Bool True Or False</param>
            <returns>Negated Bool as True or False</returns>
        </member>
        <member name="M:ZS.ZSNET.And(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Performs logical AND on two booleans.
            </summary>
            <param name="bool1">First boolean</param>
            <param name="bool2">Second boolean</param>
            <returns>True if both are true, otherwise false</returns>
        </member>
        <member name="M:ZS.ZSNET.Or(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Performs logical OR on two booleans.
            </summary>
            <param name="bool1">First boolean</param>
            <param name="bool2">Second boolean</param>
            <returns>True if either or both are true, otherwise false</returns>
        </member>
        <member name="M:ZS.ZSNET.Xor(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Performs logical XOR on two booleans.
            </summary>
            <param name="bool1">First boolean</param>
            <param name="bool2">Second boolean</param>
            <returns>True if one is true and the other is false</returns>
        </member>
        <member name="M:ZS.ZSNET.Equal(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if two values are equal.
            </summary>
            <param name="val1">First value</param>
            <param name="val2">Second value</param>
            <returns>True if equal, otherwise false</returns>
        </member>
        <member name="M:ZS.ZSNET.NotEqual(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if two values are not equal.
            </summary>
            <param name="val1">First value</param>
            <param name="val2">Second value</param>
            <returns>True if not equal, otherwise false</returns>
        </member>
        <member name="M:ZS.ZSNET.GreaterThan(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if the first value is greater than the second value.
            </summary>
            <param name="num1">First number</param>
            <param name="num2">Second number</param>
            <returns>True if num1 is greater than num2</returns>
        </member>
        <member name="M:ZS.ZSNET.LessThan(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if the first value is less than the second value.
            </summary>
            <param name="num1">First number</param>
            <param name="num2">Second number</param>
            <returns>True if num1 is less than num2</returns>
        </member>
        <member name="M:ZS.ZSNET.GreaterThanOrEqual(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if the first value is greater than or equal to the second value.
            </summary>
            <param name="num1">First number</param>
            <param name="num2">Second number</param>
            <returns>True if num1 is greater than or equal to num2</returns>
        </member>
        <member name="M:ZS.ZSNET.LessThanOrEqual(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if the first value is less than or equal to the second value.
            </summary>
            <param name="num1">First number</param>
            <param name="num2">Second number</param>
            <returns>True if num1 is less than or equal to num2</returns>
        </member>
        <member name="M:ZS.ZSNET.Add(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Adds a value to a number.
            </summary>
            <param name="num">Number</param>
            <param name="addValue">Value to add</param>
            <returns>Sum of num and addValue</returns>
        </member>
        <member name="M:ZS.ZSNET.Subtract(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Subtracts a value from a number.
            </summary>
            <param name="num">Number</param>
            <param name="subValue">Value to subtract</param>
            <returns>Difference of num and subValue</returns>
        </member>
        <member name="M:ZS.ZSNET.Multiply(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Multiplies a number by another value.
            </summary>
            <param name="num">Number</param>
            <param name="mulValue">Value to multiply by</param>
            <returns>Product of num and mulValue</returns>
        </member>
        <member name="M:ZS.ZSNET.Divide(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Divides a number by another value.
            </summary>
            <param name="num">Number</param>
            <param name="divValue">Value to divide by</param>
            <returns>Quotient of num and divValue</returns>
        </member>
        <member name="M:ZS.ZSNET.BitwiseAnd(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Performs bitwise AND on two integers.
            </summary>
            <param name="int1">First integer</param>
            <param name="int2">Second integer</param>
            <returns>Result of bitwise AND</returns>
        </member>
        <member name="M:ZS.ZSNET.BitwiseOr(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Performs bitwise OR on two integers.
            </summary>
            <param name="int1">First integer</param>
            <param name="int2">Second integer</param>
            <returns>Result of bitwise OR</returns>
        </member>
        <member name="M:ZS.ZSNET.BitwiseXor(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Performs bitwise XOR on two integers.
            </summary>
            <param name="int1">First integer</param>
            <param name="int2">Second integer</param>
            <returns>Result of bitwise XOR</returns>
        </member>
        <member name="M:ZS.ZSNET.BitwiseNot(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Performs bitwise NOT on an integer.
            </summary>
            <param name="intVal">Integer to negate</param>
            <returns>Bitwise negation of the integer</returns>
        </member>
        <member name="M:ZS.ZSNET.LeftShift(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Shifts the bits of a number to the left by the specified amount.
            </summary>
            <param name="num">Number</param>
            <param name="shiftAmount">Amount to shift</param>
            <returns>Number shifted to the left</returns>
        </member>
        <member name="M:ZS.ZSNET.RightShift(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Shifts the bits of a number to the right by the specified amount.
            </summary>
            <param name="num">Number</param>
            <param name="shiftAmount">Amount to shift</param>
            <returns>Number shifted to the right</returns>
        </member>
        <member name="M:ZS.ZSNET.InlineIf(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Inline if (ternary operator) - evaluates a mathematical or boolean expression and returns one value if true, otherwise another value.
            </summary>
            <param name="expression">Mathematical or boolean expression to evaluate (e.g., "5 > 2")</param>
            <param name="trueValue">Value returned if the expression is true</param>
            <param name="falseValue">Value returned if the expression is false</param>
            <returns>The trueValue if the expression is true, otherwise falseValue</returns>
        </member>
        <member name="M:ZS.ZSNET.Coalesce(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the first non-null value.
            </summary>
            <param name="value1">First value</param>
            <param name="value2">Second value</param>
            <returns>First non-null value</returns>
        </member>
        <member name="M:ZS.ZSNET.Negate(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Negates the number (changes the sign).
            </summary>
            <param name="num">The number to negate</param>
            <returns>The negated number</returns>
        </member>
        <member name="M:ZS.ZSNET.Modulus(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the remainder of the division between two numbers.
            </summary>
            <param name="num">The number to divide</param>
            <param name="divisor">The number to divide by</param>
            <returns>The remainder of the division</returns>
        </member>
        <member name="M:ZS.ZSNET.IsInRange(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if a number is within a specified range (inclusive).
            </summary>
            <param name="num">The number to check</param>
            <param name="min">The lower bound of the range</param>
            <param name="max">The upper bound of the range</param>
            <returns>True if the number is within the range, otherwise false</returns>
        </member>
        <member name="M:ZS.ZSNET.Clamp(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Clamps a number between a minimum and maximum value.
            </summary>
            <param name="num">The number to clamp</param>
            <param name="min">The minimum allowed value</param>
            <param name="max">The maximum allowed value</param>
            <returns>The clamped value</returns>
        </member>
        <member name="M:ZS.ZSNET.Interpolate(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive[])">
            <summary>
            Interpolates values into a string template.
            </summary>
            <param name="template">The string template with placeholders (e.g., "Hello {0}")</param>
            <param name="args">The values to replace the placeholders</param>
            <returns>The interpolated string</returns>
        </member>
        <member name="M:ZS.ZSNET.Repeat(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Repeats an action for the specified number of iterations.
            </summary>
            <param name="iterations">Number of times to repeat</param>
            <param name="Sub">The action to repeat</param>
            <returns>True after completion</returns>
        </member>
        <member name="M:ZS.ZSNET.Apply(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Applies an operation or function to each element in a comma-separated list of values.
            </summary>
            <param name="list">A comma-separated list of values</param>
            <param name="operation">The operation to apply (e.g., "+1" to increment all values)</param>
            <returns>A new list of results with the operation applied</returns>
        </member>
        <member name="M:ZS.ZSNET.Filter(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Filters a list of values based on a condition.
            </summary>
            <param name="list">A comma-separated list of values</param>
            <param name="condition">The condition to apply (e.g., ">2" to filter values greater than 2)</param>
            <returns>A new list of values that meet the condition</returns>
        </member>
        <member name="M:ZS.ZSNET.Reduce(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Reduces a list of values to a single value by applying an operation (e.g., summing all values).
            </summary>
            <param name="list">A comma-separated list of values</param>
            <param name="operation">The operation to apply (e.g., "+" to sum values)</param>
            <returns>The reduced result (e.g., sum of the list)</returns>
        </member>
        <member name="M:ZS.ZSNET.ZipWith(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Combines two lists element-wise using a specified operation.
            </summary>
            <param name="list1">First comma-separated list</param>
            <param name="list2">Second comma-separated list</param>
            <param name="operation">Operation to apply, e.g., "+" to add elements</param>
            <returns>A new list with the operation applied to each pair of elements</returns>
        </member>
        <member name="M:ZS.ZSNET.ForEach(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Applies an operation to each item in a list (e.g., increment all items by 1).
            </summary>
            <param name="list">A comma-separated list of values</param>
            <param name="operation">The operation to apply to each item (e.g., "+1")</param>
            <returns>A new list with the operation applied</returns>
        </member>
        <member name="M:ZS.ZSNET.Chain(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Chains multiple operations to apply to a single value.
            </summary>
            <param name="value">The starting value</param>
            <param name="operations">A comma-separated list of operations to chain</param>
            <returns>The result after all operations are applied</returns>
        </member>
        <member name="M:ZS.ZSNET.Eval(System.String)">
            <summary>
            Helper method to evaluate simple arithmetic expressions.
            </summary>
            <param name="expression">The expression to evaluate</param>
            <returns>The result of the evaluation</returns>
        </member>
        <member name="F:ZS.ZSNET.I">
            <summary>
            The Current I Of Loop
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ZS.ZSNET.For(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)" -->
        <member name="M:ZS.ZSNET.CreateSwitch(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Creates a switch case with a specified name and returns the name for later reference.
            The cases are provided in the format: "1-one,2-two", where "1" is the case, "one" is the result.
            </summary>
            <param name="switchName">The name of the switch</param>
            <param name="cases">A comma-separated list of cases and results (e.g., "1-one,2-two")</param>
            <param name="defaultValue">The default value to return if no match is found</param>
            <returns>The switch name for reference</returns>
        </member>
        <member name="M:ZS.ZSNET.CallSwitch(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Calls a previously created switch by name with an argument and returns the corresponding result.
            If no match is found, the default value is returned.
            </summary>
            <param name="switchName">The name of the switch to call</param>
            <param name="arg">The argument to pass to the switch (e.g., "1" to return the value for case 1)</param>
            <returns>The result of the switch case, or the default value if no match is found</returns>
        </member>
        <member name="M:ZS.ZSNET.ForEachInArray(Microsoft.SmallBasic.Library.Primitive[],Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Fires a subroutine for each element in a Small Basic array.
            </summary>
            <param name="array">The Small Basic array</param>
            <param name="subName">The name of the subroutine to fire for each element</param>
        </member>
        <member name="M:ZS.ZSNET.ForEachInList(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Fires a subroutine for each element in a comma-separated list.
            </summary>
            <param name="list">The comma-separated list</param>
            <param name="subName">The name of the subroutine to fire for each element</param>
        </member>
        <member name="M:ZS.ZSNET.Switch(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive[],Microsoft.SmallBasic.Library.Primitive[],Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Creates a switch with a specified name, an array of cases, an array of results, and a default result.
            </summary>
            <param name="switchName">The name of the switch to be created</param>
            <param name="cases">Array of case values</param>
            <param name="results">Array of result values corresponding to each case</param>
            <param name="defaultResult">The default result if no case matches</param>
            <returns>The name of the switch created</returns>
        </member>
        <member name="M:ZS.ZSNET.UseSwitch(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Uses a previously created switch by name and returns the result based on the input value.
            </summary>
            <param name="switchName">The name of the switch to be used</param>
            <param name="value">The value to be checked against the cases in the switch</param>
            <returns>The result corresponding to the matched case, or the default result if no match is found</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ZS.ZSNET.EvaluateExpression(Microsoft.SmallBasic.Library.Primitive)" -->
        <member name="M:ZS.ZSNET.ToBinary(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts an integer value to its binary representation as a string.
            </summary>
            <param name="value">The decimal number to convert to binary.</param>
            <returns>A binary string representation of the decimal number.</returns>
        </member>
        <member name="M:ZS.ZSNET.BinaryToDecimal(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts a binary string to its decimal representation.
            </summary>
            <param name="binary">A binary string to convert to decimal.</param>
            <returns>The decimal value of the given binary string.</returns>
        </member>
        <member name="M:ZS.ZSNET.TextToBinary(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts a text string to its binary representation using ASCII encoding.
            Each character is represented by 8 bits.
            </summary>
            <param name="text">The text string to convert to binary.</param>
            <returns>A binary string representation of the text, using ASCII encoding.</returns>
        </member>
        <member name="M:ZS.ZSNET.BinaryToText(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts a binary string (ASCII encoded) back to a text string.
            </summary>
            <param name="binary">The binary string (ASCII encoded) to convert back to text.</param>
            <returns>The original text string represented by the binary string.</returns>
        </member>
        <member name="T:ZS.ZSDialog">
            <summary>
            Provides various dialog utilities such as message boxes, input dialogs, file dialogs, and color dialogs.
            </summary>
        </member>
        <member name="M:ZS.ZSDialog.ShowMessageBox(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Shows a message box with the specified text.
            </summary>
            <param name="text">The text to display in the message box.</param>
        </member>
        <member name="M:ZS.ZSDialog.ShowInputDialog(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Shows a custom input dialog with the specified prompt text.
            </summary>
            <param name="prompt">The prompt text to display in the input dialog.</param>
            <returns>The text entered by the user.</returns>
        </member>
        <member name="M:ZS.ZSDialog.ShowOpenFileDialog">
            <summary>
            Shows a file open dialog and returns the selected file path.
            </summary>
            <returns>The path of the selected file.</returns>
        </member>
        <member name="M:ZS.ZSDialog.ShowSaveFileDialog">
            <summary>
            Shows a file save dialog and returns the selected file path.
            </summary>
            <returns>The path of the file to save.</returns>
        </member>
        <member name="M:ZS.ZSDialog.ShowColorDialog">
            <summary>
            Shows a color dialog and returns the selected color as a string.
            </summary>
            <returns>The selected color in hexadecimal format (e.g., #FF0000 for red).</returns>
        </member>
        <member name="M:ZS.ZSDialog.ShowYesNoDialog(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Shows a Yes/No dialog with the specified question text.
            </summary>
            <param name="question">The question text to display in the dialog.</param>
            <returns>Returns "Yes" if Yes is clicked, otherwise returns "No".</returns>
        </member>
        <member name="M:ZS.ZSDialog.ShowFolderBrowserDialog">
            <summary>
            Shows a folder browser dialog and returns the selected folder path.
            </summary>
            <returns>The path of the selected folder.</returns>
        </member>
        <member name="M:ZS.ZSDialog.ShowErrorDialog(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Shows an error dialog with the specified error message.
            </summary>
            <param name="errorMessage">The error message to display in the dialog.</param>
        </member>
        <member name="M:ZS.ZSDialog.ShowWarningDialog(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Shows a warning dialog with the specified warning message.
            </summary>
            <param name="warningMessage">The warning message to display in the dialog.</param>
        </member>
        <member name="M:ZS.ZSDialog.ShowInformationDialog(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Shows an information dialog with the specified information message.
            </summary>
            <param name="informationMessage">The information message to display in the dialog.</param>
        </member>
        <member name="M:ZS.ZSDialog.ShowCustomMessageBox(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Shows a custom message box with specified text, title, and buttons.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="title">The title of the message box.</param>
            <param name="buttons">The buttons to display in the message box (OK, OKCancel, YesNo).</param>
            <returns>The text of the button that was clicked.</returns>
        </member>
        <member name="M:ZS.ZSDialog.ShowProgressDialog(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Shows a progress dialog with a specified message and duration.
            </summary>
            <param name="message">The message to display in the progress dialog.</param>
            <param name="durationInSeconds">The duration in seconds for which the progress dialog should be displayed.</param>
        </member>
        <member name="M:ZS.ZSDialog.ShowFontDialog">
            <summary>
            Shows a font dialog and returns the selected font as a string.
            </summary>
            <returns>The selected font in the format "FontName, Size, Style".</returns>
        </member>
        <member name="M:ZS.ZSDialog.ShowTimePickerDialog">
            <summary>
            Shows a time picker dialog and returns the selected time.
            </summary>
            <returns>The selected time in the format "HH:mm:ss".</returns>
        </member>
        <member name="M:ZS.ZSDialog.ShowDatePickerDialog">
            <summary>
            Shows a date picker dialog and returns the selected date.
            </summary>
            <returns>The selected date in the format "yyyy-MM-dd".</returns>
        </member>
        <member name="M:ZS.ZSDialog.ShowConfirmationDialog(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Shows a confirmation dialog with specified text and title.
            </summary>
            <param name="text">The text to display in the confirmation dialog.</param>
            <param name="title">The title of the confirmation dialog.</param>
            <returns>Returns true if Yes is clicked, otherwise returns false.</returns>
        </member>
        <member name="M:ZS.ZSDialog.ShowCustomColorDialog">
            <summary>
            Shows a color dialog and returns the selected color as a string in the format "R,G,B".
            </summary>
            <returns>The selected color or an empty string if canceled.</returns>
        </member>
        <member name="M:ZS.ZSDialog.ShowMultiSelectOpenFileDialog(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Shows an open file dialog with multi-select enabled and returns the selected file paths.
            </summary>
            <param name="filter">The file types filter in the format "Display Name1|Pattern1|Display Name2|Pattern2|...".</param>
            <returns>A semicolon-separated list of selected file paths or an empty string if canceled.</returns>
            <remarks>
            Filters should be specified in pairs where:
            - Display Name: The name shown in the dialog's filter dropdown.
            - Pattern: The file pattern to filter files by extension (e.g., "*.txt", "*.jpg").
            Multiple filters can be separated by vertical bars ('|'). For example:
            "Text Files|*.txt|All Files|*.*"
            </remarks>
        </member>
        <member name="M:ZS.ZSDialog.ShowMultiLineInputBox(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Shows an input box with a multi-line text box for larger input.
            </summary>
            <param name="prompt">The prompt to display in the input box.</param>
            <param name="title">The title of the input box.</param>
            <returns>The user input or an empty string if canceled.</returns>
        </member>
        <member name="M:ZS.ZSDialog.ShowPasswordInputDialog(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Shows a password input dialog and returns the entered password.
            </summary>
            <param name="prompt">The prompt to display in the input dialog.</param>
            <param name="title">The title of the input dialog.</param>
            <returns>The entered password or an empty string if canceled.</returns>
        </member>
        <member name="M:ZS.ZSDialog.ShowInputDialogWithOptions(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive[])">
            <summary>
            Shows an input dialog with options and returns the selected option.
            </summary>
            <param name="prompt">The prompt to display in the input dialog.</param>
            <param name="title">The title of the input dialog.</param>
            <param name="options">The list of options to choose from.</param>
            <returns>The selected option or an empty string if canceled.</returns>
        </member>
        <member name="M:ZS.ZSDialog.ShowImageFileDialog">
            <summary>
            Shows a file dialog to select an image file and returns the selected file path.
            </summary>
            <returns>The path of the selected image file or an empty string if canceled.</returns>
        </member>
        <member name="T:ZS.ZSEnvironment">
            <summary>
            Provides System.Environment Functions For Small Basic.
            </summary>
        </member>
        <member name="M:ZS.ZSEnvironment.Exit(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Terminates the process and gives the exit code to the operating system.
            </summary>
            <param name="exitCode">The exit code to pass to the operating system.</param>
        </member>
        <member name="M:ZS.ZSEnvironment.GetCommandLineArgs">
            <summary>
            Returns the command-line arguments for the process as a single string with arguments separated by a delimiter.
            </summary>
            <returns>A string representing the command-line arguments, separated by commas.</returns>
        </member>
        <member name="M:ZS.ZSEnvironment.GetEnvironmentVariable(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Retrieves the value of an environment variable.
            </summary>
            <param name="variable">The name of the environment variable.</param>
            <returns>The value of the environment variable.</returns>
        </member>
        <member name="M:ZS.ZSEnvironment.GetEnvironmentVariable(Microsoft.SmallBasic.Library.Primitive,System.EnvironmentVariableTarget)">
            <summary>
            Retrieves the value of an environment variable, using the specified target.
            </summary>
            <param name="variable">The name of the environment variable.</param>
            <param name="target">The target for the environment variable.</param>
            <returns>The value of the environment variable.</returns>
        </member>
        <member name="M:ZS.ZSEnvironment.GetLogicalDrives">
            <summary>
            Returns the names of the logical drives on the current machine.
            </summary>
            <returns>An array of strings representing the names of the logical drives.</returns>
        </member>
        <member name="M:ZS.ZSEnvironment.GetResourceString(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Retrieves the value of a resource string by its key.Currently WILL Give Nothing
            </summary>
            <param name="key">The key of the resource string.</param>
            <returns>The value of the resource string.</returns>
        </member>
        <member name="M:ZS.ZSEnvironment.SetEnvironmentVariable(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sets the value of an environment variable.
            </summary>
            <param name="variable">The name of the environment variable.</param>
            <param name="value">The value to set for the environment variable.</param>
        </member>
        <member name="M:ZS.ZSEnvironment.SetEnvironmentVariable(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,System.EnvironmentVariableTarget)">
            <summary>
            Sets the value of an environment variable, using the specified target.
            </summary>
            <param name="variable">The name of the environment variable.</param>
            <param name="value">The value to set for the environment variable.</param>
            <param name="target">The target for the environment variable.</param>
        </member>
        <member name="P:ZS.ZSEnvironment.CommandLine">
            <summary>
            Gets the command line for the application.
            </summary>
            <return>The command line arguments for the application.</return>
        </member>
        <member name="P:ZS.ZSEnvironment.CurrentDirectory">
            <summary>
            Gets or sets the fully qualified path of the current working directory.
            </summary>
            <return>The path of the current working directory.</return>
        </member>
        <member name="P:ZS.ZSEnvironment.MachineName">
            <summary>
            Gets the name of the machine on which the application is running.
            </summary>
            <return>The name of the machine.</return>
        </member>
        <member name="P:ZS.ZSEnvironment.NewLine">
            <summary>
            Gets a string representing the newline character(s) used by the current environment.
            </summary>
            <return>The newline characters used by the current environment.</return>
        </member>
        <member name="P:ZS.ZSEnvironment.OSVersion">
            <summary>
            Gets an OperatingSystem object that describes the current platform.
            </summary>
            <return>The current platform as a string.</return>
        </member>
        <member name="P:ZS.ZSEnvironment.ProcessorCount">
            <summary>
            Gets the number of processors on the current machine.
            </summary>
            <return>The number of processors.</return>
        </member>
        <member name="P:ZS.ZSEnvironment.StackTrace">
            <summary>
            Gets a string representation of the current call stack.
            </summary>
            <value>The current call stack as a string.</value>
        </member>
        <member name="P:ZS.ZSEnvironment.SystemDirectory">
            <summary>
            Gets the full path of the system directory.
            </summary>
            <value>The path to the system directory.</value>
        </member>
        <member name="P:ZS.ZSEnvironment.TickCount">
            <summary>
            Gets the number of milliseconds elapsed since the system started.
            </summary>
            <value>The number of milliseconds since the system started.</value>
        </member>
        <member name="P:ZS.ZSEnvironment.UserDomainName">
            <summary>
            Gets the domain name of the current user.
            </summary>
            <value>The domain name of the current user.</value>
        </member>
        <member name="P:ZS.ZSEnvironment.UserName">
            <summary>
            Gets the user name of the current thread.
            </summary>
            <value>The user name of the current thread.</value>
        </member>
        <member name="P:ZS.ZSEnvironment.Version">
            <summary>
            Gets the version of the common language runtime (CLR) that is installed on the operating system.
            </summary>
            <value>The version of the CLR.</value>
        </member>
        <member name="P:ZS.ZSEnvironment.WorkingSet">
            <summary>
            Gets the amount of physical memory allocated for the process.
            </summary>
            <value>The amount of physical memory allocated for the process, in bytes.</value>
        </member>
        <member name="T:ZS.ZSFile">
            <summary>
            Provides File Functions For Small Basic.
            </summary>
        </member>
        <member name="M:ZS.ZSFile.ReadFile(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Reads the content of a file.
            </summary>
            <param name="filePath">The path of the file to read.</param>
            <returns>The content of the file.</returns>
        </member>
        <member name="M:ZS.ZSFile.WriteFile(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Writes content to a file.
            </summary>
            <param name="filePath">The path of the file to write to.</param>
            <param name="content">The content to write.</param>
            <returns>"Success" if the operation was successful; otherwise, an error message.</returns>
        </member>
        <member name="M:ZS.ZSFile.CopyFile(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Copies a file to a new location.
            </summary>
            <param name="sourcePath">The path of the file to copy.</param>
            <param name="destinationPath">The path where the file will be copied to.</param>
            <returns>"Success" if the operation was successful; otherwise, an error message.</returns>
        </member>
        <member name="M:ZS.ZSFile.DeleteFile(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Deletes a file.
            </summary>
            <param name="filePath">The path of the file to delete.</param>
            <returns>"Success" if the operation was successful; otherwise, an error message.</returns>
        </member>
        <member name="M:ZS.ZSFile.FileExists(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if a file exists.
            </summary>
            <param name="filePath">The path of the file to check.</param>
            <returns>True if the file exists; otherwise, false.</returns>
        </member>
        <member name="M:ZS.ZSFile.MoveFile(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Moves a file to a new location.
            </summary>
            <param name="sourcePath">The path of the file to move.</param>
            <param name="destinationPath">The path where the file will be moved to.</param>
            <returns>"Success" if the operation was successful; otherwise, an error message.</returns>
        </member>
        <member name="M:ZS.ZSFile.CreateDirectory(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Creates a directory.
            </summary>
            <param name="directoryPath">The path of the directory to create.</param>
            <returns>"Success" if the operation was successful; otherwise, an error message.</returns>
        </member>
        <member name="M:ZS.ZSFile.ListFiles(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Lists all files in a directory.
            </summary>
            <param name="directoryPath">The path of the directory to list files from.</param>
            <returns>A comma-separated string of file paths.</returns>
        </member>
        <member name="M:ZS.ZSFile.RenameFile(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Renames a file.
            </summary>
            <param name="currentFilePath">The current path of the file to rename.</param>
            <param name="newFilePath">The new path and name for the file.</param>
            <returns>"Success" if the operation was successful; otherwise, an error message.</returns>
        </member>
        <member name="M:ZS.ZSFile.DirectoryExists(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if a directory exists.
            </summary>
            <param name="directoryPath">The path of the directory to check.</param>
            <returns>True if the directory exists; otherwise, false.</returns>
        </member>
        <member name="M:ZS.ZSFile.DeleteDirectory(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Deletes a directory.
            </summary>
            <param name="directoryPath">The path of the directory to delete.</param>
            <returns>"Success" if the operation was successful; otherwise, an error message.</returns>
        </member>
        <member name="M:ZS.ZSFile.MoveDirectory(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Moves a directory to a new location.
            </summary>
            <param name="sourcePath">The current path of the directory to move.</param>
            <param name="destinationPath">The new path for the directory.</param>
            <returns>"Success" if the operation was successful; otherwise, an error message.</returns>
        </member>
        <member name="M:ZS.ZSFile.GetLastWriteTime(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Retrieves the last write time of a file.
            </summary>
            <param name="filePath">The path of the file to retrieve the last write time from.</param>
            <returns>A string representation of the last write time; or an error message if an exception occurs.</returns>
        </member>
        <member name="M:ZS.ZSFile.GetFileSize(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Retrieves the size of a file.
            </summary>
            <param name="filePath">The path of the file to get the size of.</param>
            <returns>The size of the file in bytes, or an error message if an exception occurs.</returns>
        </member>
        <member name="M:ZS.ZSFile.GetFileExtension(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Retrieves the extension of a file.
            </summary>
            <param name="filePath">The path of the file to get the extension of.</param>
            <returns>The extension of the file, or an error message if an exception occurs.</returns>
        </member>
        <member name="M:ZS.ZSFile.CreateTextFile(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Creates a text file with specified content.
            </summary>
            <param name="filePath">The path of the file to create.</param>
            <param name="content">The content to write to the file.</param>
            <returns>"Success" if the operation was successful; otherwise, an error message.</returns>
        </member>
        <member name="M:ZS.ZSFile.AppendToFile(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Appends content to an existing file.
            </summary>
            <param name="filePath">The path of the file to append to.</param>
            <param name="content">The content to append.</param>
            <returns>"Success" if the operation was successful; otherwise, an error message.</returns>
        </member>
        <member name="M:ZS.ZSFile.GetFileCreationTime(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Retrieves the creation time of a file.
            </summary>
            <param name="filePath">The path of the file to retrieve the creation time from.</param>
            <returns>A string representation of the creation time, or an error message if an exception occurs.</returns>
        </member>
        <member name="M:ZS.ZSFile.ReadAllLines(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Reads all lines from a file.
            </summary>
            <param name="filePath">The path of the file to read from.</param>
            <returns>A list of all lines in the file, or an error message if an exception occurs.</returns>
        </member>
        <member name="M:ZS.ZSFile.GetFileAttributes(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Retrieves the attributes of a file.
            </summary>
            <param name="filePath">The path of the file to get the attributes of.</param>
            <returns>The attributes of the file, or an error message if an exception occurs.</returns>
        </member>
        <member name="M:ZS.ZSFile.GetFileLastAccessTime(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Retrieves the last access time of a file.
            </summary>
            <param name="filePath">The path of the file to retrieve the last access time from.</param>
            <returns>A string representation of the last access time, or an error message if an exception occurs.</returns>
        </member>
        <member name="M:ZS.ZSFile.DeleteDirectory(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Deletes a directory and optionally all its contents.
            </summary>
            <param name="directoryPath">The path of the directory to delete.</param>
            <param name="recursive">True to delete the directory, its subdirectories, and all files; otherwise, false.</param>
            <returns>"Success" if the operation was successful; otherwise, an error message.</returns>
        </member>
        <member name="M:ZS.ZSFile.GetFileName(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Retrieves the file name and extension of a file path.
            </summary>
            <param name="filePath">The path of the file to retrieve the name from.</param>
            <returns>The file name and extension, or an error message if an exception occurs.</returns>
        </member>
        <member name="T:ZS.ZSForm">
            <summary>
            WinFrom In Small Basic.
            </summary>
        </member>
        <member name="M:ZS.ZSForm.CreateForm(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Creates A New Form.
            </summary>
            <param name="Name">The Name To Store Form</param>
            <param name="Title">The Title Of Form</param>
            <param name="Width">The Width</param>
            <param name="Height">The Height</param>
        </member>
        <member name="M:ZS.ZSForm.MakeChild(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Make A Form As Child Of A Form.
            </summary>
            <param name="Parent">The Main Form Name.</param>
            <param name="Child">The Child Form Name.</param>
        </member>
        <member name="M:ZS.ZSForm.RunForm(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Runs the form.
            </summary>
            <param name="Name">The form name.</param>
        </member>
        <member name="M:ZS.ZSForm.Dispose">
            <summary>
            Call this method Once Exiting.
            </summary>
        </member>
        <member name="M:ZS.ZSForm.AddButton(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Adds a button to a specified form.
            </summary>
            <param name="FormName">The name of the form to add the button to.</param>
            <param name="ButtonText">The text to display on the button.</param>
            <param name="X">The X position of the button.</param>
            <param name="Y">The Y position of the button.</param>
        </member>
        <member name="T:ZS.ZSGL">
            <summary>
            OpenGL in small basic Using SharpGL.
            </summary>
        </member>
        <member name="T:ZS.ZSImage">
            <summary>
            Provides Image Functions For Small Basic.
            </summary>
        </member>
        <member name="M:ZS.ZSImage.IsImageInImage(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Determines if a sub-image is present within a main image.
            </summary>
            <param name="mainImagePath">The file path of the main image.</param>
            <param name="subImagePath">The file path of the sub-image.</param>
            <returns>True if the sub-image is found within the main image, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSImage.CaptureScreen(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Captures the entire screen and saves it as a PNG file.
            </summary>
            <param name="filePath">The file path where the screenshot will be saved.</param>
            <returns>True if the screen capture was successful; otherwise, false.</returns>
        </member>
        <member name="M:ZS.ZSImage.ResizeImage(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Resizes an image to the specified width and height.
            </summary>
            <param name="inputFilePath">The file path of the input image.</param>
            <param name="outputFilePath">The file path where the resized image will be saved.</param>
            <param name="width">The width of the resized image.</param>
            <param name="height">The height of the resized image.</param>
            <returns>True if the image resizing was successful; otherwise, false.</returns>
        </member>
        <member name="M:ZS.ZSImage.GetImageWidth(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the width of an image.
            </summary>
            <param name="filePath">The file path of the image.</param>
            <returns>The width of the image.</returns>
        </member>
        <member name="M:ZS.ZSImage.GetImageHeight(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the height of an image.
            </summary>
            <param name="filePath">The file path of the image.</param>
            <returns>The height of the image.</returns>
        </member>
        <member name="T:ZS.ZSKeyboard">
            <summary>
            The ZSKeyboard extension provides functionalities to interact with keyboard inputs.
            It includes methods for checking the state of modifier keys (Alt, Shift, Ctrl, Windows) and sending key presses programmatically.
            </summary>
        </member>
        <member name="M:ZS.ZSKeyboard.IsAltDown">
            <summary>
            Checks if the Alt key is currently pressed down.
            </summary>
            <returns>True if the Alt key is pressed, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSKeyboard.IsShiftDown">
            <summary>
            Checks if the Shift key is currently pressed down.
            </summary>
            <returns>True if the Shift key is pressed, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSKeyboard.IsCtrlDown">
            <summary>
            Checks if the Ctrl key is currently pressed down.
            </summary>
            <returns>True if the Ctrl key is pressed, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSKeyboard.IsWindowsKeyDown">
            <summary>
            Checks if the Windows key is currently pressed down.
            </summary>
            <returns>True if the Windows key is pressed, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSKeyboard.SendKey(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sends a key press to the system.
            </summary>
            <param name="key">The key to send.</param>
        </member>
        <member name="M:ZS.ZSKeyboard.ToggleCapsLock">
            <summary>
            Toggles the state of the Caps Lock key.
            </summary>
        </member>
        <member name="M:ZS.ZSKeyboard.SendKeyCombination(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Simulates pressing a combination of keys.
            </summary>
            <param name="keyCombination">The key combination to press (e.g., "^C" for Ctrl+C, "%{F4}" for Alt+F4).</param>
            <example>
            "^C" = Ctrl+C
            "%F4" = Alt+F4
            "+A" = Shift+A
            "{DEL}" = Delete key
            "{ENTER}" = Enter key
            "{TAB}" = Tab key
            "{ESC}" = Escape key
            "{BACKSPACE}" = Backspace key
            </example>
        </member>
        <member name="M:ZS.ZSKeyboard.IsCapsLockOn">
            <summary>
            Checks if the Caps Lock is currently on.
            </summary>
            <returns>True if Caps Lock is on, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSKeyboard.IsNumLockOn">
            <summary>
            Checks if the Num Lock is currently on.
            </summary>
            <returns>True if Num Lock is on, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSKeyboard.IsScrollLockOn">
            <summary>
            Checks if the Scroll Lock is currently on.
            </summary>
            <returns>True if Scroll Lock is on, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSKeyboard.TypeText(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Simulates typing a string of text.
            </summary>
            <param name="text">The text to type.</param>
        </member>
        <member name="M:ZS.ZSKeyboard.SetKeyboardLayout(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sets the keyboard layout.
            </summary>
            <param name="layout">The keyboard layout (e.g., "00000409" for US layout).</param>
        </member>
        <member name="M:ZS.ZSKeyboard.SimulateKeyDown(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Simulates pressing down a key.
            </summary>
            <param name="key">The key to press down.</param>
        </member>
        <member name="M:ZS.ZSKeyboard.SimulateKeyUp(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Simulates releasing a key.
            </summary>
            <param name="key">The key to release.</param>
        </member>
        <member name="M:ZS.ZSKeyboard.Wait(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Waits for a specified amount of time.
            </summary>
            <param name="milliseconds">The amount of time to wait in milliseconds.</param>
        </member>
        <member name="M:ZS.ZSKeyboard.PressAndReleaseKey(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Simulates pressing and releasing a key.
            </summary>
            <param name="key">The key to press and release.</param>
        </member>
        <member name="M:ZS.ZSKeyboard.PressKeyMultipleTimes(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Simulates pressing a key multiple times.
            </summary>
            <param name="key">The key to press.</param>
            <param name="times">The number of times to press the key.</param>
        </member>
        <member name="M:ZS.ZSKeyboard.SimulateEnterKeyPress">
            <summary>
            Simulates pressing the Enter key.
            </summary>
        </member>
        <member name="M:ZS.ZSKeyboard.SimulateEscapeKeyPress">
            <summary>
            Simulates pressing the Escape key.
            </summary>
        </member>
        <member name="M:ZS.ZSKeyboard.SimulateTabKeyPress">
            <summary>
            Simulates pressing the Tab key.
            </summary>
        </member>
        <member name="M:ZS.ZSKeyboard.SimulateBackspaceKeyPress">
            <summary>
            Simulates pressing the Backspace key.
            </summary>
        </member>
        <member name="M:ZS.ZSKeyboard.SimulateDeleteKeyPress">
            <summary>
            Simulates pressing the Delete key.
            </summary>
        </member>
        <member name="M:ZS.ZSKeyboard.GetKeyState(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the current state of a specified key.
            </summary>
            <param name="key">The key to check the state for (e.g., "A", "B", "1", "2").</param>
            <returns>True if the key is pressed, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSKeyboard.GetKeyboardLayout">
            <summary>
            Retrieves the current keyboard layout.
            </summary>
            <returns>The current keyboard layout as a string.</returns>
        </member>
        <member name="M:ZS.ZSKeyboard.GetActiveKeyboardLayoutLanguage">
            <summary>
            Retrieves the language of the active keyboard layout.
            </summary>
            <returns>The language of the active keyboard layout as a string.</returns>
        </member>
        <member name="M:ZS.ZSKeyboard.GetKeyboardState">
            <summary>
            Retrieves the current state of all keyboard keys.
            </summary>
            <returns>An array of booleans indicating the state of each key.</returns>
        </member>
        <member name="M:ZS.ZSKeyboard.GetActiveKeyboardLayoutId">
            <summary>
            Retrieves the identifier of the active keyboard layout.
            </summary>
            <returns>The identifier of the active keyboard layout as an integer.</returns>
        </member>
        <member name="M:ZS.ZSKeyboard.GetCurrentKeyboardLayoutLanguageCode">
            <summary>
            Retrieves the language code (LCID) of the current keyboard layout.
            </summary>
            <returns>The language code (LCID) of the current keyboard layout.</returns>
        </member>
        <member name="M:ZS.ZSKeyboard.ClearLastKeyPressed">
            <summary>
            Clears the last recorded key press.
            </summary>
        </member>
        <member name="M:ZS.ZSKeyboard.GetKeyboardLayoutsCount">
            <summary>
            Retrieves the number of installed keyboard layouts.
            </summary>
            <returns>The number of installed keyboard layouts.</returns>
        </member>
        <member name="M:ZS.ZSKeyboard.GetCurrentKeyboardLayoutId">
            <summary>
            Retrieves the identifier (HKL) of the current keyboard layout.
            </summary>
            <returns>The identifier (HKL) of the current keyboard layout.</returns>
        </member>
        <member name="P:ZS.ZSKeyboard.LastKeyPressed">
            <summary>
            Gets the last key pressed by the user.
            </summary>
        </member>
        <member name="T:ZS.ZSMath">
            <summary>
            Provides Powerful Math Functions For Small Basic.
            </summary>
        </member>
        <member name="M:ZS.ZSMath.Abs(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the absolute value of a specified number.
            </summary>
            <param name="value">A number whose absolute value is to be found.</param>
            <returns>The absolute value of the specified number.</returns>
        </member>
        <member name="M:ZS.ZSMath.Acos(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the angle whose cosine is the specified number.
            </summary>
            <param name="d">A number representing a cosine, where d must be greater than or equal to -1, but less than or equal to 1.</param>
            <returns>The angle, measured in radians, whose cosine is the specified number.</returns>
        </member>
        <member name="M:ZS.ZSMath.Asin(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the angle whose sine is the specified number.
            </summary>
            <param name="d">A number representing a sine, where d must be greater than or equal to -1, but less than or equal to 1.</param>
            <returns>The angle, measured in radians, whose sine is the specified number.</returns>
        </member>
        <member name="M:ZS.ZSMath.Atan(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the angle whose tangent is the specified number.
            </summary>
            <param name="d">A number representing a tangent.</param>
            <returns>The angle, measured in radians, whose tangent is the specified number.</returns>
        </member>
        <member name="M:ZS.ZSMath.Atan2(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="y">The y-coordinate of a point.</param>
            <param name="x">The x-coordinate of a point.</param>
            <returns>The angle, measured in radians, whose tangent is the quotient of two specified numbers.</returns>
        </member>
        <member name="M:ZS.ZSMath.Ceiling(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the smallest integer greater than or equal to the specified number.
            </summary>
            <param name="a">A number.</param>
            <returns>The smallest integer greater than or equal to the specified number.</returns>
        </member>
        <member name="M:ZS.ZSMath.Cos(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
            <param name="d">An angle, measured in radians.</param>
            <returns>The cosine of the specified angle.</returns>
        </member>
        <member name="M:ZS.ZSMath.Cosh(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians.</param>
            <returns>The hyperbolic cosine of the specified angle.</returns>
        </member>
        <member name="M:ZS.ZSMath.Exp(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns e raised to the specified power.
            </summary>
            <param name="d">A number specifying a power.</param>
            <returns>The number e raised to the specified power.</returns>
        </member>
        <member name="M:ZS.ZSMath.Floor(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the largest integer less than or equal to the specified number.
            </summary>
            <param name="d">A number.</param>
            <returns>The largest integer less than or equal to the specified number.</returns>
        </member>
        <member name="M:ZS.ZSMath.IEEERemainder(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the remainder resulting from the division of a specified number by another specified number.
            </summary>
            <param name="x">A dividend.</param>
            <param name="y">A divisor.</param>
            <returns>A number equal to x - (y * Q), where Q is the quotient of x / y rounded to the nearest integer.</returns>
        </member>
        <member name="M:ZS.ZSMath.Log(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the natural (base e) logarithm of a specified number.
            </summary>
            <param name="d">A number whose logarithm is to be found.</param>
            <returns>The natural (base e) logarithm of the specified number.</returns>
        </member>
        <member name="M:ZS.ZSMath.Log10(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="d">A number whose logarithm is to be found.</param>
            <returns>The base 10 logarithm of the specified number.</returns>
        </member>
        <member name="M:ZS.ZSMath.Max(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the larger of two specified numbers.
            </summary>
            <param name="val1">The first of two numbers to compare.</param>
            <param name="val2">The second of two numbers to compare.</param>
            <returns>The larger of the two numbers.</returns>
        </member>
        <member name="M:ZS.ZSMath.Min(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the smaller of two specified numbers.
            </summary>
            <param name="val1">The first of two numbers to compare.</param>
            <param name="val2">The second of two numbers to compare.</param>
            <returns>The smaller of the two numbers.</returns>
        </member>
        <member name="M:ZS.ZSMath.Pow(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="x">A double-precision floating-point number to be raised to a power.</param>
            <param name="y">A double-precision floating-point number that specifies a power.</param>
            <returns>The number x raised to the power y.</returns>
        </member>
        <member name="M:ZS.ZSMath.Round(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Rounds a specified number to the nearest integer.
            </summary>
            <param name="a">A number to be rounded.</param>
            <returns>The integer nearest to the specified number.</returns>
        </member>
        <member name="M:ZS.ZSMath.Sign(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns a value indicating the sign of a number.
            </summary>
            <param name="value">A signed number.</param>
            <returns>A number indicating the sign of the specified number.</returns>
        </member>
        <member name="M:ZS.ZSMath.Sin(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the sine of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians.</param>
            <returns>The sine of the specified angle.</returns>
        </member>
        <member name="M:ZS.ZSMath.Sinh(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the hyperbolic sine of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians.</param>
            <returns>The hyperbolic sine of the specified angle.</returns>
        </member>
        <member name="M:ZS.ZSMath.Sqrt(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the square root of a specified number.
            </summary>
            <param name="d">A number.</param>
            <returns>The square root of the specified number.</returns>
        </member>
        <member name="M:ZS.ZSMath.Tan(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the tangent of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians.</param>
            <returns>The tangent of the specified angle.</returns>
        </member>
        <member name="M:ZS.ZSMath.Tanh(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians.</param>
            <returns>The hyperbolic tangent of the specified angle.</returns>
        </member>
        <member name="M:ZS.ZSMath.Truncate(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Calculates the integral part of a specified number.
            </summary>
            <param name="d">A number to truncate.</param>
            <returns>The integral part of the specified number.</returns>
        </member>
        <member name="M:ZS.ZSMath.DecimalToFraction(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts a decimal number (fractional) to its fractional string representation.
            </summary>
            <param name="decimalValue">A decimal value to convert to a fraction.</param>
            <returns>A string representing the fraction (e.g., "1/2").</returns>
        </member>
        <member name="M:ZS.ZSMath.FractionToDecimal(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts a fraction string (e.g., "3/4") to its decimal representation.
            </summary>
            <param name="fraction">A fraction string to convert to decimal.</param>
            <returns>The decimal value of the fraction.</returns>
        </member>
        <member name="M:ZS.ZSMath.GCD(System.Int32,System.Int32)">
            <summary>
            Finds the greatest common divisor (GCD) of two numbers.
            Used for simplifying fractions.
            </summary>
            <param name="a">The first number.</param>
            <param name="b">The second number.</param>
            <returns>The greatest common divisor of the two numbers.</returns>
        </member>
        <member name="P:ZS.ZSMath.E">
            <summary>
            Represents the natural logarithmic base, specified by the constant, e.
            </summary>
        </member>
        <member name="P:ZS.ZSMath.PI">
            <summary>
            Represents the ratio of the circumference of a circle to its diameter, specified by the constant, PI.
            </summary>
        </member>
        <member name="T:ZS.ZSPath">
            <summary>
            Provides System.IO.Path Functions in small basic.
            </summary>
        </member>
        <member name="M:ZS.ZSPath.ChangeExtension(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Changes the extension of a path string.
            </summary>
            <param name="path">The path information to modify.</param>
            <param name="extension">The new extension. Specify null to remove an existing extension from path.</param>
            <returns>The modified path information.</returns>
        </member>
        <member name="M:ZS.ZSPath.Combine(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Combines two strings into a path.
            </summary>
            <param name="path1">The first path to combine.</param>
            <param name="path2">The second path to combine.</param>
            <returns>The combined paths.</returns>
        </member>
        <member name="M:ZS.ZSPath.Combine3(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Combines three strings into a path.
            </summary>
            <param name="path1">The first path to combine.</param>
            <param name="path2">The second path to combine.</param>
            <param name="path3">The third path to combine.</param>
            <returns>The combined paths.</returns>
        </member>
        <member name="M:ZS.ZSPath.Combine4(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Combines four strings into a path.
            </summary>
            <param name="path1">The first path to combine.</param>
            <param name="path2">The second path to combine.</param>
            <param name="path3">The third path to combine.</param>
            <param name="path4">The fourth path to combine.</param>
            <returns>The combined paths.</returns>
        </member>
        <member name="M:ZS.ZSPath.GetDirectoryName(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>The directory information.</returns>
        </member>
        <member name="M:ZS.ZSPath.GetExtension(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the extension of the specified path string.
            </summary>
            <param name="path">The path string from which to get the extension.</param>
            <returns>The extension of the specified path.</returns>
        </member>
        <member name="M:ZS.ZSPath.GetFileName(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>The characters after the last directory character in path.</returns>
        </member>
        <member name="M:ZS.ZSPath.GetFileNameWithoutExtension(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the file name of the specified path string without the extension.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>The string returned by GetFileName, minus the last period and all characters following it.</returns>
        </member>
        <member name="M:ZS.ZSPath.GetFullPath(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <returns>The fully qualified location of path.</returns>
        </member>
        <member name="M:ZS.ZSPath.GetInvalidFileNameChars">
            <summary>
            Returns an array containing the characters that are not allowed in file names.
            </summary>
            <returns>An array containing the characters that are not allowed in file names.</returns>
        </member>
        <member name="M:ZS.ZSPath.GetInvalidPathChars">
            <summary>
            Returns an array containing the characters that are not allowed in path names.
            </summary>
            <returns>An array containing the characters that are not allowed in path names.</returns>
        </member>
        <member name="M:ZS.ZSPath.GetPathRoot(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the root directory information of the specified path.
            </summary>
            <param name="path">The path from which to obtain root directory information.</param>
            <returns>A string containing the root directory of path.</returns>
        </member>
        <member name="M:ZS.ZSPath.GetRandomFileName">
            <summary>
            Returns a random file name.
            </summary>
            <returns>A random file name.</returns>
        </member>
        <member name="M:ZS.ZSPath.GetTempFileName">
            <summary>
            Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.
            </summary>
            <returns>The full path of the temporary file.</returns>
        </member>
        <member name="M:ZS.ZSPath.GetTempPath">
            <summary>
            Returns the path of the current system's temporary folder.
            </summary>
            <returns>The path to the temporary folder.</returns>
        </member>
        <member name="M:ZS.ZSPath.HasExtension(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Determines whether a path includes a file name extension.
            </summary>
            <param name="path">The path to search for an extension.</param>
            <returns>true if the path includes a file name extension; otherwise, false.</returns>
        </member>
        <member name="M:ZS.ZSPath.IsPathRooted(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets a value indicating whether the specified path string contains a root.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if path contains a root; otherwise, false.</returns>
        </member>
        <member name="T:ZS.ZSReflection">
            <summary>
            The Reflection For Small Basic.
            Used by many extension classes.
            </summary>
        </member>
        <member name="M:ZS.ZSReflection.InvokeStaticMethod(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive[])">
            <summary>
            Invokes A Static Method.
            </summary>
            <param name="Path">The Path to dll.</param>
            <param name="Class">The Namespace.Class</param>
            <param name="Method">The Method Name</param>
            <param name="parameters">The array of Parameters</param>
            <returns>The Result</returns>
        </member>
        <member name="M:ZS.ZSReflection.GetPre(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Get Some Predefined Types And Assembly.
            </summary>
            <param name="Option">
            1 - Current Program.
            2 - Current Class of program.
            3 - Assembly Key Of SmallBasicLibaray.dll
            4 - Assembly Key Of ZS.dll
            </param>
            <returns>The Result</returns>
        </member>
        <member name="M:ZS.ZSReflection.LoadAssembly(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Loads A Assembly.
            A exe or dll is assembly.
            </summary>
            <param name="Path">The Path Of Assembly.</param>
            <returns>The Assembly Key.</returns>
        </member>
        <member name="M:ZS.ZSReflection.GetTypes(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Get All Types in a assembly.
            </summary>
            <param name="Key">The Key</param>
            <returns>Array of name of types.</returns>
        </member>
        <member name="M:ZS.ZSReflection.LoadType(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Loads A Type.
            </summary>
            <param name="Key">The Assembly Key.</param>
            <param name="Type">The Type Name (e.g., 'Namespace.ClassName').</param>
            <returns>The Type Key</returns>
        </member>
        <member name="M:ZS.ZSReflection.GetMethods(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets A Array of methods in a type.
            </summary>
            <param name="Type">The Type Key.</param>
            <returns>Array of methods.</returns>
        </member>
        <member name="M:ZS.ZSReflection.GetFields(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets A Array of Fields in a type.
            </summary>
            <param name="Type">The Type Key.</param>
            <returns>Array of Fields.</returns>
        </member>
        <member name="M:ZS.ZSReflection.GetEvents(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets A Array of Events in a type.
            </summary>
            <param name="Type">The Type Key.</param>
            <returns>Array of Events.</returns>
        </member>
        <member name="M:ZS.ZSReflection.GetProperties(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets A Array of Properties:(getters and setters). in a type.
            </summary>
            <param name="Type">The Type Key.</param>
            <returns>Array of Properties.</returns>
        </member>
        <member name="M:ZS.ZSReflection.InvokeMethod(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive[])">
            <summary>
            Invokes a method from type.
            </summary>
            <param name="Type">The Type Key.</param>
            <param name="Method">The Method Name.</param>
            <param name="Args">The Array Of Parameters.</param>
            <returns>The Result.</returns>
        </member>
        <member name="M:ZS.ZSReflection.SetField(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sets a field's value with type safety.
            </summary>
            <param name="Key">The Type Key.</param>
            <param name="FieldName">The Field Name.</param>
            <param name="Value">The Value To Set.</param>
        </member>
        <member name="M:ZS.ZSReflection.GetField(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets a field's value with type safety.
            </summary>
            <param name="Key">The Type Key</param>
            <param name="FieldName">The Field Name.</param>
            <returns>The Result.</returns>
        </member>
        <member name="M:ZS.ZSReflection.GetFieldInfo(System.Type,System.String)">
            <summary>
            Retrieves the FieldInfo of a specified field.
            </summary>
            <param name="targetType">The type containing the field.</param>
            <param name="fieldName">The name of the field to retrieve.</param>
            <returns>The FieldInfo if found, otherwise null.</returns>
        </member>
        <member name="M:ZS.ZSReflection.GetProperty(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the property value with type safety.
            </summary>
            <param name="Key">The Type Key.</param>
            <param name="PropertyName">The Property Name.</param>
            <returns>The Result.</returns>
        </member>
        <member name="M:ZS.ZSReflection.SetProperty(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sets a property value with type safety.
            </summary>
            <param name="Key">The Type Key.</param>
            <param name="PropertyName">The Property Name.</param>
            <param name="Value">The Value To Set.</param>
        </member>
        <member name="M:ZS.ZSReflection.GetPropertyInfo(System.Type,System.String)">
            <summary>
            Retrieves the PropertyInfo of a specified property.
            </summary>
            <param name="targetType">The type containing the property.</param>
            <param name="propertyName">The name of the property to retrieve.</param>
            <returns>The PropertyInfo if found, otherwise null.</returns>
        </member>
        <member name="M:ZS.ZSReflection.TypeDetails(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Retrieves details about a type based on a specified key and option.
            </summary>
            <param name="Key">The key used to identify the type from a collection.</param>
            <param name="Option">
            1 - Assembly qualified name: The full name of the type including its namespace and assembly.
            
            2 - Attributes: The attributes associated with the type, represented as a string.
            
            3 - Full name: The fully qualified name of the type, including its namespace.
            
            4 - GUID: The unique identifier (GUID) associated with the type.
            
            5 - Is enum: Indicates whether the type is an enumeration (true/false).
            
            6 - Is visible: Determines if the type is visible outside its assembly (true/false).
            
            7 - Name: The name of the type without its namespace.
            
            8 - Namespace: The namespace the type belongs to.
            
            9 - Type handle: The runtime handle for the type, useful for low-level type operations.
            </param>
            <returns>Returns the requested detail about the specified type based on the provided option.</returns>
        </member>
        <member name="M:ZS.ZSReflection.MethodDetail(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Retrieves details about a specified method from a given type.
            </summary>
            <param name="Key">The key representing the type from which to retrieve the method.</param>
            <param name="Method">The name of the method to retrieve details for.</param>
            <param name="Option">
            1 - Method Name.
            2 - Method Description.
            3 - Method Attributes.
            4 - Parameter Types.
            5 - Return Type.
            6 - Method Handle.
            7 - IL Code as a byte array.
            8 - Maximum Stack Size.
            9 - Local Variables (index and type).
            </param>
            <returns>The requested detail about the method.</returns>
        </member>
        <member name="M:ZS.ZSReflection.GetFieldValue(System.Type,System.String)">
            <summary>
            Retrieves the value of a field from the specified type.
            </summary>
            <param name="targetType">The type containing the field.</param>
            <param name="fieldName">The name of the field to retrieve.</param>
            <returns>The value of the specified field, or null if the field is not found.</returns>
        </member>
        <member name="M:ZS.ZSReflection.SetFieldValue(System.Type,System.String,System.Object)">
            <summary>
            Sets the value of a field in the specified type.
            </summary>
            <param name="targetType">The type containing the field.</param>
            <param name="fieldName">The name of the field to set.</param>
            <param name="value">The new value for the field.</param>
        </member>
        <member name="M:ZS.ZSReflection.InvokeMethod(System.Type,System.String,System.Object[])">
            <summary>
            Invokes a method from the specified type.
            </summary>
            <param name="targetType">The type containing the method.</param>
            <param name="methodName">The name of the method to invoke.</param>
            <param name="methodArgs">The arguments to pass to the method.</param>
            <returns>The result of the method invocation, or null if the method is void or not found.</returns>
        </member>
        <member name="T:ZS.ZSPowerShell">
            <summary>
            Provides methods for running PowerShell commands.
            </summary>
        </member>
        <member name="M:ZS.ZSPowerShell.RunPowerShellScript(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Executes a PowerShell script directly from a single string.
            </summary>
            <param name="script">The PowerShell script to execute.</param>
            <returns>A string containing the output and errors from the PowerShell script execution.</returns>
        </member>
        <member name="M:ZS.ZSPowerShell.Run(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Executes a PowerShell command and returns the result.
            </summary>
            <param name="command">The PowerShell command to execute.</param>
            <returns>A string containing the output and errors from the PowerShell command.</returns>
            <remarks>
            This method starts a new PowerShell process to execute the specified command. 
            Output and errors are combined into a single string.
            </remarks>
        </member>
        <member name="M:ZS.ZSPowerShell.RunPowerShellScriptFromArray(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Executes a PowerShell script provided as an array of strings.
            </summary>
            <param name="scriptLines">Array of strings, each representing a line of the PowerShell script.</param>
            <returns>A string containing the output and errors from the PowerShell script execution.</returns>
        </member>
        <member name="M:ZS.ZSPowerShell.RunPowerShellFile(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Executes a PowerShell script file and returns the output.
            </summary>
            <param name="filePath">The path to the PowerShell script file.</param>
            <returns>A string containing the output and errors from the PowerShell script execution.</returns>
        </member>
        <member name="M:ZS.ZSPowerShell.RunPowerShell(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Executes a PowerShell script provided as an array of strings.
            Saves the script in a temporary file, runs it, returns the output, and deletes the script file.
            </summary>
            <param name="scriptLines">Array of strings, each representing a line of the PowerShell script.</param>
            <returns>A string containing the output and errors from the PowerShell script execution.</returns>
        </member>
        <member name="T:ZS.ZSProcess">
            <summary>
            Provides methods and properties for managing processes.
            This class allows you to start new processes, manage process information, and interact with running processes.
            It includes functionalities for:
            - Starting processes with or without arguments
            - Retrieving process IDs and names
            - Getting and setting process-related information such as file path, arguments, priority, and more
            </summary>
        </member>
        <member name="M:ZS.ZSProcess.StartProcess(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Starts a new process with the specified executable file path.
            </summary>
            <param name="filePath">The path of the executable file to start. Example: "C:\\Windows\\System32\\notepad.exe"</param>
        </member>
        <member name="M:ZS.ZSProcess.StartProcessWithArgs(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Starts a new process with the specified executable file path and arguments.
            </summary>
            <param name="filePath">The path of the executable file to start. Example: "C:\\Windows\\System32\\cmd.exe"</param>
            <param name="arguments">The arguments to pass to the executable file. Example: "/c echo Hello World"</param>
        </member>
        <member name="M:ZS.ZSProcess.StartProcessWithInfo(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Starts a new process with the specified ProcessStartInfo.
            </summary>
            <param name="filePath">The path of the executable file to start. Example: "C:\\Windows\\System32\\notepad.exe"</param>
            <param name="arguments">The arguments to pass to the executable file. Example: ""</param>
        </member>
        <member name="M:ZS.ZSProcess.GetProcessIds">
            <summary>
            Gets a list of process IDs for all running processes on the local machine.
            </summary>
            <returns>A comma-separated string of process IDs. Example: "1234,5678"</returns>
        </member>
        <member name="M:ZS.ZSProcess.GetProcessName(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the process name for a specified process ID.
            </summary>
            <param name="id">The process ID. Example: 1234</param>
            <returns>The process name. Example: "notepad"</returns>
        </member>
        <member name="M:ZS.ZSProcess.GetProcessId">
            <summary>
            Gets the process ID of the currently managed process.
            </summary>
            <returns>The process ID. Example: 1234</returns>
        </member>
        <member name="M:ZS.ZSProcess.GetStartTime">
            <summary>
            Gets the start time of the currently managed process.
            </summary>
            <returns>The start time of the process. Example: "2024-07-24 14:30:00"</returns>
        </member>
        <member name="M:ZS.ZSProcess.GetExitTime">
            <summary>
            Gets the exit time of the currently managed process.
            </summary>
            <returns>The exit time of the process. Example: "2024-07-24 15:00:00"</returns>
        </member>
        <member name="M:ZS.ZSProcess.HasExited">
            <summary>
            Gets a value indicating whether the currently managed process has exited.
            </summary>
            <returns>true if the process has exited; otherwise, false.</returns>
        </member>
        <member name="M:ZS.ZSProcess.GetMainWindowTitle">
            <summary>
            Gets the title of the main window of the currently managed process.
            </summary>
            <returns>The main window title. Example: "Untitled - Notepad"</returns>
        </member>
        <member name="M:ZS.ZSProcess.IsResponding">
            <summary>
            Gets a value indicating whether the currently managed process is responding.
            </summary>
            <returns>true if the process is responding; otherwise, false.</returns>
        </member>
        <member name="M:ZS.ZSProcess.GetTotalProcessorTime">
            <summary>
            Gets the total processor time for the currently managed process.
            </summary>
            <returns>The total processor time. Example: "00:00:01.2345678"</returns>
        </member>
        <member name="P:ZS.ZSProcess.FilePath">
            <summary>
            Gets or sets the file path of the application to start.
            </summary>
            <example>
            To set the file path: <br />
            ZSProcess.FilePath = "C:\\Windows\\System32\\notepad.exe"
            </example>
        </member>
        <member name="P:ZS.ZSProcess.Arguments">
            <summary>
            Gets or sets the arguments to pass to the executable file.
            </summary>
            <example>
            To set arguments: <br />
            ZSProcess.Arguments = "/c echo Hello World"
            </example>
        </member>
        <member name="P:ZS.ZSProcess.UseShellExecute">
            <summary>
            Gets or sets a value that indicates whether to use the operating system shell to start the process.
            </summary>
            <example>
            To enable shell execution: <br />
            ZSProcess.UseShellExecute = true
            </example>
        </member>
        <member name="P:ZS.ZSProcess.RedirectStandardOutput">
            <summary>
            Gets or sets a value that determines whether to redirect standard input, output, and error streams.
            </summary>
            <example>
            To enable redirection: <br />
            ZSProcess.RedirectStandardOutput = true
            </example>
        </member>
        <member name="P:ZS.ZSProcess.PriorityClass">
            <summary>
            Gets or sets the value of the process priority.
            </summary>
            <example>
            To set priority class: <br />
            ZSProcess.PriorityClass = "High"
            </example>
        </member>
        <member name="P:ZS.ZSProcess.CreateNoWindow">
            <summary>
            Gets or sets a value that indicates whether to create a new window for the process.
            </summary>
            <example>
            To disable window creation: <br />
            ZSProcess.CreateNoWindow = true
            </example>
        </member>
        <member name="T:ZS.ZSProcessInfo">
            <summary>
            Provides ProcessInfo Functions from Small Basic.
            First Set All the setting then call the method ZSProcessInfo.Start()
            </summary>
        </member>
        <member name="M:ZS.ZSProcessInfo.Start">
            <summary>
            Starts the process using the specified settings.
            </summary>
        </member>
        <member name="M:ZS.ZSProcessInfo.GetOutput(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the output of the process by its ID.
            Returns the standard output if available, otherwise returns an error message.
            </summary>
            <param name="processId">The ID of the process.</param>
            <returns>A string containing the process output or an error message.</returns>
        </member>
        <member name="M:ZS.ZSProcessInfo.StartAndGetOutput">
            <summary>
            Starts the process using the specified settings and returns the standard output.
            Returns the standard output if the process starts and completes successfully, otherwise returns the error message.
            </summary>
            <returns>A string containing the process output or an error message.</returns>
        </member>
        <member name="P:ZS.ZSProcessInfo.Arguments">
            <summary>
            Gets or sets the set of command-line arguments to use when starting the application.
            Setting For ZSProcess.Start()
            </summary>
        </member>
        <member name="P:ZS.ZSProcessInfo.CreateNoWindow">
            <summary>
            Gets or sets a value indicating whether to start the process in a new window.
            Setting For ZSProcess.Start()
            </summary>
        </member>
        <member name="P:ZS.ZSProcessInfo.Domain">
            <summary>
            Gets or sets the domain to use when starting the process.
            Setting For ZSProcess.Start()
            </summary>
        </member>
        <member name="P:ZS.ZSProcessInfo.UseShellExecute">
            <summary>
            Gets or sets a value indicating whether to use the operating system shell to start the process.
            Setting For ZSProcess.Start()
            </summary>
        </member>
        <member name="P:ZS.ZSProcessInfo.FileName">
            <summary>
            Gets or sets the application or document to start.
            Setting For ZSProcess.Start()
            </summary>
        </member>
        <member name="P:ZS.ZSProcessInfo.RedirectStandardError">
            <summary>
            Gets or sets a value indicating whether the error output of an application is written to the StandardError stream.
            Setting For ZSProcess.Start()
            </summary>
        </member>
        <member name="P:ZS.ZSProcessInfo.RedirectStandardInput">
            <summary>
            Gets or sets a value indicating whether the input for an application is read from the StandardInput stream.
            Setting For ZSProcess.Start()
            </summary>
        </member>
        <member name="P:ZS.ZSProcessInfo.RedirectStandardOutput">
            <summary>
            Gets or sets a value indicating whether the output of an application is written to the StandardOutput stream.
            Setting For ZSProcess.Start()
            </summary>
        </member>
        <member name="P:ZS.ZSProcessInfo.UserName">
            <summary>
            Gets or sets the user name to use when starting the process.
            Setting For ZSProcess.Start()
            </summary>
        </member>
        <member name="P:ZS.ZSProcessInfo.Password">
            <summary>
            Gets or sets the password for the user name when starting the process.
            Note: For security reasons, setting passwords is not directly supported in this wrapper.
            Setting For ZSProcess.Start()
            </summary>
        </member>
        <member name="P:ZS.ZSProcessInfo.Verb">
            <summary>
            Gets or sets the verb to use when opening the application or document specified by the FileName property.
            Setting For ZSProcess.Start()
            </summary>
        </member>
        <member name="P:ZS.ZSProcessInfo.WindowStyle">
            <summary>
            Gets or sets the Window style to use for the process.
            Setting For ZSProcess.Start()
            </summary>
        </member>
        <member name="P:ZS.ZSProcessInfo.WorkingDirectory">
            <summary>
            Gets or sets the working directory for the process to be started.
            Setting For ZSProcess.Start()
            </summary>
        </member>
        <member name="P:ZS.ZSProcessInfo.StandardOutputEncoding">
            <summary>
            Gets or sets a value indicating whether the output of an application is written to the StandardOutput stream.
            Setting For ZSProcess.Start()
            </summary>
        </member>
        <member name="P:ZS.ZSProcessInfo.EnvironmentVariables">
            <summary>
            Gets or sets the environment variables that apply to this process and its child processes.
            Use a semicolon (;) to separate multiple variables.
            Example: "Path=C:\Windows\System32;TEMP=C:\Temp"
            Setting For ZSProcess.Start()
            </summary>
        </member>
        <member name="P:ZS.ZSProcessInfo.ErrorDialog">
            <summary>
            Gets or sets a value indicating whether an error dialog box is displayed to the user if the process cannot be started.
            Setting For ZSProcess.Start()
            </summary>
        </member>
        <member name="P:ZS.ZSProcessInfo.LoadUserProfile">
            <summary>
            Gets or sets a value indicating whether the Windows user profile should be loaded.
            </summary>
        </member>
        <member name="P:ZS.ZSProcessInfo.PasswordInClearText">
            <summary>
            Gets or sets the password in clear text to use when starting the process.
            </summary>
        </member>
        <member name="T:ZS.ZSRayColour">
            <summary>
            Raylib Colours.
            </summary>
        </member>
        <member name="T:ZS.ZSRaylib">
            <summary>
            Makes The raylib in SB
            </summary>
        </member>
        <member name="M:ZS.ZSRaylib.InitWindow(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Initialize window and OpenGL context
            </summary>
            <param name="Width">The Width of window</param>
            <param name="Height">The Height of window</param>
            <param name="Title">The Title of window</param>
        </member>
        <member name="M:ZS.ZSRaylib.WindowHandle">
            <summary>
            The Raylib Window Handle.
            </summary>
            <returns>The Handle.</returns>
        </member>
        <member name="M:ZS.ZSRaylib.CloseWindow">
            <summary>
            Close window and unload OpenGL context
            Close window just add at end of code
            </summary>
        </member>
        <member name="M:ZS.ZSRaylib.ToggleFullscreen">
            <summary>
             Toggle fullscreen mode (only PLATFORM_DESKTOP)
            </summary>
        </member>
        <member name="M:ZS.ZSRaylib.UnhideWindow">
            <summary>
             Show the window 
            </summary>
        </member>
        <member name="M:ZS.ZSRaylib.HideWindow">
            <summary>
            Hide the window
            </summary>
        </member>
        <member name="M:ZS.ZSRaylib.SetWindowTitle(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set title for window (only PLATFORM_DESKTOP)
            </summary>
            <param name="Title">The Title</param>
        </member>
        <member name="M:ZS.ZSRaylib.SetWindowPosition(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set window position on screen (only PLATFORM_DESKTOP)
            </summary>
            <param name="x">x-axis</param>
            <param name="y">y-axis</param>
        </member>
        <member name="M:ZS.ZSRaylib.SetWindowMonitor(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set monitor for the current window (fullscreen mode)
            </summary>
            <param name="Number">The monitor number 1 for second if available</param>
        </member>
        <member name="M:ZS.ZSRaylib.SetWindowIcon(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set icon for window (only PLATFORM_DESKTOP)
            </summary>
            <param name="Path">The path of image</param>
        </member>
        <member name="M:ZS.ZSRaylib.SetWindowMinSize(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)
            </summary>
            <param name="Width">The width</param>
            <param name="Height">The height</param>
        </member>
        <member name="M:ZS.ZSRaylib.SetWindowSize(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set window dimensions
            </summary>
            <param name="Width">The width</param>
            <param name="Height">The height</param>
        </member>
        <member name="M:ZS.ZSRaylib.GetMonitorWidth(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Get primary monitor width
            </summary>
            <param name="Monitor">The monitor number start from 0 as first</param>
            <returns>Width</returns>
        </member>
        <member name="M:ZS.ZSRaylib.GetMonitorHeight(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Get primary monitor height
            </summary>
            <param name="Monitor">The monitor number start from 0 as first</param>
            <returns>Height</returns>
        </member>
        <member name="M:ZS.ZSRaylib.GetMonitorPhysicalWidth(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Get primary monitor physical width in millimetres
            </summary>
            <param name="Monitor">The monitor number start from 0 as first</param>
            <returns>Width</returns>
        </member>
        <member name="M:ZS.ZSRaylib.GetMonitorPhysicalHeight(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Get primary monitor physical height in millimetres
            </summary>
            <param name="Monitor">The monitor number start from 0 as first</param>
            <returns>Height</returns>
        </member>
        <member name="M:ZS.ZSRaylib.GetWindowPosition">
            <summary>
            Get window position XY on monitor
            </summary>
            <returns>XY position</returns>
        </member>
        <member name="M:ZS.ZSRaylib.GetMonitorName(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Get the human-readable, UTF-8 encoded name of the primary monitor
            </summary>
            <param name="Monitor">The monitor number start from 0 as first</param>
            <returns>Name</returns>
        </member>
        <member name="M:ZS.ZSRaylib.GetClipboardText">
            <summary>
            Get clipboard text content
            </summary>
            <returns>The text</returns>
        </member>
        <member name="M:ZS.ZSRaylib.SetClipboardText(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set clipboard text content
            </summary>
            <param name="Text">The text</param>
        </member>
        <member name="M:ZS.ZSRaylib.ShowCursor">
            <summary>
            Shows cursor
            </summary>
        </member>
        <member name="M:ZS.ZSRaylib.HideCursor">
            <summary>
            Hides cursor
            </summary>
        </member>
        <member name="M:ZS.ZSRaylib.EnableCursor">
            <summary>
            Enables cursor (unlock cursor) 
            </summary>
        </member>
        <member name="M:ZS.ZSRaylib.DisableCursor">
            <summary>
            Disables cursor (lock cursor)
            </summary>
        </member>
        <member name="M:ZS.ZSRaylib.ClearBackground(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set background color (framebuffer clear color)
            </summary>
            <param name="Colour">The Hex Value Of Colour.</param>
        </member>
        <member name="M:ZS.ZSRaylib.BeginDrawing">
            <summary>
            Setup canvas (framebuffer) to start drawing.
            </summary>
        </member>
        <member name="M:ZS.ZSRaylib.EndDrawing">
            <summary>
            End canvas drawing and swap buffers (double buffering).
            </summary>
        </member>
        <member name="M:ZS.ZSRaylib.BeginMode2D(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Initialize 2D mode with custom camera (2D).
            </summary>
            <param name="CameraName">The 2D Camera Name.</param>
        </member>
        <member name="M:ZS.ZSRaylib.EndMode2D">
            <summary>
            Ends 2D mode with custom camera.
            </summary>
        </member>
        <member name="M:ZS.ZSRaylib.BeginMode3D(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Initializes 3D mode with custom camera (3D).
            </summary>
            <param name="CameraName">The 3D Camera Name.</param>
        </member>
        <member name="M:ZS.ZSRaylib.EndMode3D">
            <summary>
            Ends 3D mode and returns to default 2D orthographic mode.
            </summary>
        </member>
        <member name="M:ZS.ZSRaylib.BeginTextureMode(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Initializes render texture for drawing.
            </summary>
            <param name="Name">The Render Texture Name.</param>
        </member>
        <member name="M:ZS.ZSRaylib.EndTextureMode">
            <summary>
            Ends drawing to render texture.
            </summary>
        </member>
        <member name="M:ZS.ZSRaylib.BeginScissorMode(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Begin scissor mode (define screen area for following drawing).
            </summary>
            <param name="X">The X Pos</param>
            <param name="Y">The Y Pos</param>
            <param name="Width">The Width.</param>
            <param name="Height">The Height.</param>
        </member>
        <member name="M:ZS.ZSRaylib.EndScissorMode">
            <summary>
            End scissor mode.
            </summary>
        </member>
        <member name="M:ZS.ZSRaylib.GetMouseRay(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the ray of mouse position and store it.
            if want get details of ray from ZSRS.GetRayProperties
            </summary>
            <param name="Name">The Name of ray.</param>
            <param name="Mouse">the X-Y cordinates of mouse.</param>
            <param name="Camera">the 3D Camera Name.</param>
            <returns>Ray Name</returns>
        </member>
        <member name="M:ZS.ZSRaylib.SetTargetFPS(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set the target FPS (maximum frames per second).
            </summary>
            <param name="FPS">Target frames per second (e.g., 60).</param>
        </member>
        <member name="M:ZS.ZSRaylib.GetFPS">
            <summary>
            Returns the current FPS (frames per second).
            </summary>
            <returns>The current FPS as an integer.</returns>
        </member>
        <member name="M:ZS.ZSRaylib.GetFrameTime">
            <summary>
            Returns the time in seconds for the last frame drawn.
            </summary>
            <returns>The time in seconds as a float.</returns>
        </member>
        <member name="M:ZS.ZSRaylib.GetTime">
            <summary>
            Returns the elapsed time in seconds since InitWindow().
            </summary>
            <returns>The elapsed time in seconds as a double.</returns>
        </member>
        <member name="P:ZS.ZSRaylib.WindowShouldClose">
            <summary>
            Check if application should close (KEY_ESCAPE pressed or windows close icon clicked)
            Does window is closed
            </summary>
        </member>
        <member name="P:ZS.ZSRaylib.IsWindowReady">
            <summary>
            Check if window has been initialized successfully
            </summary>
        </member>
        <member name="P:ZS.ZSRaylib.IsWindowFullscreen">
            <summary>
            Check if window is currently fullscreen
            </summary>
        </member>
        <member name="P:ZS.ZSRaylib.IsWindowHidden">
            <summary>
            Check if window is currently hidden (only PLATFORM_DESKTOP)
            </summary>
        </member>
        <member name="P:ZS.ZSRaylib.IsWindowMinimized">
            <summary>
            Check if window is currently minimized (only PLATFORM_DESKTOP)
            </summary>
        </member>
        <member name="P:ZS.ZSRaylib.IsWindowResized">
            <summary>
            Check if window has been resized last frame
            </summary>
        </member>
        <member name="P:ZS.ZSRaylib.GetScreenWidth">
            <summary>
            Get current screen width
            </summary>
        </member>
        <member name="P:ZS.ZSRaylib.GetScreenHeight">
            <summary>
            Get current screen height
            </summary>
        </member>
        <member name="P:ZS.ZSRaylib.GetMonitorCount">
            <summary>
            Get number of connected monitors
            </summary>
        </member>
        <member name="P:ZS.ZSRaylib.IsCursorHidden">
            <summary>
            Check if cursor is not visible
            </summary>
        </member>
        <member name="T:ZS.ZSRay">
            <summary>
            some raylib struct added for more functionality not used so much.
            you have to view raylib doucumenatation to learn how to use them.
            not so much good summary provided here.
            </summary>
        </member>
        <member name="M:ZS.ZSRay.CreateRenderTexture(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Creates A Render Texture.
            </summary>
            <param name="Name">The Name For Render Texture.</param>
            <param name="Width">Yhe width of render texture.</param>
            <param name="Height">the height of render texture.</param>
            <returns>the render texture key.</returns>
        </member>
        <member name="M:ZS.ZSRay.GetTextureId(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            gets the id of render texture.
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:ZS.ZSRay.GetTexture(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            adds the render texture to ZSTexture2d
            </summary>
            <param name="Name">the name of render texture.</param>
            <param name="TextureName">the name of texture2d.</param>
            <returns>the texture 2d key.</returns>
        </member>
        <member name="M:ZS.ZSRay.GetDepthTexture(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            gets the depth texture of render texture.
            </summary>
            <param name="Name">the name of render texture.</param>
            <param name="TextureName">the ZSTexture2d name.</param>
            <returns>the texture2d key.</returns>
        </member>
        <member name="M:ZS.ZSRay.HasDepthTexture(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            does render texture has depthtexture.
            </summary>
            <param name="Name">the name of render texture 2d.</param>
            <returns>true or false.</returns>
        </member>
        <member name="M:ZS.ZSRay.GetTexture2D_Detail(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets a Texture2D Details.
            Use Raylib Documentation to learn.
            </summary>
            <param name="Name">The Name Of Texture2D.</param>
            <param name="Option">
            1 - Texture id.
            2 - Texture Width.
            3 - Texture Height.
            4 - Mipmaps.
            5 - Format.
            </param>
            <returns>Result.</returns>
        </member>
        <member name="M:ZS.ZSRay.GetRayProperties(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets The Properties of A Ray.
            </summary>
            <param name="Name">The Name Of Ray.</param>
            <param name="Option">
            1 - position
            2 - direction
            </param>
            <returns>Result</returns>
        </member>
        <member name="T:ZS.ZSStorage">
            <summary>
            The Isolated Storage For Small Basic.
            You Can Store Your Varibles Here For Permenatly Even if the exe close.
            Default File Name Is None.
            Use Delete Storage For Deleting The File.
            </summary>
        </member>
        <member name="M:ZS.ZSStorage.SetValue(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sets A Value for a variable. 
            </summary>
            <param name="Name">The Name Of Variable.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:ZS.ZSStorage.GetValue(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the value for a give variable.
            </summary>
            <param name="Name">The name of variable.</param>
            <returns>The value for variable or a empty string if no variable with name.</returns>
        </member>
        <member name="M:ZS.ZSStorage.ListVars">
            <summary>
            List the varibles stored in file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZS.ZSStorage.DeleteStorageFile">
            <summary>
            Deletes the file.
            </summary>
        </member>
        <member name="M:ZS.ZSStorage.SetFileName(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Set the file name for current.
            </summary>
            <param name="FileName">the file name</param>
        </member>
        <member name="T:ZS.ZSSVb">
            <summary>
            sVB In SB.
            just for showing svb can also used in small basic.
            Copy SVB dll to program dir
            </summary>
        </member>
        <member name="M:ZS.ZSSVb.GW">
            <summary>
            Show The GW.
            </summary>
        </member>
        <member name="M:ZS.ZSSVb.AddButton(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Add A Button
            </summary>
            <param name="Caption">The Caption</param>
            <param name="Left">X Axis</param>
            <param name="Top">y Axis</param>
            <returns>Button Name</returns>
        </member>
        <member name="M:ZS.ZSSVb.Move(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Move A Shape.
            </summary>
            <param name="Control">The Shape Name</param>
            <param name="x">x Axis</param>
            <param name="y">y Axis</param>
        </member>
        <member name="T:ZS.ZSTask">
            <summary>
            Provides methods to use tasks in Small Basic.
            </summary>
        </member>
        <member name="M:ZS.ZSTask.RunSub(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Runs a subroutine as a new task.
            </summary>
            <param name="SubName">The name of the subroutine to run.</param>
            <returns>The ID of the created task.</returns>
        </member>
        <member name="M:ZS.ZSTask.Status(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Get the status of a task
            </summary>
            <param name="TaskID">The ID of the task.</param>
            <returns>The status of task.</returns>
        </member>
        <member name="M:ZS.ZSTask.WaitForTask(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Waits for a task to complete.
            </summary>
            <param name="TaskID">The ID of the task to wait for.</param>
        </member>
        <member name="M:ZS.ZSTask.WaitForTask(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Waits for a task to complete.
            </summary>
            <param name="TaskID">The ID of the task to wait for.</param>
            <param name="Time">The time in milisecond to wait for.</param>
        </member>
        <member name="M:ZS.ZSTask.IsRunning(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if a task is still running.
            </summary>
            <param name="TaskID">The ID of the task to check.</param>
            <returns>True if the task is running, false otherwise.</returns>
        </member>
        <member name="T:ZS.ZSTest">
            <summary>
            Just For Testing.
            </summary>
        </member>
        <member name="M:ZS.ZSTest.Fire">
            <summary>
            Fires The Event.
            </summary>
        </member>
        <member name="M:ZS.ZSTest.FireSub(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Fires A Sub.
            </summary>
            <param name="SubName">The Sub Name</param>
        </member>
        <member name="M:ZS.ZSTest.Ops(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts True To False And Vice-Versa.
            </summary>
            <param name="Bool">The Bool True Or False</param>
            <returns>Ops String</returns>
        </member>
        <member name="M:ZS.ZSTest.Variables">
            <summary>
            Return A Array Of All Variables In This App.
            </summary>
        </member>
        <member name="E:ZS.ZSTest.FireEvent">
            <summary>
            This Event Can Be Fired From Method ZSTest.Fire
            </summary>
        </member>
        <member name="T:ZS.ZSText">
            <summary>
            Provides a comprehensive set of text manipulation functions, enhancing the capability of Small Basic programs to process and transform strings with ease.
            </summary>
        </member>
        <member name="M:ZS.ZSText.ToUpper(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts the input text to uppercase.
            </summary>
            <param name="input">The text to be converted.</param>
            <returns>The uppercase version of the input text.</returns>
        </member>
        <member name="M:ZS.ZSText.ToLower(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts the input text to lowercase.
            </summary>
            <param name="input">The text to be converted.</param>
            <returns>The lowercase version of the input text.</returns>
        </member>
        <member name="M:ZS.ZSText.Substring(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Extracts a substring from the input text.
            </summary>
            <param name="input">The text to extract from.</param>
            <param name="startIndex">The starting index of the substring.</param>
            <param name="length">The length of the substring.</param>
            <returns>The extracted substring.</returns>
        </member>
        <member name="M:ZS.ZSText.Contains(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if the input text contains the specified value.
            </summary>
            <param name="input">The text to search in.</param>
            <param name="value">The value to search for.</param>
            <returns>True if the input text contains the value, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSText.IndexOf(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Finds the index of the specified value in the input text.
            </summary>
            <param name="input">The text to search in.</param>
            <param name="value">The value to find.</param>
            <returns>The index of the value in the input text, or -1 if not found.</returns>
        </member>
        <member name="M:ZS.ZSText.Replace(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Replaces occurrences of a specified value in the input text with another value.
            </summary>
            <param name="input">The text to be modified.</param>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The value to replace with.</param>
            <returns>The modified text with replacements.</returns>
        </member>
        <member name="M:ZS.ZSText.Length(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the length of the input text.
            </summary>
            <param name="input">The text to measure.</param>
            <returns>The length of the input text.</returns>
        </member>
        <member name="M:ZS.ZSText.Trim(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Trims leading and trailing whitespace from the input text.
            </summary>
            <param name="input">The text to be trimmed.</param>
            <returns>The trimmed text.</returns>
        </member>
        <member name="M:ZS.ZSText.Split(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Splits the input text into an array of substrings based on a delimiter.
            </summary>
            <param name="input">The text to be split.</param>
            <param name="delimiter">The delimiter to split by.</param>
            <returns>An array of substrings.</returns>
        </member>
        <member name="M:ZS.ZSText.SplitWithoutEmpty(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Splits the input text into an array of substrings based on a delimiter.
            Removes The Empty.
            </summary>
            <param name="input">The text to be split.</param>
            <param name="delimiter">The delimiter to split by.</param>
            <returns>An array of substrings.</returns>
        </member>
        <member name="M:ZS.ZSText.ToCamelCase(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts a string to camelCase format.
            </summary>
            <param name="input">The input text to convert.</param>
            <returns>The input text in camelCase format.</returns>
        </member>
        <member name="M:ZS.ZSText.Reverse(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Reverses the input text.
            </summary>
            <param name="input">The text to be reversed.</param>
            <returns>The reversed text.</returns>
        </member>
        <member name="M:ZS.ZSText.ToTitleCase(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts the first letter of each word in the input text to uppercase.
            </summary>
            <param name="input">The text to be converted.</param>
            <returns>The converted text with each word's first letter in uppercase.</returns>
        </member>
        <member name="M:ZS.ZSText.StartsWith(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if the input text starts with the specified value.
            </summary>
            <param name="input">The text to check.</param>
            <param name="value">The value to check for.</param>
            <returns>True if the input text starts with the value, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSText.EndsWith(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if the input text ends with the specified value.
            </summary>
            <param name="input">The text to check.</param>
            <param name="value">The value to check for.</param>
            <returns>True if the input text ends with the value, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSText.HtmlEncode(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Encodes the input text into HTML entities.
            </summary>
            <param name="input">The text to be encoded.</param>
            <returns>The HTML-encoded text.</returns>
        </member>
        <member name="M:ZS.ZSText.HtmlDecode(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Decodes the input text from HTML entities.
            </summary>
            <param name="input">The HTML-encoded text to be decoded.</param>
            <returns>The decoded text.</returns>
        </member>
        <member name="M:ZS.ZSText.UrlEncode(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Encodes the input text into URL format.
            </summary>
            <param name="input">The text to be URL-encoded.</param>
            <returns>The URL-encoded text.</returns>
        </member>
        <member name="M:ZS.ZSText.UrlDecode(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Decodes the input text from URL format.
            </summary>
            <param name="input">The URL-encoded text to be decoded.</param>
            <returns>The decoded text.</returns>
        </member>
        <member name="M:ZS.ZSText.CountOccurrences(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Counts the occurrences of a substring within the input text.
            </summary>
            <param name="text">The text to search within.</param>
            <param name="substring">The substring to count.</param>
            <returns>The number of occurrences of the substring in the text.</returns>
        </member>
        <member name="M:ZS.ZSText.StartsWithPrefix(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if the input text starts with the specified prefix.
            </summary>
            <param name="text">The text to check.</param>
            <param name="prefix">The prefix to check against.</param>
            <returns>True if the text starts with the prefix, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSText.EndsWithSuffix(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if the input text ends with the specified suffix.
            </summary>
            <param name="text">The text to check.</param>
            <param name="suffix">The suffix to check against.</param>
            <returns>True if the text ends with the suffix, otherwise false.</returns>
        </member>
        <member name="P:ZS.ZSText.NewLine">
            <summary>
            Gets the newline character "\n".
            </summary>
        </member>
        <member name="P:ZS.ZSText.Comma">
            <summary>
            Gets the comma character ",".
            </summary>
        </member>
        <member name="P:ZS.ZSText.Tab">
            <summary>
            Gets the tab character "\t".
            </summary>
        </member>
        <member name="P:ZS.ZSText.Colon">
            <summary>
            Gets the colon character ":".
            </summary>
        </member>
        <member name="P:ZS.ZSText.Semicolon">
            <summary>
            Gets the semicolon character ";".
            </summary>
        </member>
        <member name="P:ZS.ZSText.Dash">
            <summary>
            Gets the dash character "-".
            </summary>
        </member>
        <member name="P:ZS.ZSText.Underscore">
            <summary>
            Gets the underscore character "_".
            </summary>
        </member>
        <member name="P:ZS.ZSText.Period">
            <summary>
            Gets the period character ".".
            </summary>
        </member>
        <member name="P:ZS.ZSText.QuestionMark">
            <summary>
            Gets the question mark character "?".
            </summary>
        </member>
        <member name="P:ZS.ZSText.ExclamationMark">
            <summary>
            Gets the exclamation mark character "!".
            </summary>
        </member>
        <member name="P:ZS.ZSText.QuotationMark">
            <summary>
            Gets the quotation mark character '"'.
            </summary>
        </member>
        <member name="P:ZS.ZSText.SingleQuote">
            <summary>
            Gets the single quote character '\''.
            </summary>
        </member>
        <member name="P:ZS.ZSText.ParenthesesOpen">
            <summary>
            Gets the parentheses opening character '('.
            </summary>
        </member>
        <member name="P:ZS.ZSText.ParenthesesClose">
            <summary>
            Gets the parentheses closing character ')'.
            </summary>
        </member>
        <member name="P:ZS.ZSText.BracketOpen">
            <summary>
            Gets the square bracket opening character '['.
            </summary>
        </member>
        <member name="P:ZS.ZSText.BracketClose">
            <summary>
            Gets the square bracket closing character ']'.
            </summary>
        </member>
        <member name="P:ZS.ZSText.BraceOpen">
            <summary>
            Gets the curly brace opening character '{'.
            </summary>
        </member>
        <member name="P:ZS.ZSText.BraceClose">
            <summary>
            Gets the curly brace closing character '}'.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ZS.ZSText.AngleBracketOpen" -->
        <member name="P:ZS.ZSText.AngleBracketClose">
            <summary>
            Gets the angle bracket closing character '>'.
            </summary>
        </member>
        <member name="T:ZS.ZSThread">
            <summary>
            Provides methods to use multiple threads in Small Basic.
            </summary>
        </member>
        <member name="M:ZS.ZSThread.RunSub(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Runs a subroutine on a new thread.
            </summary>
            <param name="SubName">The name of the subroutine to run.</param>
            <returns>The ID of the created thread.</returns>
        </member>
        <member name="M:ZS.ZSThread.TerminateThread(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Terminates a thread by its ID.
            </summary>
            <param name="ThreadId">The ID of the thread to terminate.</param>
        </member>
        <member name="M:ZS.ZSThread.WaitForThread(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Waits for a thread to complete.
            </summary>
            <param name="ThreadId">The ID of the thread to wait for.</param>
        </member>
        <member name="M:ZS.ZSThread.IsAlive(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets a value indicating the execution status of the current thread.
            </summary>
            <param name="Threadid">The Thread ID</param>
            <returns>true if this thread has been started and has not terminated normally or aborted; otherwise, false.</returns>
        </member>
        <member name="M:ZS.ZSThread.ThreadState(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets a value containing the states of the current thread.
            </summary>
            <param name="Threadid">The Thread ID</param>
            <returns>ne of the ThreadState values indicating the state of the current thread. The initial value is Unstarted.</returns>
        </member>
        <member name="T:ZS.ZSUtilities">
            <summary>
            Provides General Utilities Functions For Small Basic.
            </summary>
        </member>
        <member name="M:ZS.ZSUtilities.Init">
            <summary>
            Init zs utilities for any exception in program.
            </summary>
        </member>
        <member name="M:ZS.ZSUtilities.SendLeftClick(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sends a left mouse click at the specified screen coordinates.
            </summary>
            <param name="x">The x-coordinate of the screen position.</param>
            <param name="y">The y-coordinate of the screen position.</param>
        </member>
        <member name="M:ZS.ZSUtilities.SendRightClick(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sends a right mouse click at the specified screen coordinates.
            </summary>
            <param name="x">The x-coordinate of the screen position.</param>
            <param name="y">The y-coordinate of the screen position.</param>
        </member>
        <member name="M:ZS.ZSUtilities.SetCursorPosition(System.UInt32,System.UInt32)">
            <summary>
            Sets the cursor position to the specified screen coordinates.
            </summary>
            <param name="x">The x-coordinate of the screen position.</param>
            <param name="y">The y-coordinate of the screen position.</param>
        </member>
        <member name="M:ZS.ZSUtilities.GetCurrentTime">
            <summary>
            Returns the current system time as a string.
            </summary>
            <returns>The current system time in HH:mm:ss format.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetCurrentDate">
            <summary>
            Returns the current system date as a string.
            </summary>
            <returns>The current system date in yyyy-MM-dd format.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GenerateRandomNumber(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Generates a random number between the specified minimum and maximum values.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>A random number between min and max.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.ConvertToUpperCase(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts the given string to uppercase.
            </summary>
            <param name="input">The string to convert.</param>
            <returns>The uppercase version of the input string.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.ConvertToLowerCase(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts the given string to lowercase.
            </summary>
            <param name="input">The string to convert.</param>
            <returns>The lowercase version of the input string.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.ThrowException(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Throws an exception with the specified message.
            </summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:ZS.ZSUtilities.CalculateSquareRoot(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Calculates the square root of a number.
            </summary>
            <param name="a">The number.</param>
            <returns>The square root of a.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetMachineName">
            <summary>
            Gets the machine name of the current computer.
            </summary>
            <returns>The machine name.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetOSVersion">
            <summary>
            Gets the operating system version of the current computer.
            </summary>
            <returns>The operating system version.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetEnvironmentVariable(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the value of an environment variable.
            </summary>
            <param name="variable">The name of the environment variable.</param>
            <returns>The value of the environment variable.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.OpenUrl(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Opens the specified URL in the default web browser.
            </summary>
            <param name="url">The URL to open.</param>
        </member>
        <member name="M:ZS.ZSUtilities.GetCurrentDirectory">
            <summary>
            Gets the current working directory.
            </summary>
            <returns>The current working directory.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetUserName">
            <summary>
            Gets the user name of the currently logged-in user.
            </summary>
            <returns>The user name.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetCurrentCulture">
            <summary>
            Gets the current culture name.
            </summary>
            <returns>The name of the current culture.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetRandomGuid">
            <summary>
            Generates a random GUID (Globally Unique Identifier).
            </summary>
            <returns>A random GUID as a string.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.PlayBeep">
            <summary>
            Plays a simple beep sound.
            </summary>
        </member>
        <member name="M:ZS.ZSUtilities.IsFileExists(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if a file exists at the specified path.
            </summary>
            <param name="filePath">The path of the file.</param>
            <returns>True if the file exists, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetTempPath">
            <summary>
            Gets the path of the temporary folder.
            </summary>
            <returns>The path of the temporary folder.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetAllDrives">
            <summary>
            Gets a list of all drive names on the current computer.
            </summary>
            <returns>A comma-separated list of drive names.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.CreateDirectory(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Creates a directory at the specified path.
            </summary>
            <param name="path">The path of the directory to create.</param>
        </member>
        <member name="M:ZS.ZSUtilities.GetCurrentProcessId">
            <summary>
            Gets the process ID of the current process.
            </summary>
            <returns>The process ID of the current process.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetSystemDirectory">
            <summary>
            Gets the path of the system directory.
            </summary>
            <returns>The path of the system directory.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetUserProfileDirectory">
            <summary>
            Gets the path of the user profile directory.
            </summary>
            <returns>The path of the user profile directory.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetUtcNow">
            <summary>
            Gets the current UTC date and time.
            </summary>
            <returns>The current UTC date and time in yyyy-MM-dd HH:mm:ss format.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetProcessCount">
            <summary>
            Gets the number of currently running processes on the system.
            </summary>
            <returns>The number of running processes.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetCurrentThreadId">
            <summary>
            Gets the ID of the current thread.
            </summary>
            <returns>The ID of the current thread.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetLocalTime">
            <summary>
            Gets the current local date and time.
            </summary>
            <returns>The current local date and time in yyyy-MM-dd HH:mm:ss format.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetTickCount">
            <summary>
            Gets the number of milliseconds elapsed since the system started.
            </summary>
            <returns>The number of milliseconds since the system started.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.CheckIs64BitOperatingSystem">
            <summary>
            Checks if the current operating system is 64-bit.
            </summary>
            <returns>True if the operating system is 64-bit, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.CheckIs64BitProcess">
            <summary>
            Checks if the current process is running in 64-bit mode.
            </summary>
            <returns>True if the process is 64-bit, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetLogicalProcessors">
            <summary>
            Gets the number of logical processors on the current machine.
            </summary>
            <returns>The number of logical processors.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetAppDomainName">
            <summary>
            Gets the name of the current application domain.
            </summary>
            <returns>The name of the current application domain.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetAssemblyVersion">
            <summary>
            Gets the version of the currently executing assembly.
            </summary>
            <returns>The version of the current assembly.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.IsRunningAsAdmin">
            <summary>
            Checks if the application is running with administrative privileges.
            </summary>
            <returns>True if running as an administrator, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetSystemTimeZone">
            <summary>
            Gets the current system time zone.
            </summary>
            <returns>The name of the current time zone.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetLogicalDrives">
            <summary>
            Gets a list of all logical drives on the system.
            </summary>
            <returns>A comma-separated list of drive names.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetActiveWindowTitle">
            <summary>
            Gets the title of the currently active window.
            </summary>
            <returns>The title of the active window.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.CaptureScreenSegment(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Captures a segment of the screen and saves it as an image file.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the segment.</param>
            <param name="y">The y-coordinate of the upper-left corner of the segment.</param>
            <param name="width">The width of the segment.</param>
            <param name="height">The height of the segment.</param>
            <param name="filePath">The path where the image file will be saved.</param>
        </member>
        <member name="M:ZS.ZSUtilities.IsDebuggerAttached">
            <summary>
            Checks if a debugger is attached to the process.
            </summary>
            <returns>True if a debugger is attached, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetCurrentManagedThreadId">
            <summary>
            Gets the ID of the current managed thread.
            </summary>
            <returns>The ID of the current managed thread.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetSystemDirectoryPath">
            <summary>
            Gets the path of the system directory.
            </summary>
            <returns>The path of the system directory.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetUserDomainName">
            <summary>
            Gets the domain name associated with the current user.
            </summary>
            <returns>The domain name of the current user.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetOsVersion">
            <summary>
            Gets the version of the operating system.
            </summary>
            <returns>The version of the operating system.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetUserInteractive">
            <summary>
            Checks if the current process is running in user-interactive mode.
            </summary>
            <returns>True if the process is running in user-interactive mode, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetSystemUptime">
            <summary>
            Gets the system uptime in seconds.
            </summary>
            <returns>The system uptime in seconds.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetCurrentUICulture">
            <summary>
            Gets the current UI culture of the operating system.
            </summary>
            <returns>The name of the current UI culture.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetInstalledFontNames">
            <summary>
            Gets a list of installed font names on the system.
            </summary>
            <returns>A comma-separated list of installed font names.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetNetworkInterfaceNames">
            <summary>
            Gets a list of network interface names on the system.
            </summary>
            <returns>A comma-separated list of network interface names.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetRunningProcesses">
            <summary>
            Gets a list of running process names on the system.
            </summary>
            <returns>A comma-separated list of running process names.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetBatteryStatus">
            <summary>
            Gets the battery charge status.
            </summary>
            <returns>The battery charge status as a percentage.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetClipboardText">
            <summary>
            Gets the current text content from the clipboard.
            </summary>
            <returns>The text content from the clipboard, or an empty string if the clipboard is empty or does not contain text.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.SetClipboardText(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sets the specified text content to the clipboard.
            </summary>
            <param name="text">The text content to set to the clipboard.</param>
        </member>
        <member name="M:ZS.ZSUtilities.GetCpuUsage">
            <summary>
            Gets the current CPU usage percentage.
            </summary>
            <returns>The current CPU usage percentage.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetMacAddress">
            <summary>
            Gets the MAC address of the first operational network interface.
            </summary>
            <returns>The MAC address as a string, or an empty string if no operational network interface is found.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetIpAddress">
            <summary>
            Gets the local IP address of the machine.
            </summary>
            <returns>The local IP address, or an empty string if no network connection is found.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetSystemDrive">
            <summary>
            Gets the system drive letter (e.g., "C").
            </summary>
            <returns>The system drive letter.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetCurrentUser">
            <summary>
            Gets the name of the current user.
            </summary>
            <returns>The name of the current user.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetSystemPageSize">
            <summary>
            Gets the size of the system's memory page in bytes.
            </summary>
            <returns>The size of the memory page in bytes.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetCurrentProcessMemoryUsage">
            <summary>
            Gets the memory usage of the current process in bytes.
            </summary>
            <returns>The memory usage of the current process in bytes.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.DownloadFile(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Downloads a file from the specified URL to the specified destination path.
            </summary>
            <param name="url">The URL of the file to download.</param>
            <param name="destinationPath">The path where the file will be saved.</param>
        </member>
        <member name="M:ZS.ZSUtilities.GetExternalIpAddress">
            <summary>
            Gets the external IP address of the machine.
            </summary>
            <returns>The external IP address as a string.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetMachineGuid">
            <summary>
            Gets the machine GUID (Globally Unique Identifier).
            </summary>
            <returns>The machine GUID as a string.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetRunningServices">
            <summary>
            Gets a list of running services on the machine.
            </summary>
            <returns>A comma-separated list of running service names.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.CaptureActiveWindow(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Captures a screenshot of the active window and saves it as an image file.
            </summary>
            <param name="filePath">The path where the image file will be saved.</param>
        </member>
        <member name="M:ZS.ZSUtilities.StartProcessWithArguments(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Starts a process with the specified arguments.
            </summary>
            <param name="processName">The name of the process to start.</param>
            <param name="arguments">The arguments to pass to the process.</param>
        </member>
        <member name="M:ZS.ZSUtilities.KillProcessByName(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Kills a process by its name.
            </summary>
            <param name="processName">The name of the process to kill.</param>
        </member>
        <member name="M:ZS.ZSUtilities.GetCurrentDirectoryFiles">
            <summary>
            Gets a list of all files in the current directory.
            </summary>
            <returns>A comma-separated list of file names in the current directory.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.SendEmail(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sends an email using SMTP.
            </summary>
            <param name="to">The recipient email address.</param>
            <param name="subject">The email subject.</param>
            <param name="body">The email body.</param>
            <param name="smtpServer">The SMTP server address.</param>
            <param name="smtpPort">The SMTP server port.</param>
            <param name="username">The SMTP server username.</param>
            <param name="password">The SMTP server password.</param>
        </member>
        <member name="M:ZS.ZSUtilities.GenerateUUID">
            <summary>
            Generates a unique identifier (UUID) as a string.
            </summary>
            <returns>A UUID string.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.ConvertBase(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts a number from one base to another base.
            </summary>
            <param name="number">The number to convert.</param>
            <param name="fromBase">The base of the input number.</param>
            <param name="toBase">The base to convert the number to.</param>
            <returns>The converted number as a string.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetRandomItem(Microsoft.SmallBasic.Library.Primitive[])">
            <summary>
            Gets a random item from an array of items.
            </summary>
            <param name="items">An array of items.</param>
            <returns>A random item from the array.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.IsPalindrome(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if a given string is a palindrome.
            </summary>
            <param name="text">The string to check.</param>
            <returns>True if the string is a palindrome, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.SumOfDigits(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Calculates the sum of the digits of a given number.
            </summary>
            <param name="number">The number whose digits are to be summed.</param>
            <returns>The sum of the digits.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GenerateFibonacciSequence(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Generates a Fibonacci sequence of a given length.
            </summary>
            <param name="length">The length of the Fibonacci sequence.</param>
            <returns>An array containing the Fibonacci sequence.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.IsPrime(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if a given number is a prime number.
            </summary>
            <param name="number">The number to check.</param>
            <returns>True if the number is prime, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.LevenshteinDistance(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Calculates the Levenshtein distance between two strings.
            </summary>
            <param name="source">The source string.</param>
            <param name="target">The target string.</param>
            <returns>The Levenshtein distance between the two strings.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.ConvertToTitleCase(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts a given string to title case (each word starts with a capital letter).
            </summary>
            <param name="text">The text to convert.</param>
            <returns>The text in title case.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.Factorial(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Calculates the factorial of a given number.
            </summary>
            <param name="number">The number to calculate the factorial for.</param>
            <returns>The factorial of the number.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.FindMedian(Microsoft.SmallBasic.Library.Primitive[])">
            <summary>
            Finds the median value in a given array of numbers.
            </summary>
            <param name="array">The array of numbers.</param>
            <returns>The median value of the array.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.IsArmstrong(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if a given number is an Armstrong number (Narcissistic number).
            </summary>
            <param name="number">The number to check.</param>
            <returns>True if the number is an Armstrong number, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.CountWords(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Counts the number of words in a given string.
            </summary>
            <param name="text">The text to count words in.</param>
            <returns>The number of words in the text.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GeneratePrimesUpTo(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Generates a list of prime numbers up to a specified number.
            </summary>
            <param name="limit">The upper limit to generate prime numbers up to.</param>
            <returns>An array of prime numbers up to the specified limit.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.CalculateHypotenuse(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Calculates the length of the hypotenuse in a right triangle given the lengths of the other two sides.
            </summary>
            <param name="a">The length of one side.</param>
            <param name="b">The length of the other side.</param>
            <returns>The length of the hypotenuse.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.CountVowels(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Counts the number of vowels in a given string.
            </summary>
            <param name="text">The text to count vowels in.</param>
            <returns>The number of vowels in the text.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.FindSubstrings(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Finds all substrings of a specified length from a given string.
            </summary>
            <param name="text">The text to extract substrings from.</param>
            <param name="length">The length of each substring.</param>
            <returns>An array of substrings of the specified length.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.RGBToHex(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts RGB color values to a hex color code.
            </summary>
            <param name="red">The red component (0-255).</param>
            <param name="green">The green component (0-255).</param>
            <param name="blue">The blue component (0-255).</param>
            <returns>The hex color code as a string.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.IsNumeric(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if a given string represents a numeric value.
            </summary>
            <param name="text">The string to check.</param>
            <returns>True if the string is numeric, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.RemoveDuplicates(Microsoft.SmallBasic.Library.Primitive[])">
            <summary>
            Removes duplicate values from an array.
            </summary>
            <param name="array">The array with possible duplicate values.</param>
            <returns>An array with duplicates removed.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetDayOfWeek(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the name of the day of the week for a given date.
            </summary>
            <param name="date">The date to get the day of the week for.</param>
            <returns>The name of the day of the week.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.SortDescending(Microsoft.SmallBasic.Library.Primitive[])">
            <summary>
            Sorts an array of numbers in descending order.
            </summary>
            <param name="array">The array to sort.</param>
            <returns>The sorted array in descending order.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.CalculateAge(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Calculates the age of a person given their birthdate.
            </summary>
            <param name="birthdate">The birthdate to calculate the age from.</param>
            <returns>The age in years.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.ContainsOnlyLetters(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if a given string contains only letters.
            </summary>
            <param name="text">The string to check.</param>
            <returns>True if the string contains only letters, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.CalculateCompoundInterest(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Calculates compound interest over a specified number of periods.
            </summary>
            <param name="principal">The principal amount.</param>
            <param name="rate">The annual interest rate (as a decimal).</param>
            <param name="periods">The number of periods per year.</param>
            <param name="years">The number of years the money is invested for.</param>
            <returns>The compound interest amount.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.ConvertToBase64(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts a given string to Base64 encoding.
            </summary>
            <param name="text">The string to encode.</param>
            <returns>The Base64 encoded string.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.FindMax(Microsoft.SmallBasic.Library.Primitive[])">
            <summary>
            Finds the maximum value in an array of numbers.
            </summary>
            <param name="array">The array to search.</param>
            <returns>The maximum value in the array.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.FindMin(Microsoft.SmallBasic.Library.Primitive[])">
            <summary>
            Finds the minimum value in an array of numbers.
            </summary>
            <param name="array">The array to search.</param>
            <returns>The minimum value in the array.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.CalculateGCD(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Calculates the greatest common divisor (GCD) of two integers using the Euclidean algorithm.
            </summary>
            <param name="a">The first integer.</param>
            <param name="b">The second integer.</param>
            <returns>The GCD of the two integers.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GenerateRandomPassword(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Generates a random password of a specified length containing letters and digits.
            </summary>
            <param name="length">The length of the password.</param>
            <returns>The generated password.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.ToIso8601(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts a DateTime object to ISO 8601 format (yyyy-MM-ddTHH:mm:ssZ).
            </summary>
            <param name="dateTime">The DateTime object to convert.</param>
            <returns>The ISO 8601 formatted date string.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.MergeArrays(Microsoft.SmallBasic.Library.Primitive[],Microsoft.SmallBasic.Library.Primitive[])">
            <summary>
            Merges two arrays into a single array.
            </summary>
            <param name="array1">The first array.</param>
            <param name="array2">The second array.</param>
            <returns>The merged array.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.IsEven(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if a given number is even.
            </summary>
            <param name="number">The number to check.</param>
            <returns>True if the number is even, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.IsOdd(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Checks if a given number is odd.
            </summary>
            <param name="number">The number to check.</param>
            <returns>True if the number is odd, otherwise false.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.ConvertFromBase64(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts a Base64 encoded string back to its original string representation.
            </summary>
            <param name="base64">The Base64 encoded string.</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.GetColorFromRGB(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets a color from its RGB components.
            </summary>
            <param name="red">The red component (0-255).</param>
            <param name="green">The green component (0-255).</param>
            <param name="blue">The blue component (0-255).</param>
            <returns>The color in string format.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.ConvertColorToHex(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts a color from its RGB components to a hexadecimal string.
            </summary>
            <param name="color">The color in RGB string format.</param>
            <returns>The color in hexadecimal format.</returns>
        </member>
        <member name="M:ZS.ZSUtilities.HexToRGB(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Converts a hexadecimal color string to an RGB color.
            </summary>
            <param name="hexColor">The hexadecimal color string (e.g., "#RRGGBB").</param>
            <returns>An array containing the RGB values.</returns>
        </member>
        <member name="T:ZS.ZSGlobalization">
            <summary>
            Provides methods and properties for working with globalization, including culture information, date and time formatting, number formatting, and text information.
            This class also includes support for various calendars such as Gregorian, Hijri, Chinese, and Korean.
            </summary>
        </member>
        <member name="M:ZS.ZSGlobalization.GetCultures">
            <summary>
            Get All Cultures.
            </summary>
            <returns>The Array of Cultures Name.</returns>
        </member>
        <member name="P:ZS.ZSGlobalization.CurrentCulture">
            <summary>
            Gets or sets the current culture. Example: "en-US"
            </summary>
            <example>
            Get the current culture: <br />
            <code>currentCulture = ZSGlobalization.CurrentCulture</code><br />
            Set the current culture to French (France): <br />
            <code>ZSGlobalization.CurrentCulture = "fr-FR"</code>
            </example>
        </member>
        <member name="P:ZS.ZSGlobalization.Calendar">
            <summary>
            Gets the name of the calendar used by the current culture. Example: "GregorianCalendar"
            </summary>
        </member>
        <member name="P:ZS.ZSGlobalization.ShortDatePattern">
            <summary>
            Gets or sets the date and time pattern for short dates. Example: "MM/dd/yyyy"
            </summary>
            <example>
            Get the short date pattern: <br />
            <code>shortDatePattern = ZSGlobalization.ShortDatePattern</code><br />
            Set the short date pattern to day/month/year: <br />
            <code>ZSGlobalization.ShortDatePattern = "dd/MM/yyyy"</code>
            </example>
        </member>
        <member name="P:ZS.ZSGlobalization.LongDatePattern">
            <summary>
            Gets or sets the date and time pattern for long dates. Example: "dddd, MMMM dd, yyyy"
            </summary>
            <example>
            Get the long date pattern: <br />
            <code>longDatePattern = ZSGlobalization.LongDatePattern</code><br />
            Set the long date pattern to day of week, day month year: <br />
            <code>ZSGlobalization.LongDatePattern = "dddd, dd MMMM yyyy"</code>
            </example>
        </member>
        <member name="P:ZS.ZSGlobalization.NumberDecimalSeparator">
            <summary>
            Gets or sets the number decimal separator. Example: "."
            </summary>
            <example>
            Get the number decimal separator: <br />
            <code>decimalSeparator = ZSGlobalization.NumberDecimalSeparator</code><br />
            Set the number decimal separator to a comma: <br />
            <code>ZSGlobalization.NumberDecimalSeparator = ","</code>
            </example>
        </member>
        <member name="P:ZS.ZSGlobalization.CurrencySymbol">
            <summary>
            Gets or sets the currency symbol. Example: "$"
            </summary>
            <example>
            Get the currency symbol: <br />
            <code>currencySymbol = ZSGlobalization.CurrencySymbol</code><br />
            Set the currency symbol to Euro: <br />
            <code>ZSGlobalization.CurrencySymbol = "€"</code>
            </example>
        </member>
        <member name="P:ZS.ZSGlobalization.TextInfo">
            <summary>
            Gets the text information (casing) of the current culture. Example: "Invariant"
            </summary>
            <example>
            Get the text info: <br />
            <code>textInfo = ZSGlobalization.TextInfo</code>
            </example>
        </member>
        <member name="P:ZS.ZSGlobalization.TwoLetterISOLanguageName">
            <summary>
            Gets the ISO 639-1 two-letter code for the language of the current culture. Example: "en"
            </summary>
        </member>
        <member name="P:ZS.ZSGlobalization.ThreeLetterISOLanguageName">
            <summary>
            Gets the ISO 639-2 three-letter code for the language of the current culture. Example: "eng"
            </summary>
        </member>
        <member name="P:ZS.ZSGlobalization.ThreeLetterWindowsLanguageName">
            <summary>
            Gets the Windows three-letter code for the language of the current culture. Example: "ENU"
            </summary>
        </member>
        <member name="P:ZS.ZSGlobalization.NativeName">
            <summary>
            Gets the native name of the language of the current culture. Example: "English"
            </summary>
        </member>
        <member name="P:ZS.ZSGlobalization.HijriDate">
            <summary>
            Gets the current date in the Hijri calendar.
            </summary>
        </member>
        <member name="P:ZS.ZSGlobalization.ChineseDate">
            <summary>
            Gets the current date in the Chinese calendar.
            </summary>
        </member>
        <member name="P:ZS.ZSGlobalization.GregorianDate">
            <summary>
            Gets the current date in the Gregorian calendar.
            </summary>
        </member>
        <member name="P:ZS.ZSGlobalization.KoreanDate">
            <summary>
            Gets the current date in the Korean calendar.
            </summary>
        </member>
        <member name="T:ZS.ZSWpf">
            <summary>
            Wpf And GW.
            </summary>
        </member>
        <member name="M:ZS.ZSWpf.SetWindowVisible(System.Boolean)">
            <summary>
            Changes the value of the internal static field '_windowVisible' in the GraphicsWindow class.
            </summary>
            <param name="value">The value to set (true or false).</param>
        </member>
        <member name="M:ZS.ZSWpf.GetStyleFromXaml(System.String,System.String)">
            <summary>
            Loads a style from a specified XAML file path and style name.
            </summary>
            <param name="xamlFilePath">The file path of the XAML file.</param>
            <param name="styleName">The name of the style to retrieve.</param>
            <returns>The style if found, otherwise null.</returns>
        </member>
        <member name="M:ZS.ZSWpf.Title(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sets the Title for the Graphic Window.
            </summary>
            <param name="Title">The Title</param>
        </member>
        <member name="M:ZS.ZSWpf.SetStyle(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Sets a style from a XAML file to a shape or control.
            </summary>
            <param name="shapeName">The control or shape name.</param>
            <param name="xaml">The XAML file name.</param>
            <param name="style">The style name.</param>
        </member>
    </members>
</doc>
